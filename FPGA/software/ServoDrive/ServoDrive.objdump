
ServoDrive.elf:     file format elf32-littlenios2
ServoDrive.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000016dc memsz 0x000016dc flags r-x
    LOAD off    0x000026fc vaddr 0x000096fc paddr 0x000099d0 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002ca4 vaddr 0x00009ca4 paddr 0x00009ca4 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000016a8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  000096c8  000096c8  000026c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  000096fc  000099d0  000026fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  00009ca4  00009ca4  00002ca4  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000470  00000000  00000000  000029f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005125  00000000  00000000  00002e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c7e  00000000  00000000  00007f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021e5  00000000  00000000  00009c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006b0  00000000  00000000  0000bdf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000011f0  00000000  00000000  0000c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e05  00000000  00000000  0000d690  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  0000e498  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000050  00000000  00000000  0000e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000fb46  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  0000fb49  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000fb55  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000fb56  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000fb57  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0000fb5b  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000fb5f  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000fb63  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0000fb6e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000fb79  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000007  00000000  00000000  0000fb84  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000015  00000000  00000000  0000fb8b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003c20f  00000000  00000000  0000fba0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
000096c8 l    d  .rodata	00000000 .rodata
000096fc l    d  .rwdata	00000000 .rwdata
00009ca4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ServoDrive_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Servo.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008154 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000082e8 l     F .text	00000038 alt_dev_reg
000096fc l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00008728 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008860 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000888c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008a50 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00008ba8 l     F .text	00000050 alt_get_errno
00008bf8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
000098d0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000955c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00008240 g     F .text	00000078 alt_main
000099d0 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009cb0 g     O .bss	00000004 errno
00009ca8 g     O .bss	00000004 alt_argv
000119b0 g       *ABS*	00000000 _gp
000082b8 g     F .text	00000030 usleep
00009750 g     O .rwdata	00000180 alt_fd_list
00008ee0 g     F .text	00000090 alt_find_dev
00008b30 g     F .text	00000078 alt_io_redirect
000096c8 g       *ABS*	00000000 __DTOR_END__
00008448 g     F .text	000000f4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000967c g     F .text	00000008 __udivsi3
000099c0 g     O .rwdata	00000004 alt_max_fd
000099c8 g     O .rwdata	00000004 _global_impure_ptr
00009d40 g       *ABS*	00000000 __bss_end
00009728 g     O .rwdata	00000028 alt_dev_null
00008844 g     F .text	0000001c alt_dcache_flush_all
000099d0 g       *ABS*	00000000 __ram_rwdata_end
000099b8 g     O .rwdata	00000008 alt_dev_list
000096fc g       *ABS*	00000000 __ram_rodata_end
00009684 g     F .text	00000008 __umodsi3
00009d40 g       *ABS*	00000000 end
000096c8 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
0000853c g     F .text	00000098 altera_avalon_jtag_uart_write
00009384 g     F .text	000001d8 __call_exitprocs
00008020 g     F .text	0000003c _start
00008354 g     F .text	00000034 alt_sys_init
000091fc g     F .text	00000188 __register_exitproc
0000812c g     F .text	00000028 __mulsi3
000096fc g       *ABS*	00000000 __ram_rwdata_start
000096c8 g       *ABS*	00000000 __ram_rodata_start
00008388 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009084 g     F .text	000000d4 alt_get_fd
000085d4 g     F .text	00000154 alt_busy_sleep
0000918c g     F .text	00000048 memcmp
00009d40 g       *ABS*	00000000 __alt_stack_base
00008f70 g     F .text	00000114 alt_find_file
000088dc g     F .text	000000a0 alt_dev_llist_insert
00009ca4 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000d0 main
00009cac g     O .bss	00000004 alt_envp
000083e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009cb4 g     O .bss	0000008c _atexit0
000099c4 g     O .rwdata	00000004 alt_errno
000095d0 g     F .text	00000050 __divsi3
000096c8 g       *ABS*	00000000 __CTOR_END__
000096c8 g       *ABS*	00000000 __flash_rodata_start
000096c8 g       *ABS*	00000000 __DTOR_LIST__
00008320 g     F .text	00000034 alt_irq_init
00008e40 g     F .text	00000080 alt_release_fd
00009158 g     F .text	00000014 atexit
000099cc g     O .rwdata	00000004 _impure_ptr
00009ca4 g     O .bss	00000004 alt_argc
000089d8 g     F .text	0000005c _do_dtors
000099b0 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000099d0 g       *ABS*	00000000 _edata
00009d40 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008ec0 g     F .text	00000020 altera_nios2_qsys_irq_init
0000916c g     F .text	00000020 exit
00009620 g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000968c g     F .text	0000003c _exit
000091d4 g     F .text	00000028 strlen
00008ce8 g     F .text	00000158 open
00008a34 g     F .text	0000001c alt_icache_flush_all
0000897c g     F .text	0000005c _do_ctors
00008778 g     F .text	000000cc close
000081c0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6866c14 	ori	gp,gp,6576
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a72914 	ori	r2,r2,40100

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e75014 	ori	r3,r3,40256

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00081c00 	call	81c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00082400 	call	8240 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#define PWM_REG_UPDATEON_Z 0x9
#define PWM_REG_UPDATEON_MAX 0xA
#define PWM_REG_UPDATE 0xF

int main()
{
    805c:	defffa04 	addi	sp,sp,-24
    8060:	dfc00515 	stw	ra,20(sp)
    8064:	df000415 	stw	fp,16(sp)
    8068:	dc000315 	stw	r16,12(sp)
    806c:	df000304 	addi	fp,sp,12
	//printf("Hello from Nios II!\n");

	int halfperiod = 50000000/16000;
    8070:	00830d44 	movi	r2,3125
    8074:	e0bfff15 	stw	r2,-4(fp)

	IOWR(PWM_0_BASE, PWM_REG_UPDATEON_Z, 1);
    8078:	00c00044 	movi	r3,1
    807c:	00800074 	movhi	r2,1
    8080:	10840904 	addi	r2,r2,4132
    8084:	10c00035 	stwio	r3,0(r2)
	IOWR(PWM_0_BASE, PWM_REG_MAXCTR, halfperiod);
    8088:	00800074 	movhi	r2,1
    808c:	10840804 	addi	r2,r2,4128
    8090:	e0ffff17 	ldw	r3,-4(fp)
    8094:	10c00035 	stwio	r3,0(r2)

	for (int ud = 0; 1; ud ^= 1)
    8098:	e03ffd15 	stw	zero,-12(fp)
	{
		for (int i = 0; i < 6; ++i)
    809c:	e03ffe15 	stw	zero,-8(fp)
    80a0:	00001406 	br	80f4 <main+0x98>
		{
			IOWR(PWM_0_BASE, i, (halfperiod+(ud*1000))/2);
    80a4:	e0bffe17 	ldw	r2,-8(fp)
    80a8:	1085883a 	add	r2,r2,r2
    80ac:	1085883a 	add	r2,r2,r2
    80b0:	1007883a 	mov	r3,r2
    80b4:	00800074 	movhi	r2,1
    80b8:	10840004 	addi	r2,r2,4096
    80bc:	18a1883a 	add	r16,r3,r2
    80c0:	e13ffd17 	ldw	r4,-12(fp)
    80c4:	0140fa04 	movi	r5,1000
    80c8:	000812c0 	call	812c <__mulsi3>
    80cc:	1007883a 	mov	r3,r2
    80d0:	e0bfff17 	ldw	r2,-4(fp)
    80d4:	1885883a 	add	r2,r3,r2
    80d8:	1006d7fa 	srli	r3,r2,31
    80dc:	1885883a 	add	r2,r3,r2
    80e0:	1005d07a 	srai	r2,r2,1
    80e4:	80800035 	stwio	r2,0(r16)
	IOWR(PWM_0_BASE, PWM_REG_UPDATEON_Z, 1);
	IOWR(PWM_0_BASE, PWM_REG_MAXCTR, halfperiod);

	for (int ud = 0; 1; ud ^= 1)
	{
		for (int i = 0; i < 6; ++i)
    80e8:	e0bffe17 	ldw	r2,-8(fp)
    80ec:	10800044 	addi	r2,r2,1
    80f0:	e0bffe15 	stw	r2,-8(fp)
    80f4:	e0bffe17 	ldw	r2,-8(fp)
    80f8:	10800190 	cmplti	r2,r2,6
    80fc:	103fe91e 	bne	r2,zero,80a4 <main+0x48>
		{
			IOWR(PWM_0_BASE, i, (halfperiod+(ud*1000))/2);
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
    8100:	00c00044 	movi	r3,1
    8104:	00800074 	movhi	r2,1
    8108:	10840f04 	addi	r2,r2,4156
    810c:	10c00035 	stwio	r3,0(r2)

		usleep(500000);
    8110:	01000234 	movhi	r4,8
    8114:	21284804 	addi	r4,r4,-24288
    8118:	00082b80 	call	82b8 <usleep>
	int halfperiod = 50000000/16000;

	IOWR(PWM_0_BASE, PWM_REG_UPDATEON_Z, 1);
	IOWR(PWM_0_BASE, PWM_REG_MAXCTR, halfperiod);

	for (int ud = 0; 1; ud ^= 1)
    811c:	e0bffd17 	ldw	r2,-12(fp)
    8120:	1080005c 	xori	r2,r2,1
    8124:	e0bffd15 	stw	r2,-12(fp)
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);

		usleep(500000);
	}
    8128:	003fdc06 	br	809c <main+0x40>

0000812c <__mulsi3>:
    812c:	0005883a 	mov	r2,zero
    8130:	20000726 	beq	r4,zero,8150 <__mulsi3+0x24>
    8134:	20c0004c 	andi	r3,r4,1
    8138:	2008d07a 	srli	r4,r4,1
    813c:	18000126 	beq	r3,zero,8144 <__mulsi3+0x18>
    8140:	1145883a 	add	r2,r2,r5
    8144:	294b883a 	add	r5,r5,r5
    8148:	203ffa1e 	bne	r4,zero,8134 <__mulsi3+0x8>
    814c:	f800283a 	ret
    8150:	f800283a 	ret

00008154 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8154:	defffc04 	addi	sp,sp,-16
    8158:	df000315 	stw	fp,12(sp)
    815c:	df000304 	addi	fp,sp,12
    8160:	e13ffd15 	stw	r4,-12(fp)
    8164:	e17ffe15 	stw	r5,-8(fp)
    8168:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    816c:	e0fffe17 	ldw	r3,-8(fp)
    8170:	e0bffd17 	ldw	r2,-12(fp)
    8174:	18800e26 	beq	r3,r2,81b0 <alt_load_section+0x5c>
  {
    while( to != end )
    8178:	00000a06 	br	81a4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    817c:	e0bffd17 	ldw	r2,-12(fp)
    8180:	10c00017 	ldw	r3,0(r2)
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	10c00015 	stw	r3,0(r2)
    818c:	e0bffe17 	ldw	r2,-8(fp)
    8190:	10800104 	addi	r2,r2,4
    8194:	e0bffe15 	stw	r2,-8(fp)
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800104 	addi	r2,r2,4
    81a0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    81a4:	e0fffe17 	ldw	r3,-8(fp)
    81a8:	e0bfff17 	ldw	r2,-4(fp)
    81ac:	18bff31e 	bne	r3,r2,817c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    81b0:	e037883a 	mov	sp,fp
    81b4:	df000017 	ldw	fp,0(sp)
    81b8:	dec00104 	addi	sp,sp,4
    81bc:	f800283a 	ret

000081c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    81c0:	defffe04 	addi	sp,sp,-8
    81c4:	dfc00115 	stw	ra,4(sp)
    81c8:	df000015 	stw	fp,0(sp)
    81cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    81d0:	01000074 	movhi	r4,1
    81d4:	21267404 	addi	r4,r4,-26160
    81d8:	01400074 	movhi	r5,1
    81dc:	2965bf04 	addi	r5,r5,-26884
    81e0:	01800074 	movhi	r6,1
    81e4:	31a67404 	addi	r6,r6,-26160
    81e8:	00081540 	call	8154 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    81ec:	01000074 	movhi	r4,1
    81f0:	21200804 	addi	r4,r4,-32736
    81f4:	01400074 	movhi	r5,1
    81f8:	29600804 	addi	r5,r5,-32736
    81fc:	01800074 	movhi	r6,1
    8200:	31a00804 	addi	r6,r6,-32736
    8204:	00081540 	call	8154 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8208:	01000074 	movhi	r4,1
    820c:	2125b204 	addi	r4,r4,-26936
    8210:	01400074 	movhi	r5,1
    8214:	2965b204 	addi	r5,r5,-26936
    8218:	01800074 	movhi	r6,1
    821c:	31a5bf04 	addi	r6,r6,-26884
    8220:	00081540 	call	8154 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8224:	00088440 	call	8844 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8228:	0008a340 	call	8a34 <alt_icache_flush_all>
}
    822c:	e037883a 	mov	sp,fp
    8230:	dfc00117 	ldw	ra,4(sp)
    8234:	df000017 	ldw	fp,0(sp)
    8238:	dec00204 	addi	sp,sp,8
    823c:	f800283a 	ret

00008240 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8240:	defffd04 	addi	sp,sp,-12
    8244:	dfc00215 	stw	ra,8(sp)
    8248:	df000115 	stw	fp,4(sp)
    824c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8250:	0009883a 	mov	r4,zero
    8254:	00083200 	call	8320 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8258:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    825c:	00083540 	call	8354 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8260:	01000074 	movhi	r4,1
    8264:	2125b204 	addi	r4,r4,-26936
    8268:	01400074 	movhi	r5,1
    826c:	2965b204 	addi	r5,r5,-26936
    8270:	01800074 	movhi	r6,1
    8274:	31a5b204 	addi	r6,r6,-26936
    8278:	0008b300 	call	8b30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    827c:	000897c0 	call	897c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8280:	01000074 	movhi	r4,1
    8284:	21227604 	addi	r4,r4,-30248
    8288:	00091580 	call	9158 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    828c:	d120bd17 	ldw	r4,-32012(gp)
    8290:	d0e0be17 	ldw	r3,-32008(gp)
    8294:	d0a0bf17 	ldw	r2,-32004(gp)
    8298:	180b883a 	mov	r5,r3
    829c:	100d883a 	mov	r6,r2
    82a0:	000805c0 	call	805c <main>
    82a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    82a8:	01000044 	movi	r4,1
    82ac:	00087780 	call	8778 <close>
  exit (result);
    82b0:	e13fff17 	ldw	r4,-4(fp)
    82b4:	000916c0 	call	916c <exit>

000082b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    82b8:	defffd04 	addi	sp,sp,-12
    82bc:	dfc00215 	stw	ra,8(sp)
    82c0:	df000115 	stw	fp,4(sp)
    82c4:	df000104 	addi	fp,sp,4
    82c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    82cc:	e13fff17 	ldw	r4,-4(fp)
    82d0:	00085d40 	call	85d4 <alt_busy_sleep>
}
    82d4:	e037883a 	mov	sp,fp
    82d8:	dfc00117 	ldw	ra,4(sp)
    82dc:	df000017 	ldw	fp,0(sp)
    82e0:	dec00204 	addi	sp,sp,8
    82e4:	f800283a 	ret

000082e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    82e8:	defffd04 	addi	sp,sp,-12
    82ec:	dfc00215 	stw	ra,8(sp)
    82f0:	df000115 	stw	fp,4(sp)
    82f4:	df000104 	addi	fp,sp,4
    82f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    82fc:	e13fff17 	ldw	r4,-4(fp)
    8300:	01400074 	movhi	r5,1
    8304:	29666e04 	addi	r5,r5,-26184
    8308:	00088dc0 	call	88dc <alt_dev_llist_insert>
}
    830c:	e037883a 	mov	sp,fp
    8310:	dfc00117 	ldw	ra,4(sp)
    8314:	df000017 	ldw	fp,0(sp)
    8318:	dec00204 	addi	sp,sp,8
    831c:	f800283a 	ret

00008320 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8320:	defffd04 	addi	sp,sp,-12
    8324:	dfc00215 	stw	ra,8(sp)
    8328:	df000115 	stw	fp,4(sp)
    832c:	df000104 	addi	fp,sp,4
    8330:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    8334:	0008ec00 	call	8ec0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8338:	00800044 	movi	r2,1
    833c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8340:	e037883a 	mov	sp,fp
    8344:	dfc00117 	ldw	ra,4(sp)
    8348:	df000017 	ldw	fp,0(sp)
    834c:	dec00204 	addi	sp,sp,8
    8350:	f800283a 	ret

00008354 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8354:	defffe04 	addi	sp,sp,-8
    8358:	dfc00115 	stw	ra,4(sp)
    835c:	df000015 	stw	fp,0(sp)
    8360:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8364:	01000074 	movhi	r4,1
    8368:	2125bf04 	addi	r4,r4,-26884
    836c:	00082e80 	call	82e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    8370:	0001883a 	nop
}
    8374:	e037883a 	mov	sp,fp
    8378:	dfc00117 	ldw	ra,4(sp)
    837c:	df000017 	ldw	fp,0(sp)
    8380:	dec00204 	addi	sp,sp,8
    8384:	f800283a 	ret

00008388 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8388:	defffa04 	addi	sp,sp,-24
    838c:	dfc00515 	stw	ra,20(sp)
    8390:	df000415 	stw	fp,16(sp)
    8394:	df000404 	addi	fp,sp,16
    8398:	e13ffd15 	stw	r4,-12(fp)
    839c:	e17ffe15 	stw	r5,-8(fp)
    83a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    83a4:	e0bffd17 	ldw	r2,-12(fp)
    83a8:	10800017 	ldw	r2,0(r2)
    83ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    83b0:	e0bffc17 	ldw	r2,-16(fp)
    83b4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    83b8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    83bc:	10800217 	ldw	r2,8(r2)
    83c0:	1809883a 	mov	r4,r3
    83c4:	e17ffe17 	ldw	r5,-8(fp)
    83c8:	e1bfff17 	ldw	r6,-4(fp)
    83cc:	100f883a 	mov	r7,r2
    83d0:	00084480 	call	8448 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    83d4:	e037883a 	mov	sp,fp
    83d8:	dfc00117 	ldw	ra,4(sp)
    83dc:	df000017 	ldw	fp,0(sp)
    83e0:	dec00204 	addi	sp,sp,8
    83e4:	f800283a 	ret

000083e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    83e8:	defffa04 	addi	sp,sp,-24
    83ec:	dfc00515 	stw	ra,20(sp)
    83f0:	df000415 	stw	fp,16(sp)
    83f4:	df000404 	addi	fp,sp,16
    83f8:	e13ffd15 	stw	r4,-12(fp)
    83fc:	e17ffe15 	stw	r5,-8(fp)
    8400:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8404:	e0bffd17 	ldw	r2,-12(fp)
    8408:	10800017 	ldw	r2,0(r2)
    840c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8410:	e0bffc17 	ldw	r2,-16(fp)
    8414:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8418:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    841c:	10800217 	ldw	r2,8(r2)
    8420:	1809883a 	mov	r4,r3
    8424:	e17ffe17 	ldw	r5,-8(fp)
    8428:	e1bfff17 	ldw	r6,-4(fp)
    842c:	100f883a 	mov	r7,r2
    8430:	000853c0 	call	853c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8434:	e037883a 	mov	sp,fp
    8438:	dfc00117 	ldw	ra,4(sp)
    843c:	df000017 	ldw	fp,0(sp)
    8440:	dec00204 	addi	sp,sp,8
    8444:	f800283a 	ret

00008448 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8448:	defff704 	addi	sp,sp,-36
    844c:	df000815 	stw	fp,32(sp)
    8450:	df000804 	addi	fp,sp,32
    8454:	e13ffc15 	stw	r4,-16(fp)
    8458:	e17ffd15 	stw	r5,-12(fp)
    845c:	e1bffe15 	stw	r6,-8(fp)
    8460:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8464:	e0bffc17 	ldw	r2,-16(fp)
    8468:	10800017 	ldw	r2,0(r2)
    846c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    8470:	e0bffd17 	ldw	r2,-12(fp)
    8474:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    8478:	e0bffe17 	ldw	r2,-8(fp)
    847c:	e0fffd17 	ldw	r3,-12(fp)
    8480:	1885883a 	add	r2,r3,r2
    8484:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    8488:	00001406 	br	84dc <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    848c:	e0bff917 	ldw	r2,-28(fp)
    8490:	10800037 	ldwio	r2,0(r2)
    8494:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8498:	e0bffb17 	ldw	r2,-20(fp)
    849c:	10a0000c 	andi	r2,r2,32768
    84a0:	10000826 	beq	r2,zero,84c4 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    84a4:	e0bffb17 	ldw	r2,-20(fp)
    84a8:	1007883a 	mov	r3,r2
    84ac:	e0bff817 	ldw	r2,-32(fp)
    84b0:	10c00005 	stb	r3,0(r2)
    84b4:	e0bff817 	ldw	r2,-32(fp)
    84b8:	10800044 	addi	r2,r2,1
    84bc:	e0bff815 	stw	r2,-32(fp)
    84c0:	00000606 	br	84dc <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    84c4:	e0fff817 	ldw	r3,-32(fp)
    84c8:	e0bffd17 	ldw	r2,-12(fp)
    84cc:	1880071e 	bne	r3,r2,84ec <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    84d0:	e0bfff17 	ldw	r2,-4(fp)
    84d4:	1090000c 	andi	r2,r2,16384
    84d8:	1000061e 	bne	r2,zero,84f4 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    84dc:	e0fff817 	ldw	r3,-32(fp)
    84e0:	e0bffa17 	ldw	r2,-24(fp)
    84e4:	18bfe936 	bltu	r3,r2,848c <altera_avalon_jtag_uart_read+0x44>
    84e8:	00000306 	br	84f8 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    84ec:	0001883a 	nop
    84f0:	00000106 	br	84f8 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    84f4:	0001883a 	nop
    
  }

  if (ptr != buffer)
    84f8:	e0fff817 	ldw	r3,-32(fp)
    84fc:	e0bffd17 	ldw	r2,-12(fp)
    8500:	18800426 	beq	r3,r2,8514 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    8504:	e0fff817 	ldw	r3,-32(fp)
    8508:	e0bffd17 	ldw	r2,-12(fp)
    850c:	1885c83a 	sub	r2,r3,r2
    8510:	00000606 	br	852c <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    8514:	e0bfff17 	ldw	r2,-4(fp)
    8518:	1090000c 	andi	r2,r2,16384
    851c:	10000226 	beq	r2,zero,8528 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    8520:	00bffd44 	movi	r2,-11
    8524:	00000106 	br	852c <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    8528:	00bffec4 	movi	r2,-5
}
    852c:	e037883a 	mov	sp,fp
    8530:	df000017 	ldw	fp,0(sp)
    8534:	dec00104 	addi	sp,sp,4
    8538:	f800283a 	ret

0000853c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    853c:	defff904 	addi	sp,sp,-28
    8540:	df000615 	stw	fp,24(sp)
    8544:	df000604 	addi	fp,sp,24
    8548:	e13ffc15 	stw	r4,-16(fp)
    854c:	e17ffd15 	stw	r5,-12(fp)
    8550:	e1bffe15 	stw	r6,-8(fp)
    8554:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8558:	e0bffc17 	ldw	r2,-16(fp)
    855c:	10800017 	ldw	r2,0(r2)
    8560:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8564:	e0bffe17 	ldw	r2,-8(fp)
    8568:	e0fffd17 	ldw	r3,-12(fp)
    856c:	1885883a 	add	r2,r3,r2
    8570:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    8574:	00000f06 	br	85b4 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8578:	e0bffa17 	ldw	r2,-24(fp)
    857c:	10800104 	addi	r2,r2,4
    8580:	10800037 	ldwio	r2,0(r2)
    8584:	10bfffec 	andhi	r2,r2,65535
    8588:	10000a26 	beq	r2,zero,85b4 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    858c:	e0bffa17 	ldw	r2,-24(fp)
    8590:	e0fffd17 	ldw	r3,-12(fp)
    8594:	18c00003 	ldbu	r3,0(r3)
    8598:	18c03fcc 	andi	r3,r3,255
    859c:	18c0201c 	xori	r3,r3,128
    85a0:	18ffe004 	addi	r3,r3,-128
    85a4:	e13ffd17 	ldw	r4,-12(fp)
    85a8:	21000044 	addi	r4,r4,1
    85ac:	e13ffd15 	stw	r4,-12(fp)
    85b0:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    85b4:	e0fffd17 	ldw	r3,-12(fp)
    85b8:	e0bffb17 	ldw	r2,-20(fp)
    85bc:	18bfee36 	bltu	r3,r2,8578 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    85c0:	e0bffe17 	ldw	r2,-8(fp)
}
    85c4:	e037883a 	mov	sp,fp
    85c8:	df000017 	ldw	fp,0(sp)
    85cc:	dec00104 	addi	sp,sp,4
    85d0:	f800283a 	ret

000085d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    85d4:	defffa04 	addi	sp,sp,-24
    85d8:	dfc00515 	stw	ra,20(sp)
    85dc:	df000415 	stw	fp,16(sp)
    85e0:	df000404 	addi	fp,sp,16
    85e4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    85e8:	00800244 	movi	r2,9
    85ec:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    85f0:	e13ffd17 	ldw	r4,-12(fp)
    85f4:	014003f4 	movhi	r5,15
    85f8:	29509004 	addi	r5,r5,16960
    85fc:	000812c0 	call	812c <__mulsi3>
    8600:	0100bef4 	movhi	r4,763
    8604:	213c2004 	addi	r4,r4,-3968
    8608:	100b883a 	mov	r5,r2
    860c:	000967c0 	call	967c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8610:	01200034 	movhi	r4,32768
    8614:	213fffc4 	addi	r4,r4,-1
    8618:	100b883a 	mov	r5,r2
    861c:	000967c0 	call	967c <__udivsi3>
    8620:	e13fff17 	ldw	r4,-4(fp)
    8624:	100b883a 	mov	r5,r2
    8628:	000967c0 	call	967c <__udivsi3>
    862c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8630:	e0bffe17 	ldw	r2,-8(fp)
    8634:	10002926 	beq	r2,zero,86dc <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    8638:	e03ffc15 	stw	zero,-16(fp)
    863c:	00001606 	br	8698 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8640:	00a00034 	movhi	r2,32768
    8644:	10bfffc4 	addi	r2,r2,-1
    8648:	10bfffc4 	addi	r2,r2,-1
    864c:	103ffe1e 	bne	r2,zero,8648 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    8650:	e13ffd17 	ldw	r4,-12(fp)
    8654:	014003f4 	movhi	r5,15
    8658:	29509004 	addi	r5,r5,16960
    865c:	000812c0 	call	812c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8660:	0100bef4 	movhi	r4,763
    8664:	213c2004 	addi	r4,r4,-3968
    8668:	100b883a 	mov	r5,r2
    866c:	000967c0 	call	967c <__udivsi3>
    8670:	01200034 	movhi	r4,32768
    8674:	213fffc4 	addi	r4,r4,-1
    8678:	100b883a 	mov	r5,r2
    867c:	000967c0 	call	967c <__udivsi3>
    8680:	e0ffff17 	ldw	r3,-4(fp)
    8684:	1885c83a 	sub	r2,r3,r2
    8688:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    868c:	e0bffc17 	ldw	r2,-16(fp)
    8690:	10800044 	addi	r2,r2,1
    8694:	e0bffc15 	stw	r2,-16(fp)
    8698:	e0fffc17 	ldw	r3,-16(fp)
    869c:	e0bffe17 	ldw	r2,-8(fp)
    86a0:	18bfe716 	blt	r3,r2,8640 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    86a4:	e13ffd17 	ldw	r4,-12(fp)
    86a8:	014003f4 	movhi	r5,15
    86ac:	29509004 	addi	r5,r5,16960
    86b0:	000812c0 	call	812c <__mulsi3>
    86b4:	0100bef4 	movhi	r4,763
    86b8:	213c2004 	addi	r4,r4,-3968
    86bc:	100b883a 	mov	r5,r2
    86c0:	000967c0 	call	967c <__udivsi3>
    86c4:	1009883a 	mov	r4,r2
    86c8:	e17fff17 	ldw	r5,-4(fp)
    86cc:	000812c0 	call	812c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    86d0:	10bfffc4 	addi	r2,r2,-1
    86d4:	103ffe1e 	bne	r2,zero,86d0 <alt_busy_sleep+0xfc>
    86d8:	00000d06 	br	8710 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    86dc:	e13ffd17 	ldw	r4,-12(fp)
    86e0:	014003f4 	movhi	r5,15
    86e4:	29509004 	addi	r5,r5,16960
    86e8:	000812c0 	call	812c <__mulsi3>
    86ec:	0100bef4 	movhi	r4,763
    86f0:	213c2004 	addi	r4,r4,-3968
    86f4:	100b883a 	mov	r5,r2
    86f8:	000967c0 	call	967c <__udivsi3>
    86fc:	1009883a 	mov	r4,r2
    8700:	e17fff17 	ldw	r5,-4(fp)
    8704:	000812c0 	call	812c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8708:	10bfffc4 	addi	r2,r2,-1
    870c:	00bffe16 	blt	zero,r2,8708 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    8710:	0005883a 	mov	r2,zero
}
    8714:	e037883a 	mov	sp,fp
    8718:	dfc00117 	ldw	ra,4(sp)
    871c:	df000017 	ldw	fp,0(sp)
    8720:	dec00204 	addi	sp,sp,8
    8724:	f800283a 	ret

00008728 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8728:	defffe04 	addi	sp,sp,-8
    872c:	dfc00115 	stw	ra,4(sp)
    8730:	df000015 	stw	fp,0(sp)
    8734:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8738:	00800074 	movhi	r2,1
    873c:	10a67104 	addi	r2,r2,-26172
    8740:	10800017 	ldw	r2,0(r2)
    8744:	10000526 	beq	r2,zero,875c <alt_get_errno+0x34>
    8748:	00800074 	movhi	r2,1
    874c:	10a67104 	addi	r2,r2,-26172
    8750:	10800017 	ldw	r2,0(r2)
    8754:	103ee83a 	callr	r2
    8758:	00000206 	br	8764 <alt_get_errno+0x3c>
    875c:	00800074 	movhi	r2,1
    8760:	10a72c04 	addi	r2,r2,-25424
}
    8764:	e037883a 	mov	sp,fp
    8768:	dfc00117 	ldw	ra,4(sp)
    876c:	df000017 	ldw	fp,0(sp)
    8770:	dec00204 	addi	sp,sp,8
    8774:	f800283a 	ret

00008778 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8778:	defffb04 	addi	sp,sp,-20
    877c:	dfc00415 	stw	ra,16(sp)
    8780:	df000315 	stw	fp,12(sp)
    8784:	df000304 	addi	fp,sp,12
    8788:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    878c:	e0bfff17 	ldw	r2,-4(fp)
    8790:	10000716 	blt	r2,zero,87b0 <close+0x38>
    8794:	e13fff17 	ldw	r4,-4(fp)
    8798:	01400304 	movi	r5,12
    879c:	000812c0 	call	812c <__mulsi3>
    87a0:	00c00074 	movhi	r3,1
    87a4:	18e5d404 	addi	r3,r3,-26800
    87a8:	10c5883a 	add	r2,r2,r3
    87ac:	00000106 	br	87b4 <close+0x3c>
    87b0:	0005883a 	mov	r2,zero
    87b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    87b8:	e0bffd17 	ldw	r2,-12(fp)
    87bc:	10001826 	beq	r2,zero,8820 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    87c0:	e0bffd17 	ldw	r2,-12(fp)
    87c4:	10800017 	ldw	r2,0(r2)
    87c8:	10800417 	ldw	r2,16(r2)
    87cc:	10000626 	beq	r2,zero,87e8 <close+0x70>
    87d0:	e0bffd17 	ldw	r2,-12(fp)
    87d4:	10800017 	ldw	r2,0(r2)
    87d8:	10800417 	ldw	r2,16(r2)
    87dc:	e13ffd17 	ldw	r4,-12(fp)
    87e0:	103ee83a 	callr	r2
    87e4:	00000106 	br	87ec <close+0x74>
    87e8:	0005883a 	mov	r2,zero
    87ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    87f0:	e13fff17 	ldw	r4,-4(fp)
    87f4:	0008e400 	call	8e40 <alt_release_fd>
    if (rval < 0)
    87f8:	e0bffe17 	ldw	r2,-8(fp)
    87fc:	1000060e 	bge	r2,zero,8818 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    8800:	00087280 	call	8728 <alt_get_errno>
    8804:	e0fffe17 	ldw	r3,-8(fp)
    8808:	00c7c83a 	sub	r3,zero,r3
    880c:	10c00015 	stw	r3,0(r2)
      return -1;
    8810:	00bfffc4 	movi	r2,-1
    8814:	00000606 	br	8830 <close+0xb8>
    }
    return 0;
    8818:	0005883a 	mov	r2,zero
    881c:	00000406 	br	8830 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8820:	00087280 	call	8728 <alt_get_errno>
    8824:	00c01444 	movi	r3,81
    8828:	10c00015 	stw	r3,0(r2)
    return -1;
    882c:	00bfffc4 	movi	r2,-1
  }
}
    8830:	e037883a 	mov	sp,fp
    8834:	dfc00117 	ldw	ra,4(sp)
    8838:	df000017 	ldw	fp,0(sp)
    883c:	dec00204 	addi	sp,sp,8
    8840:	f800283a 	ret

00008844 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8844:	deffff04 	addi	sp,sp,-4
    8848:	df000015 	stw	fp,0(sp)
    884c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8850:	e037883a 	mov	sp,fp
    8854:	df000017 	ldw	fp,0(sp)
    8858:	dec00104 	addi	sp,sp,4
    885c:	f800283a 	ret

00008860 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8860:	defffc04 	addi	sp,sp,-16
    8864:	df000315 	stw	fp,12(sp)
    8868:	df000304 	addi	fp,sp,12
    886c:	e13ffd15 	stw	r4,-12(fp)
    8870:	e17ffe15 	stw	r5,-8(fp)
    8874:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8878:	e0bfff17 	ldw	r2,-4(fp)
}
    887c:	e037883a 	mov	sp,fp
    8880:	df000017 	ldw	fp,0(sp)
    8884:	dec00104 	addi	sp,sp,4
    8888:	f800283a 	ret

0000888c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    888c:	defffe04 	addi	sp,sp,-8
    8890:	dfc00115 	stw	ra,4(sp)
    8894:	df000015 	stw	fp,0(sp)
    8898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    889c:	00800074 	movhi	r2,1
    88a0:	10a67104 	addi	r2,r2,-26172
    88a4:	10800017 	ldw	r2,0(r2)
    88a8:	10000526 	beq	r2,zero,88c0 <alt_get_errno+0x34>
    88ac:	00800074 	movhi	r2,1
    88b0:	10a67104 	addi	r2,r2,-26172
    88b4:	10800017 	ldw	r2,0(r2)
    88b8:	103ee83a 	callr	r2
    88bc:	00000206 	br	88c8 <alt_get_errno+0x3c>
    88c0:	00800074 	movhi	r2,1
    88c4:	10a72c04 	addi	r2,r2,-25424
}
    88c8:	e037883a 	mov	sp,fp
    88cc:	dfc00117 	ldw	ra,4(sp)
    88d0:	df000017 	ldw	fp,0(sp)
    88d4:	dec00204 	addi	sp,sp,8
    88d8:	f800283a 	ret

000088dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    88dc:	defffa04 	addi	sp,sp,-24
    88e0:	dfc00515 	stw	ra,20(sp)
    88e4:	df000415 	stw	fp,16(sp)
    88e8:	df000404 	addi	fp,sp,16
    88ec:	e13ffe15 	stw	r4,-8(fp)
    88f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    88f4:	e0bffe17 	ldw	r2,-8(fp)
    88f8:	10000326 	beq	r2,zero,8908 <alt_dev_llist_insert+0x2c>
    88fc:	e0bffe17 	ldw	r2,-8(fp)
    8900:	10800217 	ldw	r2,8(r2)
    8904:	1000051e 	bne	r2,zero,891c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    8908:	000888c0 	call	888c <alt_get_errno>
    890c:	00c00584 	movi	r3,22
    8910:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    8914:	00bffa84 	movi	r2,-22
    8918:	00001306 	br	8968 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    891c:	e0bffe17 	ldw	r2,-8(fp)
    8920:	e0ffff17 	ldw	r3,-4(fp)
    8924:	e0fffc15 	stw	r3,-16(fp)
    8928:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    892c:	e0bffd17 	ldw	r2,-12(fp)
    8930:	e0fffc17 	ldw	r3,-16(fp)
    8934:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8938:	e0bffc17 	ldw	r2,-16(fp)
    893c:	10c00017 	ldw	r3,0(r2)
    8940:	e0bffd17 	ldw	r2,-12(fp)
    8944:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8948:	e0bffc17 	ldw	r2,-16(fp)
    894c:	10800017 	ldw	r2,0(r2)
    8950:	e0fffd17 	ldw	r3,-12(fp)
    8954:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8958:	e0bffc17 	ldw	r2,-16(fp)
    895c:	e0fffd17 	ldw	r3,-12(fp)
    8960:	10c00015 	stw	r3,0(r2)

  return 0;  
    8964:	0005883a 	mov	r2,zero
}
    8968:	e037883a 	mov	sp,fp
    896c:	dfc00117 	ldw	ra,4(sp)
    8970:	df000017 	ldw	fp,0(sp)
    8974:	dec00204 	addi	sp,sp,8
    8978:	f800283a 	ret

0000897c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    897c:	defffd04 	addi	sp,sp,-12
    8980:	dfc00215 	stw	ra,8(sp)
    8984:	df000115 	stw	fp,4(sp)
    8988:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    898c:	00800074 	movhi	r2,1
    8990:	10a5b104 	addi	r2,r2,-26940
    8994:	e0bfff15 	stw	r2,-4(fp)
    8998:	00000606 	br	89b4 <_do_ctors+0x38>
        (*ctor) (); 
    899c:	e0bfff17 	ldw	r2,-4(fp)
    89a0:	10800017 	ldw	r2,0(r2)
    89a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    89a8:	e0bfff17 	ldw	r2,-4(fp)
    89ac:	10bfff04 	addi	r2,r2,-4
    89b0:	e0bfff15 	stw	r2,-4(fp)
    89b4:	e0ffff17 	ldw	r3,-4(fp)
    89b8:	00800074 	movhi	r2,1
    89bc:	10a5b204 	addi	r2,r2,-26936
    89c0:	18bff62e 	bgeu	r3,r2,899c <_do_ctors+0x20>
        (*ctor) (); 
}
    89c4:	e037883a 	mov	sp,fp
    89c8:	dfc00117 	ldw	ra,4(sp)
    89cc:	df000017 	ldw	fp,0(sp)
    89d0:	dec00204 	addi	sp,sp,8
    89d4:	f800283a 	ret

000089d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    89d8:	defffd04 	addi	sp,sp,-12
    89dc:	dfc00215 	stw	ra,8(sp)
    89e0:	df000115 	stw	fp,4(sp)
    89e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    89e8:	00800074 	movhi	r2,1
    89ec:	10a5b104 	addi	r2,r2,-26940
    89f0:	e0bfff15 	stw	r2,-4(fp)
    89f4:	00000606 	br	8a10 <_do_dtors+0x38>
        (*dtor) (); 
    89f8:	e0bfff17 	ldw	r2,-4(fp)
    89fc:	10800017 	ldw	r2,0(r2)
    8a00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8a04:	e0bfff17 	ldw	r2,-4(fp)
    8a08:	10bfff04 	addi	r2,r2,-4
    8a0c:	e0bfff15 	stw	r2,-4(fp)
    8a10:	e0ffff17 	ldw	r3,-4(fp)
    8a14:	00800074 	movhi	r2,1
    8a18:	10a5b204 	addi	r2,r2,-26936
    8a1c:	18bff62e 	bgeu	r3,r2,89f8 <_do_dtors+0x20>
        (*dtor) (); 
}
    8a20:	e037883a 	mov	sp,fp
    8a24:	dfc00117 	ldw	ra,4(sp)
    8a28:	df000017 	ldw	fp,0(sp)
    8a2c:	dec00204 	addi	sp,sp,8
    8a30:	f800283a 	ret

00008a34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8a34:	deffff04 	addi	sp,sp,-4
    8a38:	df000015 	stw	fp,0(sp)
    8a3c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8a40:	e037883a 	mov	sp,fp
    8a44:	df000017 	ldw	fp,0(sp)
    8a48:	dec00104 	addi	sp,sp,4
    8a4c:	f800283a 	ret

00008a50 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8a50:	defff804 	addi	sp,sp,-32
    8a54:	dfc00715 	stw	ra,28(sp)
    8a58:	df000615 	stw	fp,24(sp)
    8a5c:	dc000515 	stw	r16,20(sp)
    8a60:	df000504 	addi	fp,sp,20
    8a64:	e13ffc15 	stw	r4,-16(fp)
    8a68:	e17ffd15 	stw	r5,-12(fp)
    8a6c:	e1bffe15 	stw	r6,-8(fp)
    8a70:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    8a74:	e13ffd17 	ldw	r4,-12(fp)
    8a78:	e17ffe17 	ldw	r5,-8(fp)
    8a7c:	e1bfff17 	ldw	r6,-4(fp)
    8a80:	0008ce80 	call	8ce8 <open>
    8a84:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    8a88:	e0bffb17 	ldw	r2,-20(fp)
    8a8c:	10002216 	blt	r2,zero,8b18 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    8a90:	04000074 	movhi	r16,1
    8a94:	8425d404 	addi	r16,r16,-26800
    8a98:	e0bffb17 	ldw	r2,-20(fp)
    8a9c:	1009883a 	mov	r4,r2
    8aa0:	01400304 	movi	r5,12
    8aa4:	000812c0 	call	812c <__mulsi3>
    8aa8:	8085883a 	add	r2,r16,r2
    8aac:	10c00017 	ldw	r3,0(r2)
    8ab0:	e0bffc17 	ldw	r2,-16(fp)
    8ab4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8ab8:	04000074 	movhi	r16,1
    8abc:	8425d404 	addi	r16,r16,-26800
    8ac0:	e0bffb17 	ldw	r2,-20(fp)
    8ac4:	1009883a 	mov	r4,r2
    8ac8:	01400304 	movi	r5,12
    8acc:	000812c0 	call	812c <__mulsi3>
    8ad0:	8085883a 	add	r2,r16,r2
    8ad4:	10800104 	addi	r2,r2,4
    8ad8:	10c00017 	ldw	r3,0(r2)
    8adc:	e0bffc17 	ldw	r2,-16(fp)
    8ae0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8ae4:	04000074 	movhi	r16,1
    8ae8:	8425d404 	addi	r16,r16,-26800
    8aec:	e0bffb17 	ldw	r2,-20(fp)
    8af0:	1009883a 	mov	r4,r2
    8af4:	01400304 	movi	r5,12
    8af8:	000812c0 	call	812c <__mulsi3>
    8afc:	8085883a 	add	r2,r16,r2
    8b00:	10800204 	addi	r2,r2,8
    8b04:	10c00017 	ldw	r3,0(r2)
    8b08:	e0bffc17 	ldw	r2,-16(fp)
    8b0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8b10:	e13ffb17 	ldw	r4,-20(fp)
    8b14:	0008e400 	call	8e40 <alt_release_fd>
  }
} 
    8b18:	e037883a 	mov	sp,fp
    8b1c:	dfc00217 	ldw	ra,8(sp)
    8b20:	df000117 	ldw	fp,4(sp)
    8b24:	dc000017 	ldw	r16,0(sp)
    8b28:	dec00304 	addi	sp,sp,12
    8b2c:	f800283a 	ret

00008b30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8b30:	defffb04 	addi	sp,sp,-20
    8b34:	dfc00415 	stw	ra,16(sp)
    8b38:	df000315 	stw	fp,12(sp)
    8b3c:	df000304 	addi	fp,sp,12
    8b40:	e13ffd15 	stw	r4,-12(fp)
    8b44:	e17ffe15 	stw	r5,-8(fp)
    8b48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8b4c:	01000074 	movhi	r4,1
    8b50:	2125d704 	addi	r4,r4,-26788
    8b54:	e17ffd17 	ldw	r5,-12(fp)
    8b58:	01800044 	movi	r6,1
    8b5c:	01c07fc4 	movi	r7,511
    8b60:	0008a500 	call	8a50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8b64:	01000074 	movhi	r4,1
    8b68:	2125d404 	addi	r4,r4,-26800
    8b6c:	e17ffe17 	ldw	r5,-8(fp)
    8b70:	000d883a 	mov	r6,zero
    8b74:	01c07fc4 	movi	r7,511
    8b78:	0008a500 	call	8a50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8b7c:	01000074 	movhi	r4,1
    8b80:	2125da04 	addi	r4,r4,-26776
    8b84:	e17fff17 	ldw	r5,-4(fp)
    8b88:	01800044 	movi	r6,1
    8b8c:	01c07fc4 	movi	r7,511
    8b90:	0008a500 	call	8a50 <alt_open_fd>
}  
    8b94:	e037883a 	mov	sp,fp
    8b98:	dfc00117 	ldw	ra,4(sp)
    8b9c:	df000017 	ldw	fp,0(sp)
    8ba0:	dec00204 	addi	sp,sp,8
    8ba4:	f800283a 	ret

00008ba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8ba8:	defffe04 	addi	sp,sp,-8
    8bac:	dfc00115 	stw	ra,4(sp)
    8bb0:	df000015 	stw	fp,0(sp)
    8bb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8bb8:	00800074 	movhi	r2,1
    8bbc:	10a67104 	addi	r2,r2,-26172
    8bc0:	10800017 	ldw	r2,0(r2)
    8bc4:	10000526 	beq	r2,zero,8bdc <alt_get_errno+0x34>
    8bc8:	00800074 	movhi	r2,1
    8bcc:	10a67104 	addi	r2,r2,-26172
    8bd0:	10800017 	ldw	r2,0(r2)
    8bd4:	103ee83a 	callr	r2
    8bd8:	00000206 	br	8be4 <alt_get_errno+0x3c>
    8bdc:	00800074 	movhi	r2,1
    8be0:	10a72c04 	addi	r2,r2,-25424
}
    8be4:	e037883a 	mov	sp,fp
    8be8:	dfc00117 	ldw	ra,4(sp)
    8bec:	df000017 	ldw	fp,0(sp)
    8bf0:	dec00204 	addi	sp,sp,8
    8bf4:	f800283a 	ret

00008bf8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8bf8:	defffb04 	addi	sp,sp,-20
    8bfc:	dfc00415 	stw	ra,16(sp)
    8c00:	df000315 	stw	fp,12(sp)
    8c04:	dc000215 	stw	r16,8(sp)
    8c08:	df000204 	addi	fp,sp,8
    8c0c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8c10:	e0bfff17 	ldw	r2,-4(fp)
    8c14:	10800217 	ldw	r2,8(r2)
    8c18:	10d00034 	orhi	r3,r2,16384
    8c1c:	e0bfff17 	ldw	r2,-4(fp)
    8c20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8c24:	e03ffe15 	stw	zero,-8(fp)
    8c28:	00002206 	br	8cb4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8c2c:	04000074 	movhi	r16,1
    8c30:	8425d404 	addi	r16,r16,-26800
    8c34:	e0bffe17 	ldw	r2,-8(fp)
    8c38:	1009883a 	mov	r4,r2
    8c3c:	01400304 	movi	r5,12
    8c40:	000812c0 	call	812c <__mulsi3>
    8c44:	8085883a 	add	r2,r16,r2
    8c48:	10c00017 	ldw	r3,0(r2)
    8c4c:	e0bfff17 	ldw	r2,-4(fp)
    8c50:	10800017 	ldw	r2,0(r2)
    8c54:	1880141e 	bne	r3,r2,8ca8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8c58:	04000074 	movhi	r16,1
    8c5c:	8425d404 	addi	r16,r16,-26800
    8c60:	e0bffe17 	ldw	r2,-8(fp)
    8c64:	1009883a 	mov	r4,r2
    8c68:	01400304 	movi	r5,12
    8c6c:	000812c0 	call	812c <__mulsi3>
    8c70:	8085883a 	add	r2,r16,r2
    8c74:	10800204 	addi	r2,r2,8
    8c78:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8c7c:	10000a0e 	bge	r2,zero,8ca8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    8c80:	e13ffe17 	ldw	r4,-8(fp)
    8c84:	01400304 	movi	r5,12
    8c88:	000812c0 	call	812c <__mulsi3>
    8c8c:	00c00074 	movhi	r3,1
    8c90:	18e5d404 	addi	r3,r3,-26800
    8c94:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8c98:	e0bfff17 	ldw	r2,-4(fp)
    8c9c:	18800226 	beq	r3,r2,8ca8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8ca0:	00bffcc4 	movi	r2,-13
    8ca4:	00000a06 	br	8cd0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8ca8:	e0bffe17 	ldw	r2,-8(fp)
    8cac:	10800044 	addi	r2,r2,1
    8cb0:	e0bffe15 	stw	r2,-8(fp)
    8cb4:	00800074 	movhi	r2,1
    8cb8:	10a67004 	addi	r2,r2,-26176
    8cbc:	10800017 	ldw	r2,0(r2)
    8cc0:	1007883a 	mov	r3,r2
    8cc4:	e0bffe17 	ldw	r2,-8(fp)
    8cc8:	18bfd82e 	bgeu	r3,r2,8c2c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8ccc:	0005883a 	mov	r2,zero
}
    8cd0:	e037883a 	mov	sp,fp
    8cd4:	dfc00217 	ldw	ra,8(sp)
    8cd8:	df000117 	ldw	fp,4(sp)
    8cdc:	dc000017 	ldw	r16,0(sp)
    8ce0:	dec00304 	addi	sp,sp,12
    8ce4:	f800283a 	ret

00008ce8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8ce8:	defff604 	addi	sp,sp,-40
    8cec:	dfc00915 	stw	ra,36(sp)
    8cf0:	df000815 	stw	fp,32(sp)
    8cf4:	df000804 	addi	fp,sp,32
    8cf8:	e13ffd15 	stw	r4,-12(fp)
    8cfc:	e17ffe15 	stw	r5,-8(fp)
    8d00:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8d04:	00bfffc4 	movi	r2,-1
    8d08:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    8d0c:	00bffb44 	movi	r2,-19
    8d10:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    8d14:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8d18:	e13ffd17 	ldw	r4,-12(fp)
    8d1c:	01400074 	movhi	r5,1
    8d20:	29666e04 	addi	r5,r5,-26184
    8d24:	0008ee00 	call	8ee0 <alt_find_dev>
    8d28:	e0bff815 	stw	r2,-32(fp)
    8d2c:	e0bff817 	ldw	r2,-32(fp)
    8d30:	1000051e 	bne	r2,zero,8d48 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8d34:	e13ffd17 	ldw	r4,-12(fp)
    8d38:	0008f700 	call	8f70 <alt_find_file>
    8d3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    8d40:	00800044 	movi	r2,1
    8d44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8d48:	e0bff817 	ldw	r2,-32(fp)
    8d4c:	10002a26 	beq	r2,zero,8df8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8d50:	e13ff817 	ldw	r4,-32(fp)
    8d54:	00090840 	call	9084 <alt_get_fd>
    8d58:	e0bff915 	stw	r2,-28(fp)
    8d5c:	e0bff917 	ldw	r2,-28(fp)
    8d60:	1000030e 	bge	r2,zero,8d70 <open+0x88>
    {
      status = index;
    8d64:	e0bff917 	ldw	r2,-28(fp)
    8d68:	e0bffa15 	stw	r2,-24(fp)
    8d6c:	00002406 	br	8e00 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    8d70:	e13ff917 	ldw	r4,-28(fp)
    8d74:	01400304 	movi	r5,12
    8d78:	000812c0 	call	812c <__mulsi3>
    8d7c:	00c00074 	movhi	r3,1
    8d80:	18e5d404 	addi	r3,r3,-26800
    8d84:	10c5883a 	add	r2,r2,r3
    8d88:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8d8c:	e0fffe17 	ldw	r3,-8(fp)
    8d90:	00900034 	movhi	r2,16384
    8d94:	10bfffc4 	addi	r2,r2,-1
    8d98:	1886703a 	and	r3,r3,r2
    8d9c:	e0bffc17 	ldw	r2,-16(fp)
    8da0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8da4:	e0bffb17 	ldw	r2,-20(fp)
    8da8:	1000051e 	bne	r2,zero,8dc0 <open+0xd8>
    8dac:	e13ffc17 	ldw	r4,-16(fp)
    8db0:	0008bf80 	call	8bf8 <alt_file_locked>
    8db4:	e0bffa15 	stw	r2,-24(fp)
    8db8:	e0bffa17 	ldw	r2,-24(fp)
    8dbc:	10001016 	blt	r2,zero,8e00 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    8dc0:	e0bff817 	ldw	r2,-32(fp)
    8dc4:	10800317 	ldw	r2,12(r2)
    8dc8:	10000826 	beq	r2,zero,8dec <open+0x104>
    8dcc:	e0bff817 	ldw	r2,-32(fp)
    8dd0:	10800317 	ldw	r2,12(r2)
    8dd4:	e13ffc17 	ldw	r4,-16(fp)
    8dd8:	e17ffd17 	ldw	r5,-12(fp)
    8ddc:	e1bffe17 	ldw	r6,-8(fp)
    8de0:	e1ffff17 	ldw	r7,-4(fp)
    8de4:	103ee83a 	callr	r2
    8de8:	00000106 	br	8df0 <open+0x108>
    8dec:	0005883a 	mov	r2,zero
    8df0:	e0bffa15 	stw	r2,-24(fp)
    8df4:	00000206 	br	8e00 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    8df8:	00bffb44 	movi	r2,-19
    8dfc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    8e00:	e0bffa17 	ldw	r2,-24(fp)
    8e04:	1000080e 	bge	r2,zero,8e28 <open+0x140>
  {
    alt_release_fd (index);  
    8e08:	e13ff917 	ldw	r4,-28(fp)
    8e0c:	0008e400 	call	8e40 <alt_release_fd>
    ALT_ERRNO = -status;
    8e10:	0008ba80 	call	8ba8 <alt_get_errno>
    8e14:	e0fffa17 	ldw	r3,-24(fp)
    8e18:	00c7c83a 	sub	r3,zero,r3
    8e1c:	10c00015 	stw	r3,0(r2)
    return -1;
    8e20:	00bfffc4 	movi	r2,-1
    8e24:	00000106 	br	8e2c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    8e28:	e0bff917 	ldw	r2,-28(fp)
}
    8e2c:	e037883a 	mov	sp,fp
    8e30:	dfc00117 	ldw	ra,4(sp)
    8e34:	df000017 	ldw	fp,0(sp)
    8e38:	dec00204 	addi	sp,sp,8
    8e3c:	f800283a 	ret

00008e40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8e40:	defffc04 	addi	sp,sp,-16
    8e44:	dfc00315 	stw	ra,12(sp)
    8e48:	df000215 	stw	fp,8(sp)
    8e4c:	dc000115 	stw	r16,4(sp)
    8e50:	df000104 	addi	fp,sp,4
    8e54:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    8e58:	e0bfff17 	ldw	r2,-4(fp)
    8e5c:	108000d0 	cmplti	r2,r2,3
    8e60:	1000111e 	bne	r2,zero,8ea8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    8e64:	04000074 	movhi	r16,1
    8e68:	8425d404 	addi	r16,r16,-26800
    8e6c:	e0bfff17 	ldw	r2,-4(fp)
    8e70:	1009883a 	mov	r4,r2
    8e74:	01400304 	movi	r5,12
    8e78:	000812c0 	call	812c <__mulsi3>
    8e7c:	8085883a 	add	r2,r16,r2
    8e80:	10800204 	addi	r2,r2,8
    8e84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    8e88:	04000074 	movhi	r16,1
    8e8c:	8425d404 	addi	r16,r16,-26800
    8e90:	e0bfff17 	ldw	r2,-4(fp)
    8e94:	1009883a 	mov	r4,r2
    8e98:	01400304 	movi	r5,12
    8e9c:	000812c0 	call	812c <__mulsi3>
    8ea0:	8085883a 	add	r2,r16,r2
    8ea4:	10000015 	stw	zero,0(r2)
  }
}
    8ea8:	e037883a 	mov	sp,fp
    8eac:	dfc00217 	ldw	ra,8(sp)
    8eb0:	df000117 	ldw	fp,4(sp)
    8eb4:	dc000017 	ldw	r16,0(sp)
    8eb8:	dec00304 	addi	sp,sp,12
    8ebc:	f800283a 	ret

00008ec0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    8ec0:	deffff04 	addi	sp,sp,-4
    8ec4:	df000015 	stw	fp,0(sp)
    8ec8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8ecc:	000170fa 	wrctl	ienable,zero
}
    8ed0:	e037883a 	mov	sp,fp
    8ed4:	df000017 	ldw	fp,0(sp)
    8ed8:	dec00104 	addi	sp,sp,4
    8edc:	f800283a 	ret

00008ee0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    8ee0:	defffa04 	addi	sp,sp,-24
    8ee4:	dfc00515 	stw	ra,20(sp)
    8ee8:	df000415 	stw	fp,16(sp)
    8eec:	df000404 	addi	fp,sp,16
    8ef0:	e13ffe15 	stw	r4,-8(fp)
    8ef4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    8ef8:	e0bfff17 	ldw	r2,-4(fp)
    8efc:	10800017 	ldw	r2,0(r2)
    8f00:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    8f04:	e13ffe17 	ldw	r4,-8(fp)
    8f08:	00091d40 	call	91d4 <strlen>
    8f0c:	10800044 	addi	r2,r2,1
    8f10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8f14:	00000d06 	br	8f4c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    8f18:	e0bffc17 	ldw	r2,-16(fp)
    8f1c:	10c00217 	ldw	r3,8(r2)
    8f20:	e0bffd17 	ldw	r2,-12(fp)
    8f24:	1809883a 	mov	r4,r3
    8f28:	e17ffe17 	ldw	r5,-8(fp)
    8f2c:	100d883a 	mov	r6,r2
    8f30:	000918c0 	call	918c <memcmp>
    8f34:	1000021e 	bne	r2,zero,8f40 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    8f38:	e0bffc17 	ldw	r2,-16(fp)
    8f3c:	00000706 	br	8f5c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    8f40:	e0bffc17 	ldw	r2,-16(fp)
    8f44:	10800017 	ldw	r2,0(r2)
    8f48:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8f4c:	e0fffc17 	ldw	r3,-16(fp)
    8f50:	e0bfff17 	ldw	r2,-4(fp)
    8f54:	18bff01e 	bne	r3,r2,8f18 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    8f58:	0005883a 	mov	r2,zero
}
    8f5c:	e037883a 	mov	sp,fp
    8f60:	dfc00117 	ldw	ra,4(sp)
    8f64:	df000017 	ldw	fp,0(sp)
    8f68:	dec00204 	addi	sp,sp,8
    8f6c:	f800283a 	ret

00008f70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    8f70:	defffb04 	addi	sp,sp,-20
    8f74:	dfc00415 	stw	ra,16(sp)
    8f78:	df000315 	stw	fp,12(sp)
    8f7c:	df000304 	addi	fp,sp,12
    8f80:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    8f84:	00800074 	movhi	r2,1
    8f88:	10a66c04 	addi	r2,r2,-26192
    8f8c:	10800017 	ldw	r2,0(r2)
    8f90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8f94:	00003106 	br	905c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    8f98:	e0bffd17 	ldw	r2,-12(fp)
    8f9c:	10800217 	ldw	r2,8(r2)
    8fa0:	1009883a 	mov	r4,r2
    8fa4:	00091d40 	call	91d4 <strlen>
    8fa8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    8fac:	e0bffd17 	ldw	r2,-12(fp)
    8fb0:	10c00217 	ldw	r3,8(r2)
    8fb4:	e0bffe17 	ldw	r2,-8(fp)
    8fb8:	10bfffc4 	addi	r2,r2,-1
    8fbc:	1885883a 	add	r2,r3,r2
    8fc0:	10800003 	ldbu	r2,0(r2)
    8fc4:	10803fcc 	andi	r2,r2,255
    8fc8:	1080201c 	xori	r2,r2,128
    8fcc:	10bfe004 	addi	r2,r2,-128
    8fd0:	10800bd8 	cmpnei	r2,r2,47
    8fd4:	1000031e 	bne	r2,zero,8fe4 <alt_find_file+0x74>
    {
      len -= 1;
    8fd8:	e0bffe17 	ldw	r2,-8(fp)
    8fdc:	10bfffc4 	addi	r2,r2,-1
    8fe0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    8fe4:	e0bffe17 	ldw	r2,-8(fp)
    8fe8:	e0ffff17 	ldw	r3,-4(fp)
    8fec:	1885883a 	add	r2,r3,r2
    8ff0:	10800003 	ldbu	r2,0(r2)
    8ff4:	10803fcc 	andi	r2,r2,255
    8ff8:	1080201c 	xori	r2,r2,128
    8ffc:	10bfe004 	addi	r2,r2,-128
    9000:	10800be0 	cmpeqi	r2,r2,47
    9004:	1000081e 	bne	r2,zero,9028 <alt_find_file+0xb8>
    9008:	e0bffe17 	ldw	r2,-8(fp)
    900c:	e0ffff17 	ldw	r3,-4(fp)
    9010:	1885883a 	add	r2,r3,r2
    9014:	10800003 	ldbu	r2,0(r2)
    9018:	10803fcc 	andi	r2,r2,255
    901c:	1080201c 	xori	r2,r2,128
    9020:	10bfe004 	addi	r2,r2,-128
    9024:	10000a1e 	bne	r2,zero,9050 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9028:	e0bffd17 	ldw	r2,-12(fp)
    902c:	10c00217 	ldw	r3,8(r2)
    9030:	e0bffe17 	ldw	r2,-8(fp)
    9034:	1809883a 	mov	r4,r3
    9038:	e17fff17 	ldw	r5,-4(fp)
    903c:	100d883a 	mov	r6,r2
    9040:	000918c0 	call	918c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9044:	1000021e 	bne	r2,zero,9050 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9048:	e0bffd17 	ldw	r2,-12(fp)
    904c:	00000806 	br	9070 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9050:	e0bffd17 	ldw	r2,-12(fp)
    9054:	10800017 	ldw	r2,0(r2)
    9058:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    905c:	e0fffd17 	ldw	r3,-12(fp)
    9060:	00800074 	movhi	r2,1
    9064:	10a66c04 	addi	r2,r2,-26192
    9068:	18bfcb1e 	bne	r3,r2,8f98 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    906c:	0005883a 	mov	r2,zero
}
    9070:	e037883a 	mov	sp,fp
    9074:	dfc00117 	ldw	ra,4(sp)
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00204 	addi	sp,sp,8
    9080:	f800283a 	ret

00009084 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9084:	defffa04 	addi	sp,sp,-24
    9088:	dfc00515 	stw	ra,20(sp)
    908c:	df000415 	stw	fp,16(sp)
    9090:	dc000315 	stw	r16,12(sp)
    9094:	df000304 	addi	fp,sp,12
    9098:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    909c:	00bffa04 	movi	r2,-24
    90a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    90a4:	e03ffd15 	stw	zero,-12(fp)
    90a8:	00002106 	br	9130 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    90ac:	04000074 	movhi	r16,1
    90b0:	8425d404 	addi	r16,r16,-26800
    90b4:	e0bffd17 	ldw	r2,-12(fp)
    90b8:	1009883a 	mov	r4,r2
    90bc:	01400304 	movi	r5,12
    90c0:	000812c0 	call	812c <__mulsi3>
    90c4:	8085883a 	add	r2,r16,r2
    90c8:	10800017 	ldw	r2,0(r2)
    90cc:	1000151e 	bne	r2,zero,9124 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    90d0:	04000074 	movhi	r16,1
    90d4:	8425d404 	addi	r16,r16,-26800
    90d8:	e0bffd17 	ldw	r2,-12(fp)
    90dc:	1009883a 	mov	r4,r2
    90e0:	01400304 	movi	r5,12
    90e4:	000812c0 	call	812c <__mulsi3>
    90e8:	8085883a 	add	r2,r16,r2
    90ec:	e0ffff17 	ldw	r3,-4(fp)
    90f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    90f4:	00800074 	movhi	r2,1
    90f8:	10a67004 	addi	r2,r2,-26176
    90fc:	10c00017 	ldw	r3,0(r2)
    9100:	e0bffd17 	ldw	r2,-12(fp)
    9104:	1880040e 	bge	r3,r2,9118 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    9108:	00800074 	movhi	r2,1
    910c:	10a67004 	addi	r2,r2,-26176
    9110:	e0fffd17 	ldw	r3,-12(fp)
    9114:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    9118:	e0bffd17 	ldw	r2,-12(fp)
    911c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    9120:	00000606 	br	913c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9124:	e0bffd17 	ldw	r2,-12(fp)
    9128:	10800044 	addi	r2,r2,1
    912c:	e0bffd15 	stw	r2,-12(fp)
    9130:	e0bffd17 	ldw	r2,-12(fp)
    9134:	10800810 	cmplti	r2,r2,32
    9138:	103fdc1e 	bne	r2,zero,90ac <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    913c:	e0bffe17 	ldw	r2,-8(fp)
}
    9140:	e037883a 	mov	sp,fp
    9144:	dfc00217 	ldw	ra,8(sp)
    9148:	df000117 	ldw	fp,4(sp)
    914c:	dc000017 	ldw	r16,0(sp)
    9150:	dec00304 	addi	sp,sp,12
    9154:	f800283a 	ret

00009158 <atexit>:
    9158:	200b883a 	mov	r5,r4
    915c:	000d883a 	mov	r6,zero
    9160:	0009883a 	mov	r4,zero
    9164:	000f883a 	mov	r7,zero
    9168:	00091fc1 	jmpi	91fc <__register_exitproc>

0000916c <exit>:
    916c:	defffe04 	addi	sp,sp,-8
    9170:	000b883a 	mov	r5,zero
    9174:	dc000015 	stw	r16,0(sp)
    9178:	dfc00115 	stw	ra,4(sp)
    917c:	2021883a 	mov	r16,r4
    9180:	00093840 	call	9384 <__call_exitprocs>
    9184:	8009883a 	mov	r4,r16
    9188:	000968c0 	call	968c <_exit>

0000918c <memcmp>:
    918c:	30000d26 	beq	r6,zero,91c4 <memcmp+0x38>
    9190:	20c00003 	ldbu	r3,0(r4)
    9194:	28800003 	ldbu	r2,0(r5)
    9198:	18800c1e 	bne	r3,r2,91cc <memcmp+0x40>
    919c:	31bfff84 	addi	r6,r6,-2
    91a0:	01ffffc4 	movi	r7,-1
    91a4:	00000406 	br	91b8 <memcmp+0x2c>
    91a8:	20c00003 	ldbu	r3,0(r4)
    91ac:	28800003 	ldbu	r2,0(r5)
    91b0:	31bfffc4 	addi	r6,r6,-1
    91b4:	1880051e 	bne	r3,r2,91cc <memcmp+0x40>
    91b8:	21000044 	addi	r4,r4,1
    91bc:	29400044 	addi	r5,r5,1
    91c0:	31fff91e 	bne	r6,r7,91a8 <memcmp+0x1c>
    91c4:	0005883a 	mov	r2,zero
    91c8:	f800283a 	ret
    91cc:	1885c83a 	sub	r2,r3,r2
    91d0:	f800283a 	ret

000091d4 <strlen>:
    91d4:	20800007 	ldb	r2,0(r4)
    91d8:	10000626 	beq	r2,zero,91f4 <strlen+0x20>
    91dc:	2005883a 	mov	r2,r4
    91e0:	10800044 	addi	r2,r2,1
    91e4:	10c00007 	ldb	r3,0(r2)
    91e8:	183ffd1e 	bne	r3,zero,91e0 <strlen+0xc>
    91ec:	1105c83a 	sub	r2,r2,r4
    91f0:	f800283a 	ret
    91f4:	0005883a 	mov	r2,zero
    91f8:	f800283a 	ret

000091fc <__register_exitproc>:
    91fc:	defff904 	addi	sp,sp,-28
    9200:	00800074 	movhi	r2,1
    9204:	10a67204 	addi	r2,r2,-26168
    9208:	dc400415 	stw	r17,16(sp)
    920c:	14400017 	ldw	r17,0(r2)
    9210:	dc000315 	stw	r16,12(sp)
    9214:	dc800515 	stw	r18,20(sp)
    9218:	8c000c17 	ldw	r16,48(r17)
    921c:	dfc00615 	stw	ra,24(sp)
    9220:	2025883a 	mov	r18,r4
    9224:	80004226 	beq	r16,zero,9330 <__register_exitproc+0x134>
    9228:	80800117 	ldw	r2,4(r16)
    922c:	00c007c4 	movi	r3,31
    9230:	1880180e 	bge	r3,r2,9294 <__register_exitproc+0x98>
    9234:	00800034 	movhi	r2,0
    9238:	10800004 	addi	r2,r2,0
    923c:	1000071e 	bne	r2,zero,925c <__register_exitproc+0x60>
    9240:	00bfffc4 	movi	r2,-1
    9244:	dfc00617 	ldw	ra,24(sp)
    9248:	dc800517 	ldw	r18,20(sp)
    924c:	dc400417 	ldw	r17,16(sp)
    9250:	dc000317 	ldw	r16,12(sp)
    9254:	dec00704 	addi	sp,sp,28
    9258:	f800283a 	ret
    925c:	01002304 	movi	r4,140
    9260:	d9400015 	stw	r5,0(sp)
    9264:	d9800115 	stw	r6,4(sp)
    9268:	d9c00215 	stw	r7,8(sp)
    926c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9270:	1021883a 	mov	r16,r2
    9274:	d9400017 	ldw	r5,0(sp)
    9278:	d9800117 	ldw	r6,4(sp)
    927c:	d9c00217 	ldw	r7,8(sp)
    9280:	103fef26 	beq	r2,zero,9240 <__register_exitproc+0x44>
    9284:	88800c17 	ldw	r2,48(r17)
    9288:	80000115 	stw	zero,4(r16)
    928c:	80800015 	stw	r2,0(r16)
    9290:	8c000c15 	stw	r16,48(r17)
    9294:	90001726 	beq	r18,zero,92f4 <__register_exitproc+0xf8>
    9298:	80802217 	ldw	r2,136(r16)
    929c:	10002826 	beq	r2,zero,9340 <__register_exitproc+0x144>
    92a0:	12804017 	ldw	r10,256(r2)
    92a4:	80c00117 	ldw	r3,4(r16)
    92a8:	02400044 	movi	r9,1
    92ac:	48d2983a 	sll	r9,r9,r3
    92b0:	19000804 	addi	r4,r3,32
    92b4:	18d1883a 	add	r8,r3,r3
    92b8:	2109883a 	add	r4,r4,r4
    92bc:	4211883a 	add	r8,r8,r8
    92c0:	2109883a 	add	r4,r4,r4
    92c4:	1109883a 	add	r4,r2,r4
    92c8:	1211883a 	add	r8,r2,r8
    92cc:	5254b03a 	or	r10,r10,r9
    92d0:	21c00015 	stw	r7,0(r4)
    92d4:	41800015 	stw	r6,0(r8)
    92d8:	12804015 	stw	r10,256(r2)
    92dc:	01000084 	movi	r4,2
    92e0:	9100051e 	bne	r18,r4,92f8 <__register_exitproc+0xfc>
    92e4:	11004117 	ldw	r4,260(r2)
    92e8:	2252b03a 	or	r9,r4,r9
    92ec:	12404115 	stw	r9,260(r2)
    92f0:	00000106 	br	92f8 <__register_exitproc+0xfc>
    92f4:	80c00117 	ldw	r3,4(r16)
    92f8:	18800084 	addi	r2,r3,2
    92fc:	1085883a 	add	r2,r2,r2
    9300:	1085883a 	add	r2,r2,r2
    9304:	8085883a 	add	r2,r16,r2
    9308:	18c00044 	addi	r3,r3,1
    930c:	11400015 	stw	r5,0(r2)
    9310:	0005883a 	mov	r2,zero
    9314:	80c00115 	stw	r3,4(r16)
    9318:	dfc00617 	ldw	ra,24(sp)
    931c:	dc800517 	ldw	r18,20(sp)
    9320:	dc400417 	ldw	r17,16(sp)
    9324:	dc000317 	ldw	r16,12(sp)
    9328:	dec00704 	addi	sp,sp,28
    932c:	f800283a 	ret
    9330:	04000074 	movhi	r16,1
    9334:	84272d04 	addi	r16,r16,-25420
    9338:	8c000c15 	stw	r16,48(r17)
    933c:	003fba06 	br	9228 <__register_exitproc+0x2c>
    9340:	00800034 	movhi	r2,0
    9344:	10800004 	addi	r2,r2,0
    9348:	103fbd26 	beq	r2,zero,9240 <__register_exitproc+0x44>
    934c:	d9400015 	stw	r5,0(sp)
    9350:	d9800115 	stw	r6,4(sp)
    9354:	d9c00215 	stw	r7,8(sp)
    9358:	01004204 	movi	r4,264
    935c:	103ee83a 	callr	r2
    9360:	d9400017 	ldw	r5,0(sp)
    9364:	d9800117 	ldw	r6,4(sp)
    9368:	d9c00217 	ldw	r7,8(sp)
    936c:	103fb426 	beq	r2,zero,9240 <__register_exitproc+0x44>
    9370:	10004015 	stw	zero,256(r2)
    9374:	10004115 	stw	zero,260(r2)
    9378:	80802215 	stw	r2,136(r16)
    937c:	0015883a 	mov	r10,zero
    9380:	003fc806 	br	92a4 <__register_exitproc+0xa8>

00009384 <__call_exitprocs>:
    9384:	00800074 	movhi	r2,1
    9388:	10a67204 	addi	r2,r2,-26168
    938c:	10800017 	ldw	r2,0(r2)
    9390:	defff204 	addi	sp,sp,-56
    9394:	df000c15 	stw	fp,48(sp)
    9398:	d8800015 	stw	r2,0(sp)
    939c:	10800c04 	addi	r2,r2,48
    93a0:	dd400915 	stw	r21,36(sp)
    93a4:	dfc00d15 	stw	ra,52(sp)
    93a8:	ddc00b15 	stw	r23,44(sp)
    93ac:	dd800a15 	stw	r22,40(sp)
    93b0:	dd000815 	stw	r20,32(sp)
    93b4:	dcc00715 	stw	r19,28(sp)
    93b8:	dc800615 	stw	r18,24(sp)
    93bc:	dc400515 	stw	r17,20(sp)
    93c0:	dc000415 	stw	r16,16(sp)
    93c4:	d9000115 	stw	r4,4(sp)
    93c8:	2839883a 	mov	fp,r5
    93cc:	d8800215 	stw	r2,8(sp)
    93d0:	057fffc4 	movi	r21,-1
    93d4:	d8800017 	ldw	r2,0(sp)
    93d8:	dd800217 	ldw	r22,8(sp)
    93dc:	15c00c17 	ldw	r23,48(r2)
    93e0:	b8001b26 	beq	r23,zero,9450 <__call_exitprocs+0xcc>
    93e4:	b9000117 	ldw	r4,4(r23)
    93e8:	bd002217 	ldw	r20,136(r23)
    93ec:	243fffc4 	addi	r16,r4,-1
    93f0:	80001416 	blt	r16,zero,9444 <__call_exitprocs+0xc0>
    93f4:	244007c4 	addi	r17,r4,31
    93f8:	21000044 	addi	r4,r4,1
    93fc:	8c63883a 	add	r17,r17,r17
    9400:	8427883a 	add	r19,r16,r16
    9404:	2109883a 	add	r4,r4,r4
    9408:	8c63883a 	add	r17,r17,r17
    940c:	9ce7883a 	add	r19,r19,r19
    9410:	2109883a 	add	r4,r4,r4
    9414:	a463883a 	add	r17,r20,r17
    9418:	a4e7883a 	add	r19,r20,r19
    941c:	b925883a 	add	r18,r23,r4
    9420:	e0001726 	beq	fp,zero,9480 <__call_exitprocs+0xfc>
    9424:	a0000226 	beq	r20,zero,9430 <__call_exitprocs+0xac>
    9428:	89400017 	ldw	r5,0(r17)
    942c:	2f001426 	beq	r5,fp,9480 <__call_exitprocs+0xfc>
    9430:	843fffc4 	addi	r16,r16,-1
    9434:	8c7fff04 	addi	r17,r17,-4
    9438:	9cffff04 	addi	r19,r19,-4
    943c:	94bfff04 	addi	r18,r18,-4
    9440:	857ff71e 	bne	r16,r21,9420 <__call_exitprocs+0x9c>
    9444:	00800034 	movhi	r2,0
    9448:	10800004 	addi	r2,r2,0
    944c:	1000311e 	bne	r2,zero,9514 <__call_exitprocs+0x190>
    9450:	dfc00d17 	ldw	ra,52(sp)
    9454:	df000c17 	ldw	fp,48(sp)
    9458:	ddc00b17 	ldw	r23,44(sp)
    945c:	dd800a17 	ldw	r22,40(sp)
    9460:	dd400917 	ldw	r21,36(sp)
    9464:	dd000817 	ldw	r20,32(sp)
    9468:	dcc00717 	ldw	r19,28(sp)
    946c:	dc800617 	ldw	r18,24(sp)
    9470:	dc400517 	ldw	r17,20(sp)
    9474:	dc000417 	ldw	r16,16(sp)
    9478:	dec00e04 	addi	sp,sp,56
    947c:	f800283a 	ret
    9480:	b9000117 	ldw	r4,4(r23)
    9484:	92000017 	ldw	r8,0(r18)
    9488:	213fffc4 	addi	r4,r4,-1
    948c:	24001a26 	beq	r4,r16,94f8 <__call_exitprocs+0x174>
    9490:	90000015 	stw	zero,0(r18)
    9494:	403fe626 	beq	r8,zero,9430 <__call_exitprocs+0xac>
    9498:	ba400117 	ldw	r9,4(r23)
    949c:	a0001226 	beq	r20,zero,94e8 <__call_exitprocs+0x164>
    94a0:	00800044 	movi	r2,1
    94a4:	1408983a 	sll	r4,r2,r16
    94a8:	a1404017 	ldw	r5,256(r20)
    94ac:	214a703a 	and	r5,r4,r5
    94b0:	28000d26 	beq	r5,zero,94e8 <__call_exitprocs+0x164>
    94b4:	a1404117 	ldw	r5,260(r20)
    94b8:	2148703a 	and	r4,r4,r5
    94bc:	2000101e 	bne	r4,zero,9500 <__call_exitprocs+0x17c>
    94c0:	99400017 	ldw	r5,0(r19)
    94c4:	d9000117 	ldw	r4,4(sp)
    94c8:	da400315 	stw	r9,12(sp)
    94cc:	403ee83a 	callr	r8
    94d0:	da400317 	ldw	r9,12(sp)
    94d4:	b9000117 	ldw	r4,4(r23)
    94d8:	227fbe1e 	bne	r4,r9,93d4 <__call_exitprocs+0x50>
    94dc:	b1000017 	ldw	r4,0(r22)
    94e0:	25ffd326 	beq	r4,r23,9430 <__call_exitprocs+0xac>
    94e4:	003fbb06 	br	93d4 <__call_exitprocs+0x50>
    94e8:	da400315 	stw	r9,12(sp)
    94ec:	403ee83a 	callr	r8
    94f0:	da400317 	ldw	r9,12(sp)
    94f4:	003ff706 	br	94d4 <__call_exitprocs+0x150>
    94f8:	bc000115 	stw	r16,4(r23)
    94fc:	003fe506 	br	9494 <__call_exitprocs+0x110>
    9500:	99000017 	ldw	r4,0(r19)
    9504:	da400315 	stw	r9,12(sp)
    9508:	403ee83a 	callr	r8
    950c:	da400317 	ldw	r9,12(sp)
    9510:	003ff006 	br	94d4 <__call_exitprocs+0x150>
    9514:	b9000117 	ldw	r4,4(r23)
    9518:	20000e1e 	bne	r4,zero,9554 <__call_exitprocs+0x1d0>
    951c:	b9000017 	ldw	r4,0(r23)
    9520:	20000826 	beq	r4,zero,9544 <__call_exitprocs+0x1c0>
    9524:	b1000015 	stw	r4,0(r22)
    9528:	a0000226 	beq	r20,zero,9534 <__call_exitprocs+0x1b0>
    952c:	a009883a 	mov	r4,r20
    9530:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9534:	b809883a 	mov	r4,r23
    9538:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    953c:	b5c00017 	ldw	r23,0(r22)
    9540:	003fa706 	br	93e0 <__call_exitprocs+0x5c>
    9544:	0007883a 	mov	r3,zero
    9548:	b82d883a 	mov	r22,r23
    954c:	182f883a 	mov	r23,r3
    9550:	003fa306 	br	93e0 <__call_exitprocs+0x5c>
    9554:	b8c00017 	ldw	r3,0(r23)
    9558:	003ffb06 	br	9548 <__call_exitprocs+0x1c4>

0000955c <udivmodsi4>:
    955c:	2005883a 	mov	r2,r4
    9560:	2900182e 	bgeu	r5,r4,95c4 <udivmodsi4+0x68>
    9564:	28001716 	blt	r5,zero,95c4 <udivmodsi4+0x68>
    9568:	01000804 	movi	r4,32
    956c:	00c00044 	movi	r3,1
    9570:	00000206 	br	957c <udivmodsi4+0x20>
    9574:	20001126 	beq	r4,zero,95bc <udivmodsi4+0x60>
    9578:	28000516 	blt	r5,zero,9590 <udivmodsi4+0x34>
    957c:	294b883a 	add	r5,r5,r5
    9580:	213fffc4 	addi	r4,r4,-1
    9584:	18c7883a 	add	r3,r3,r3
    9588:	28bffa36 	bltu	r5,r2,9574 <udivmodsi4+0x18>
    958c:	18000b26 	beq	r3,zero,95bc <udivmodsi4+0x60>
    9590:	0009883a 	mov	r4,zero
    9594:	11400236 	bltu	r2,r5,95a0 <udivmodsi4+0x44>
    9598:	1145c83a 	sub	r2,r2,r5
    959c:	20c8b03a 	or	r4,r4,r3
    95a0:	1806d07a 	srli	r3,r3,1
    95a4:	280ad07a 	srli	r5,r5,1
    95a8:	183ffa1e 	bne	r3,zero,9594 <udivmodsi4+0x38>
    95ac:	3000021e 	bne	r6,zero,95b8 <udivmodsi4+0x5c>
    95b0:	2005883a 	mov	r2,r4
    95b4:	f800283a 	ret
    95b8:	f800283a 	ret
    95bc:	0009883a 	mov	r4,zero
    95c0:	003ffa06 	br	95ac <udivmodsi4+0x50>
    95c4:	00c00044 	movi	r3,1
    95c8:	0009883a 	mov	r4,zero
    95cc:	003ff106 	br	9594 <udivmodsi4+0x38>

000095d0 <__divsi3>:
    95d0:	defffe04 	addi	sp,sp,-8
    95d4:	dfc00115 	stw	ra,4(sp)
    95d8:	dc000015 	stw	r16,0(sp)
    95dc:	20000a16 	blt	r4,zero,9608 <__divsi3+0x38>
    95e0:	0021883a 	mov	r16,zero
    95e4:	28000b16 	blt	r5,zero,9614 <__divsi3+0x44>
    95e8:	000d883a 	mov	r6,zero
    95ec:	000955c0 	call	955c <udivmodsi4>
    95f0:	80000126 	beq	r16,zero,95f8 <__divsi3+0x28>
    95f4:	0085c83a 	sub	r2,zero,r2
    95f8:	dfc00117 	ldw	ra,4(sp)
    95fc:	dc000017 	ldw	r16,0(sp)
    9600:	dec00204 	addi	sp,sp,8
    9604:	f800283a 	ret
    9608:	0109c83a 	sub	r4,zero,r4
    960c:	04000044 	movi	r16,1
    9610:	283ff50e 	bge	r5,zero,95e8 <__divsi3+0x18>
    9614:	014bc83a 	sub	r5,zero,r5
    9618:	8400005c 	xori	r16,r16,1
    961c:	003ff206 	br	95e8 <__divsi3+0x18>

00009620 <__modsi3>:
    9620:	deffff04 	addi	sp,sp,-4
    9624:	dfc00015 	stw	ra,0(sp)
    9628:	20000516 	blt	r4,zero,9640 <__modsi3+0x20>
    962c:	28000c16 	blt	r5,zero,9660 <__modsi3+0x40>
    9630:	01800044 	movi	r6,1
    9634:	dfc00017 	ldw	ra,0(sp)
    9638:	dec00104 	addi	sp,sp,4
    963c:	000955c1 	jmpi	955c <udivmodsi4>
    9640:	0109c83a 	sub	r4,zero,r4
    9644:	28000b16 	blt	r5,zero,9674 <__modsi3+0x54>
    9648:	01800044 	movi	r6,1
    964c:	000955c0 	call	955c <udivmodsi4>
    9650:	0085c83a 	sub	r2,zero,r2
    9654:	dfc00017 	ldw	ra,0(sp)
    9658:	dec00104 	addi	sp,sp,4
    965c:	f800283a 	ret
    9660:	014bc83a 	sub	r5,zero,r5
    9664:	01800044 	movi	r6,1
    9668:	dfc00017 	ldw	ra,0(sp)
    966c:	dec00104 	addi	sp,sp,4
    9670:	000955c1 	jmpi	955c <udivmodsi4>
    9674:	014bc83a 	sub	r5,zero,r5
    9678:	003ff306 	br	9648 <__modsi3+0x28>

0000967c <__udivsi3>:
    967c:	000d883a 	mov	r6,zero
    9680:	000955c1 	jmpi	955c <udivmodsi4>

00009684 <__umodsi3>:
    9684:	01800044 	movi	r6,1
    9688:	000955c1 	jmpi	955c <udivmodsi4>

0000968c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    968c:	defffc04 	addi	sp,sp,-16
    9690:	df000315 	stw	fp,12(sp)
    9694:	df000304 	addi	fp,sp,12
    9698:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    969c:	0001883a 	nop
    96a0:	e0bfff17 	ldw	r2,-4(fp)
    96a4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    96a8:	e0bffd17 	ldw	r2,-12(fp)
    96ac:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    96b0:	e0bffe17 	ldw	r2,-8(fp)
    96b4:	10000226 	beq	r2,zero,96c0 <_exit+0x34>
    ALT_SIM_FAIL();
    96b8:	002af070 	cmpltui	zero,zero,43969
    96bc:	00000106 	br	96c4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    96c0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    96c4:	003fff06 	br	96c4 <_exit+0x38>
