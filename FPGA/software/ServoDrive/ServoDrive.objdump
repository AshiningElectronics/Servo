
ServoDrive.elf:     file format elf32-littlenios2
ServoDrive.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00003344 memsz 0x00003344 flags r-x
    LOAD off    0x00004364 vaddr 0x0000b364 paddr 0x0000b65c align 2**12
         filesz 0x000002f8 memsz 0x000002f8 flags rw-
    LOAD off    0x00004954 vaddr 0x0000b954 paddr 0x0000b954 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000031ec  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0000b20c  0000b20c  0000420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002f8  0000b364  0000b65c  00004364  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000b954  0000b954  00004954  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  0000465c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000738  00000000  00000000  00004680  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008c43  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b93  00000000  00000000  0000d9fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000304f  00000000  00000000  0001158e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a10  00000000  00000000  000145e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000015ed  00000000  00000000  00014ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ac3  00000000  00000000  000165dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  000190a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000260  00000000  00000000  000190e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0001ae95  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  0001ae98  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0001aea4  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0001aea5  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0001aea6  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0001aeaa  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0001aeae  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0001aeb2  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0001aebd  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0001aec8  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000007  00000000  00000000  0001aed3  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000015  00000000  00000000  0001aeda  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003c20f  00000000  00000000  0001aeef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000b20c l    d  .rodata	00000000 .rodata
0000b364 l    d  .rwdata	00000000 .rwdata
0000b954 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ServoDrive_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Servo.c
0000b618 l     O .rwdata	00000004 tFallFET
0000b61c l     O .rwdata	00000004 tFallDriver
0000b620 l     O .rwdata	00000004 tDelayMatchDriver
0000b624 l     O .rwdata	00000004 tSafety
0000b628 l     O .rwdata	00000004 deadtime_ns
0000b62c l     O .rwdata	00000004 deadtimeint
0000b630 l     O .rwdata	00000004 PWMHalfPeriod
0000b634 l     O .rwdata	00000004 one_by_sqrt3.2176
0000b638 l     O .rwdata	00000004 two_by_sqrt3.2177
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000089e8 l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00009c98 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009e2c l     F .text	00000038 alt_dev_reg
0000b364 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a26c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a3a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000a3d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a594 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000a6ec l     F .text	00000050 alt_get_errno
0000a73c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
0000b538 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000b0a0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00009d84 g     F .text	00000078 alt_main
00009c54 g     F .text	00000044 __ashldi3
0000b65c g       *ABS*	00000000 __flash_rwdata_start
0000805c g     F .text	0000078c SVM
00008f6c g     F .text	000000a4 __fixsfsi
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b960 g     O .bss	00000004 errno
00009894 g     F .text	0000002c __make_fp
0000b958 g     O .bss	00000004 alt_argv
00013618 g       *ABS*	00000000 _gp
00009dfc g     F .text	00000030 usleep
00008c28 g     F .text	00000058 __subsf3
0000b3b8 g     O .rwdata	00000180 alt_fd_list
0000aa24 g     F .text	00000090 alt_find_dev
000092f4 g     F .text	000000d4 __floatsidf
0000a674 g     F .text	00000078 alt_io_redirect
0000b20c g       *ABS*	00000000 __DTOR_END__
00009f8c g     F .text	000000f4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b1c0 g     F .text	00000008 __udivsi3
0000b64c g     O .rwdata	00000004 alt_max_fd
00009ae4 g     F .text	00000104 __unpack_d
0000b654 g     O .rwdata	00000004 _global_impure_ptr
0000b9f0 g       *ABS*	00000000 __bss_end
0000b390 g     O .rwdata	00000028 alt_dev_null
00009710 g     F .text	000000c8 __unpack_f
0000a388 g     F .text	0000001c alt_dcache_flush_all
0000b65c g       *ABS*	00000000 __ram_rwdata_end
0000b644 g     O .rwdata	00000008 alt_dev_list
00008e10 g     F .text	0000005c __gtsf2
0000b364 g       *ABS*	00000000 __ram_rodata_end
00009c10 g     F .text	00000044 __lshrdi3
0000b1c8 g     F .text	00000008 __umodsi3
0000b9f0 g       *ABS*	00000000 end
000095e4 g     F .text	0000012c __pack_f
0000b20c g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009538 g     F .text	000000ac __clzsi2
0000a080 g     F .text	00000098 altera_avalon_jtag_uart_write
0000aec8 g     F .text	000001d8 __call_exitprocs
00008020 g     F .text	0000003c _start
00009e98 g     F .text	00000034 alt_sys_init
00008ec8 g     F .text	000000a4 __floatsisf
0000ad40 g     F .text	00000188 __register_exitproc
00009be8 g     F .text	00000028 __mulsi3
0000b364 g       *ABS*	00000000 __ram_rwdata_start
0000b20c g       *ABS*	00000000 __ram_rodata_start
00009ecc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000abc8 g     F .text	000000d4 alt_get_fd
0000a118 g     F .text	00000154 alt_busy_sleep
0000acd0 g     F .text	00000048 memcmp
0000b9f0 g       *ABS*	00000000 __alt_stack_base
00009010 g     F .text	000002e4 __muldf3
0000b20c g     O .rodata	00000010 __thenan_sf
0000aab4 g     F .text	00000114 alt_find_file
0000a420 g     F .text	000000a0 alt_dev_llist_insert
0000b954 g       *ABS*	00000000 __bss_start
000087e8 g     F .text	00000190 main
0000b95c g     O .bss	00000004 alt_envp
00009f2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000093c8 g     F .text	00000060 __truncdfsf2
0000b964 g     O .bss	0000008c _atexit0
0000b650 g     O .rwdata	00000004 alt_errno
0000b114 g     F .text	00000050 __divsi3
0000b21c g     O .rodata	00000014 __thenan_df
0000b20c g       *ABS*	00000000 __CTOR_END__
00008c80 g     F .text	00000190 __mulsf3
0000b20c g       *ABS*	00000000 __flash_rodata_start
0000b20c g       *ABS*	00000000 __DTOR_LIST__
00009e64 g     F .text	00000034 alt_irq_init
0000a984 g     F .text	00000080 alt_release_fd
0000b230 g     O .rodata	00000100 __clz_tab
0000ac9c g     F .text	00000014 atexit
00008e6c g     F .text	0000005c __gesf2
0000b658 g     O .rwdata	00000004 _impure_ptr
0000b954 g     O .bss	00000004 alt_argc
0000a51c g     F .text	0000005c _do_dtors
0000b63c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b65c g       *ABS*	00000000 _edata
0000b9f0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000aa04 g     F .text	00000020 altera_nios2_qsys_irq_init
0000acb0 g     F .text	00000020 exit
0000b164 g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008978 g     F .text	00000070 __fixunssfsi
000097d8 g     F .text	000000bc __fpcmp_parts_f
0000b1d0 g     F .text	0000003c _exit
00009428 g     F .text	00000110 __muldi3
0000ad18 g     F .text	00000028 strlen
0000a82c g     F .text	00000158 open
0000a578 g     F .text	0000001c alt_icache_flush_all
0000a4c0 g     F .text	0000005c _do_ctors
0000a2bc g     F .text	000000cc close
00008bdc g     F .text	0000004c __addsf3
00009d04 g     F .text	00000080 alt_load
000098c0 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68d8614 	ori	gp,gp,13848
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10ae5514 	ori	r2,r2,47444

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ee7c14 	ori	r3,r3,47600

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0009d040 	call	9d04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0009d840 	call	9d84 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <SVM>:
static const int deadtimeint = 10;//50000000.0f * deadtime_ns * 1e-9f;

static const int PWMHalfPeriod = 50000000/16000;

// Magnitude must not be larger than sqrt(3)/2, or 0.866
void SVM(float alpha, float beta, uint32_t* tAout, uint32_t* tBout, uint32_t* tCout){
    805c:	deffe904 	addi	sp,sp,-92
    8060:	dfc01615 	stw	ra,88(sp)
    8064:	df001515 	stw	fp,84(sp)
    8068:	dc001415 	stw	r16,80(sp)
    806c:	df001404 	addi	fp,sp,80
    8070:	e13ffc15 	stw	r4,-16(fp)
    8074:	e17ffd15 	stw	r5,-12(fp)
    8078:	e1bffe15 	stw	r6,-8(fp)
    807c:	e1ffff15 	stw	r7,-4(fp)
	static const float one_by_sqrt3 = 0.57735026919f;
	static const float two_by_sqrt3 = 1.15470053838f;

	uint32_t Sextant;

	if (beta >= 0.0f)
    8080:	e13ffd17 	ldw	r4,-12(fp)
    8084:	000b883a 	mov	r5,zero
    8088:	0008e6c0 	call	8e6c <__gesf2>
    808c:	10002516 	blt	r2,zero,8124 <SVM+0xc8>
	{
		if (alpha >= 0.0f)
    8090:	e13ffc17 	ldw	r4,-16(fp)
    8094:	000b883a 	mov	r5,zero
    8098:	0008e6c0 	call	8e6c <__gesf2>
    809c:	10001016 	blt	r2,zero,80e0 <SVM+0x84>
		{
			//quadrant I
			if (one_by_sqrt3 * beta > alpha)
    80a0:	d0a00717 	ldw	r2,-32740(gp)
    80a4:	1009883a 	mov	r4,r2
    80a8:	e17ffd17 	ldw	r5,-12(fp)
    80ac:	0008c800 	call	8c80 <__mulsf3>
    80b0:	1007883a 	mov	r3,r2
    80b4:	1805883a 	mov	r2,r3
    80b8:	1009883a 	mov	r4,r2
    80bc:	e17ffc17 	ldw	r5,-16(fp)
    80c0:	0008e100 	call	8e10 <__gtsf2>
    80c4:	0080030e 	bge	zero,r2,80d4 <SVM+0x78>
				Sextant = 2;
    80c8:	00800084 	movi	r2,2
    80cc:	e0bfec15 	stw	r2,-80(fp)
    80d0:	00003806 	br	81b4 <SVM+0x158>
			else
				Sextant = 1;
    80d4:	00800044 	movi	r2,1
    80d8:	e0bfec15 	stw	r2,-80(fp)
    80dc:	00003506 	br	81b4 <SVM+0x158>

		} else {
			//quadrant II
			if (-one_by_sqrt3 * beta > alpha)
    80e0:	d0a00717 	ldw	r2,-32740(gp)
    80e4:	10a0003c 	xorhi	r2,r2,32768
    80e8:	1009883a 	mov	r4,r2
    80ec:	e17ffd17 	ldw	r5,-12(fp)
    80f0:	0008c800 	call	8c80 <__mulsf3>
    80f4:	1007883a 	mov	r3,r2
    80f8:	1805883a 	mov	r2,r3
    80fc:	1009883a 	mov	r4,r2
    8100:	e17ffc17 	ldw	r5,-16(fp)
    8104:	0008e100 	call	8e10 <__gtsf2>
    8108:	0080030e 	bge	zero,r2,8118 <SVM+0xbc>
				Sextant = 3;
    810c:	008000c4 	movi	r2,3
    8110:	e0bfec15 	stw	r2,-80(fp)
    8114:	00002706 	br	81b4 <SVM+0x158>
			else
				Sextant = 2;
    8118:	00800084 	movi	r2,2
    811c:	e0bfec15 	stw	r2,-80(fp)
    8120:	00002406 	br	81b4 <SVM+0x158>
		}
	} else {
		if (alpha >= 0.0f)
    8124:	e13ffc17 	ldw	r4,-16(fp)
    8128:	000b883a 	mov	r5,zero
    812c:	0008e6c0 	call	8e6c <__gesf2>
    8130:	10001116 	blt	r2,zero,8178 <SVM+0x11c>
		{
			//quadrant IV
			if (-one_by_sqrt3 * beta > alpha)
    8134:	d0a00717 	ldw	r2,-32740(gp)
    8138:	10a0003c 	xorhi	r2,r2,32768
    813c:	1009883a 	mov	r4,r2
    8140:	e17ffd17 	ldw	r5,-12(fp)
    8144:	0008c800 	call	8c80 <__mulsf3>
    8148:	1007883a 	mov	r3,r2
    814c:	1805883a 	mov	r2,r3
    8150:	1009883a 	mov	r4,r2
    8154:	e17ffc17 	ldw	r5,-16(fp)
    8158:	0008e100 	call	8e10 <__gtsf2>
    815c:	0080030e 	bge	zero,r2,816c <SVM+0x110>
				Sextant = 5;
    8160:	00800144 	movi	r2,5
    8164:	e0bfec15 	stw	r2,-80(fp)
    8168:	00001206 	br	81b4 <SVM+0x158>
			else
				Sextant = 6;
    816c:	00800184 	movi	r2,6
    8170:	e0bfec15 	stw	r2,-80(fp)
    8174:	00000f06 	br	81b4 <SVM+0x158>
		} else {
			//quadrant III
			if (one_by_sqrt3 * beta > alpha)
    8178:	d0a00717 	ldw	r2,-32740(gp)
    817c:	1009883a 	mov	r4,r2
    8180:	e17ffd17 	ldw	r5,-12(fp)
    8184:	0008c800 	call	8c80 <__mulsf3>
    8188:	1007883a 	mov	r3,r2
    818c:	1805883a 	mov	r2,r3
    8190:	1009883a 	mov	r4,r2
    8194:	e17ffc17 	ldw	r5,-16(fp)
    8198:	0008e100 	call	8e10 <__gtsf2>
    819c:	0080030e 	bge	zero,r2,81ac <SVM+0x150>
				Sextant = 4;
    81a0:	00800104 	movi	r2,4
    81a4:	e0bfec15 	stw	r2,-80(fp)
    81a8:	00000206 	br	81b4 <SVM+0x158>
			else
				Sextant = 5;
    81ac:	00800144 	movi	r2,5
    81b0:	e0bfec15 	stw	r2,-80(fp)
	}

	// PWM timings
	uint32_t tA, tB, tC;

	switch (Sextant) {
    81b4:	e0bfec17 	ldw	r2,-80(fp)
    81b8:	108001e8 	cmpgeui	r2,r2,7
    81bc:	10017b1e 	bne	r2,zero,87ac <SVM+0x750>
    81c0:	e0bfec17 	ldw	r2,-80(fp)
    81c4:	1085883a 	add	r2,r2,r2
    81c8:	1087883a 	add	r3,r2,r2
    81cc:	00800074 	movhi	r2,1
    81d0:	10a07804 	addi	r2,r2,-32288
    81d4:	1885883a 	add	r2,r3,r2
    81d8:	10800017 	ldw	r2,0(r2)
    81dc:	1000683a 	jmp	r2
    81e0:	000087ac 	andhi	zero,zero,542
    81e4:	000081fc 	xorhi	zero,zero,519
    81e8:	000082e4 	muli	zero,zero,523
    81ec:	000083e0 	cmpeqi	zero,zero,527
    81f0:	000084d0 	cmplti	zero,zero,531
    81f4:	000085bc 	xorhi	zero,zero,534
    81f8:	000086c0 	call	86c <__alt_mem_onchip_memory2_0-0x7794>

		// sextant 1-2
		case 1:
		{
			// Vector on-times
			uint32_t t1 = (alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
    81fc:	d0a00717 	ldw	r2,-32740(gp)
    8200:	1009883a 	mov	r4,r2
    8204:	e17ffd17 	ldw	r5,-12(fp)
    8208:	0008c800 	call	8c80 <__mulsf3>
    820c:	1007883a 	mov	r3,r2
    8210:	1805883a 	mov	r2,r3
    8214:	e13ffc17 	ldw	r4,-16(fp)
    8218:	100b883a 	mov	r5,r2
    821c:	0008c280 	call	8c28 <__subsf3>
    8220:	1007883a 	mov	r3,r2
    8224:	1821883a 	mov	r16,r3
    8228:	d0a00617 	ldw	r2,-32744(gp)
    822c:	1009883a 	mov	r4,r2
    8230:	0008ec80 	call	8ec8 <__floatsisf>
    8234:	1007883a 	mov	r3,r2
    8238:	8009883a 	mov	r4,r16
    823c:	180b883a 	mov	r5,r3
    8240:	0008c800 	call	8c80 <__mulsf3>
    8244:	1007883a 	mov	r3,r2
    8248:	1805883a 	mov	r2,r3
    824c:	1009883a 	mov	r4,r2
    8250:	00089780 	call	8978 <__fixunssfsi>
    8254:	e0bff015 	stw	r2,-64(fp)
			uint32_t t2 = (two_by_sqrt3 * beta) * PWMHalfPeriod;
    8258:	d0a00817 	ldw	r2,-32736(gp)
    825c:	1009883a 	mov	r4,r2
    8260:	e17ffd17 	ldw	r5,-12(fp)
    8264:	0008c800 	call	8c80 <__mulsf3>
    8268:	1007883a 	mov	r3,r2
    826c:	1821883a 	mov	r16,r3
    8270:	d0a00617 	ldw	r2,-32744(gp)
    8274:	1009883a 	mov	r4,r2
    8278:	0008ec80 	call	8ec8 <__floatsisf>
    827c:	1007883a 	mov	r3,r2
    8280:	8009883a 	mov	r4,r16
    8284:	180b883a 	mov	r5,r3
    8288:	0008c800 	call	8c80 <__mulsf3>
    828c:	1007883a 	mov	r3,r2
    8290:	1805883a 	mov	r2,r3
    8294:	1009883a 	mov	r4,r2
    8298:	00089780 	call	8978 <__fixunssfsi>
    829c:	e0bff115 	stw	r2,-60(fp)

			// PWM timings
			tA = (PWMHalfPeriod - t1 - t2) / 2;
    82a0:	d0a00617 	ldw	r2,-32744(gp)
    82a4:	1007883a 	mov	r3,r2
    82a8:	e0bff017 	ldw	r2,-64(fp)
    82ac:	1887c83a 	sub	r3,r3,r2
    82b0:	e0bff117 	ldw	r2,-60(fp)
    82b4:	1885c83a 	sub	r2,r3,r2
    82b8:	1004d07a 	srli	r2,r2,1
    82bc:	e0bfed15 	stw	r2,-76(fp)
			tB = tA + t1;
    82c0:	e0ffed17 	ldw	r3,-76(fp)
    82c4:	e0bff017 	ldw	r2,-64(fp)
    82c8:	1885883a 	add	r2,r3,r2
    82cc:	e0bfee15 	stw	r2,-72(fp)
			tC = tB + t2;
    82d0:	e0ffee17 	ldw	r3,-72(fp)
    82d4:	e0bff117 	ldw	r2,-60(fp)
    82d8:	1885883a 	add	r2,r3,r2
    82dc:	e0bfef15 	stw	r2,-68(fp)

			break;
    82e0:	00013206 	br	87ac <SVM+0x750>

		// sextant 2-3
		case 2:
		{
			// Vector on-times
			uint32_t t2 = (alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
    82e4:	d0a00717 	ldw	r2,-32740(gp)
    82e8:	1009883a 	mov	r4,r2
    82ec:	e17ffd17 	ldw	r5,-12(fp)
    82f0:	0008c800 	call	8c80 <__mulsf3>
    82f4:	1007883a 	mov	r3,r2
    82f8:	1805883a 	mov	r2,r3
    82fc:	1009883a 	mov	r4,r2
    8300:	e17ffc17 	ldw	r5,-16(fp)
    8304:	0008bdc0 	call	8bdc <__addsf3>
    8308:	1007883a 	mov	r3,r2
    830c:	1821883a 	mov	r16,r3
    8310:	d0a00617 	ldw	r2,-32744(gp)
    8314:	1009883a 	mov	r4,r2
    8318:	0008ec80 	call	8ec8 <__floatsisf>
    831c:	1007883a 	mov	r3,r2
    8320:	8009883a 	mov	r4,r16
    8324:	180b883a 	mov	r5,r3
    8328:	0008c800 	call	8c80 <__mulsf3>
    832c:	1007883a 	mov	r3,r2
    8330:	1805883a 	mov	r2,r3
    8334:	1009883a 	mov	r4,r2
    8338:	00089780 	call	8978 <__fixunssfsi>
    833c:	e0bff215 	stw	r2,-56(fp)
			uint32_t t3 = (-alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
    8340:	d0a00717 	ldw	r2,-32740(gp)
    8344:	1009883a 	mov	r4,r2
    8348:	e17ffd17 	ldw	r5,-12(fp)
    834c:	0008c800 	call	8c80 <__mulsf3>
    8350:	1007883a 	mov	r3,r2
    8354:	1805883a 	mov	r2,r3
    8358:	1009883a 	mov	r4,r2
    835c:	e17ffc17 	ldw	r5,-16(fp)
    8360:	0008c280 	call	8c28 <__subsf3>
    8364:	1007883a 	mov	r3,r2
    8368:	1821883a 	mov	r16,r3
    836c:	d0a00617 	ldw	r2,-32744(gp)
    8370:	1009883a 	mov	r4,r2
    8374:	0008ec80 	call	8ec8 <__floatsisf>
    8378:	1007883a 	mov	r3,r2
    837c:	8009883a 	mov	r4,r16
    8380:	180b883a 	mov	r5,r3
    8384:	0008c800 	call	8c80 <__mulsf3>
    8388:	1007883a 	mov	r3,r2
    838c:	1805883a 	mov	r2,r3
    8390:	1009883a 	mov	r4,r2
    8394:	00089780 	call	8978 <__fixunssfsi>
    8398:	e0bff315 	stw	r2,-52(fp)

			// PWM timings
			tB = (PWMHalfPeriod - t2 - t3) / 2;
    839c:	d0a00617 	ldw	r2,-32744(gp)
    83a0:	1007883a 	mov	r3,r2
    83a4:	e0bff217 	ldw	r2,-56(fp)
    83a8:	1887c83a 	sub	r3,r3,r2
    83ac:	e0bff317 	ldw	r2,-52(fp)
    83b0:	1885c83a 	sub	r2,r3,r2
    83b4:	1004d07a 	srli	r2,r2,1
    83b8:	e0bfee15 	stw	r2,-72(fp)
			tA = tB + t3;
    83bc:	e0ffee17 	ldw	r3,-72(fp)
    83c0:	e0bff317 	ldw	r2,-52(fp)
    83c4:	1885883a 	add	r2,r3,r2
    83c8:	e0bfed15 	stw	r2,-76(fp)
			tC = tA + t2;
    83cc:	e0ffed17 	ldw	r3,-76(fp)
    83d0:	e0bff217 	ldw	r2,-56(fp)
    83d4:	1885883a 	add	r2,r3,r2
    83d8:	e0bfef15 	stw	r2,-68(fp)

			break;
    83dc:	0000f306 	br	87ac <SVM+0x750>

		// sextant 3-4
		case 3:
		{
			// Vector on-times
			uint32_t t3 = (two_by_sqrt3 * beta) * PWMHalfPeriod;
    83e0:	d0a00817 	ldw	r2,-32736(gp)
    83e4:	1009883a 	mov	r4,r2
    83e8:	e17ffd17 	ldw	r5,-12(fp)
    83ec:	0008c800 	call	8c80 <__mulsf3>
    83f0:	1007883a 	mov	r3,r2
    83f4:	1821883a 	mov	r16,r3
    83f8:	d0a00617 	ldw	r2,-32744(gp)
    83fc:	1009883a 	mov	r4,r2
    8400:	0008ec80 	call	8ec8 <__floatsisf>
    8404:	1007883a 	mov	r3,r2
    8408:	8009883a 	mov	r4,r16
    840c:	180b883a 	mov	r5,r3
    8410:	0008c800 	call	8c80 <__mulsf3>
    8414:	1007883a 	mov	r3,r2
    8418:	1805883a 	mov	r2,r3
    841c:	1009883a 	mov	r4,r2
    8420:	00089780 	call	8978 <__fixunssfsi>
    8424:	e0bff415 	stw	r2,-48(fp)
			uint32_t t4 = (-alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
    8428:	e0bffc17 	ldw	r2,-16(fp)
    842c:	1420003c 	xorhi	r16,r2,32768
    8430:	d0a00717 	ldw	r2,-32740(gp)
    8434:	1009883a 	mov	r4,r2
    8438:	e17ffd17 	ldw	r5,-12(fp)
    843c:	0008c800 	call	8c80 <__mulsf3>
    8440:	1007883a 	mov	r3,r2
    8444:	1805883a 	mov	r2,r3
    8448:	8009883a 	mov	r4,r16
    844c:	100b883a 	mov	r5,r2
    8450:	0008c280 	call	8c28 <__subsf3>
    8454:	1007883a 	mov	r3,r2
    8458:	1821883a 	mov	r16,r3
    845c:	d0a00617 	ldw	r2,-32744(gp)
    8460:	1009883a 	mov	r4,r2
    8464:	0008ec80 	call	8ec8 <__floatsisf>
    8468:	1007883a 	mov	r3,r2
    846c:	8009883a 	mov	r4,r16
    8470:	180b883a 	mov	r5,r3
    8474:	0008c800 	call	8c80 <__mulsf3>
    8478:	1007883a 	mov	r3,r2
    847c:	1805883a 	mov	r2,r3
    8480:	1009883a 	mov	r4,r2
    8484:	00089780 	call	8978 <__fixunssfsi>
    8488:	e0bff515 	stw	r2,-44(fp)

			// PWM timings
			tB = (PWMHalfPeriod - t3 - t4) / 2;
    848c:	d0a00617 	ldw	r2,-32744(gp)
    8490:	1007883a 	mov	r3,r2
    8494:	e0bff417 	ldw	r2,-48(fp)
    8498:	1887c83a 	sub	r3,r3,r2
    849c:	e0bff517 	ldw	r2,-44(fp)
    84a0:	1885c83a 	sub	r2,r3,r2
    84a4:	1004d07a 	srli	r2,r2,1
    84a8:	e0bfee15 	stw	r2,-72(fp)
			tC = tB + t3;
    84ac:	e0ffee17 	ldw	r3,-72(fp)
    84b0:	e0bff417 	ldw	r2,-48(fp)
    84b4:	1885883a 	add	r2,r3,r2
    84b8:	e0bfef15 	stw	r2,-68(fp)
			tA = tC + t4;
    84bc:	e0ffef17 	ldw	r3,-68(fp)
    84c0:	e0bff517 	ldw	r2,-44(fp)
    84c4:	1885883a 	add	r2,r3,r2
    84c8:	e0bfed15 	stw	r2,-76(fp)

			break;
    84cc:	0000b706 	br	87ac <SVM+0x750>

		// sextant 4-5
		case 4:
		{
			// Vector on-times
			uint32_t t4 = (-alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
    84d0:	d0a00717 	ldw	r2,-32740(gp)
    84d4:	1009883a 	mov	r4,r2
    84d8:	e17ffd17 	ldw	r5,-12(fp)
    84dc:	0008c800 	call	8c80 <__mulsf3>
    84e0:	1007883a 	mov	r3,r2
    84e4:	1805883a 	mov	r2,r3
    84e8:	1009883a 	mov	r4,r2
    84ec:	e17ffc17 	ldw	r5,-16(fp)
    84f0:	0008c280 	call	8c28 <__subsf3>
    84f4:	1007883a 	mov	r3,r2
    84f8:	1821883a 	mov	r16,r3
    84fc:	d0a00617 	ldw	r2,-32744(gp)
    8500:	1009883a 	mov	r4,r2
    8504:	0008ec80 	call	8ec8 <__floatsisf>
    8508:	1007883a 	mov	r3,r2
    850c:	8009883a 	mov	r4,r16
    8510:	180b883a 	mov	r5,r3
    8514:	0008c800 	call	8c80 <__mulsf3>
    8518:	1007883a 	mov	r3,r2
    851c:	1805883a 	mov	r2,r3
    8520:	1009883a 	mov	r4,r2
    8524:	00089780 	call	8978 <__fixunssfsi>
    8528:	e0bff615 	stw	r2,-40(fp)
			uint32_t t5 = (-two_by_sqrt3 * beta) * PWMHalfPeriod;
    852c:	d0a00817 	ldw	r2,-32736(gp)
    8530:	10a0003c 	xorhi	r2,r2,32768
    8534:	1009883a 	mov	r4,r2
    8538:	e17ffd17 	ldw	r5,-12(fp)
    853c:	0008c800 	call	8c80 <__mulsf3>
    8540:	1007883a 	mov	r3,r2
    8544:	1821883a 	mov	r16,r3
    8548:	d0a00617 	ldw	r2,-32744(gp)
    854c:	1009883a 	mov	r4,r2
    8550:	0008ec80 	call	8ec8 <__floatsisf>
    8554:	1007883a 	mov	r3,r2
    8558:	8009883a 	mov	r4,r16
    855c:	180b883a 	mov	r5,r3
    8560:	0008c800 	call	8c80 <__mulsf3>
    8564:	1007883a 	mov	r3,r2
    8568:	1805883a 	mov	r2,r3
    856c:	1009883a 	mov	r4,r2
    8570:	00089780 	call	8978 <__fixunssfsi>
    8574:	e0bff715 	stw	r2,-36(fp)

			// PWM timings
			tC = (PWMHalfPeriod - t4 - t5) / 2;
    8578:	d0a00617 	ldw	r2,-32744(gp)
    857c:	1007883a 	mov	r3,r2
    8580:	e0bff617 	ldw	r2,-40(fp)
    8584:	1887c83a 	sub	r3,r3,r2
    8588:	e0bff717 	ldw	r2,-36(fp)
    858c:	1885c83a 	sub	r2,r3,r2
    8590:	1004d07a 	srli	r2,r2,1
    8594:	e0bfef15 	stw	r2,-68(fp)
			tB = tC + t5;
    8598:	e0ffef17 	ldw	r3,-68(fp)
    859c:	e0bff717 	ldw	r2,-36(fp)
    85a0:	1885883a 	add	r2,r3,r2
    85a4:	e0bfee15 	stw	r2,-72(fp)
			tA = tB + t4;
    85a8:	e0ffee17 	ldw	r3,-72(fp)
    85ac:	e0bff617 	ldw	r2,-40(fp)
    85b0:	1885883a 	add	r2,r3,r2
    85b4:	e0bfed15 	stw	r2,-76(fp)

			break;
    85b8:	00007c06 	br	87ac <SVM+0x750>

		// sextant 5-6
		case 5:
		{
			// Vector on-times
			uint32_t t5 = (-alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
    85bc:	e0bffc17 	ldw	r2,-16(fp)
    85c0:	1420003c 	xorhi	r16,r2,32768
    85c4:	d0a00717 	ldw	r2,-32740(gp)
    85c8:	1009883a 	mov	r4,r2
    85cc:	e17ffd17 	ldw	r5,-12(fp)
    85d0:	0008c800 	call	8c80 <__mulsf3>
    85d4:	1007883a 	mov	r3,r2
    85d8:	1805883a 	mov	r2,r3
    85dc:	8009883a 	mov	r4,r16
    85e0:	100b883a 	mov	r5,r2
    85e4:	0008c280 	call	8c28 <__subsf3>
    85e8:	1007883a 	mov	r3,r2
    85ec:	1821883a 	mov	r16,r3
    85f0:	d0a00617 	ldw	r2,-32744(gp)
    85f4:	1009883a 	mov	r4,r2
    85f8:	0008ec80 	call	8ec8 <__floatsisf>
    85fc:	1007883a 	mov	r3,r2
    8600:	8009883a 	mov	r4,r16
    8604:	180b883a 	mov	r5,r3
    8608:	0008c800 	call	8c80 <__mulsf3>
    860c:	1007883a 	mov	r3,r2
    8610:	1805883a 	mov	r2,r3
    8614:	1009883a 	mov	r4,r2
    8618:	00089780 	call	8978 <__fixunssfsi>
    861c:	e0bff815 	stw	r2,-32(fp)
			uint32_t t6 = (alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
    8620:	d0a00717 	ldw	r2,-32740(gp)
    8624:	1009883a 	mov	r4,r2
    8628:	e17ffd17 	ldw	r5,-12(fp)
    862c:	0008c800 	call	8c80 <__mulsf3>
    8630:	1007883a 	mov	r3,r2
    8634:	1805883a 	mov	r2,r3
    8638:	e13ffc17 	ldw	r4,-16(fp)
    863c:	100b883a 	mov	r5,r2
    8640:	0008c280 	call	8c28 <__subsf3>
    8644:	1007883a 	mov	r3,r2
    8648:	1821883a 	mov	r16,r3
    864c:	d0a00617 	ldw	r2,-32744(gp)
    8650:	1009883a 	mov	r4,r2
    8654:	0008ec80 	call	8ec8 <__floatsisf>
    8658:	1007883a 	mov	r3,r2
    865c:	8009883a 	mov	r4,r16
    8660:	180b883a 	mov	r5,r3
    8664:	0008c800 	call	8c80 <__mulsf3>
    8668:	1007883a 	mov	r3,r2
    866c:	1805883a 	mov	r2,r3
    8670:	1009883a 	mov	r4,r2
    8674:	00089780 	call	8978 <__fixunssfsi>
    8678:	e0bff915 	stw	r2,-28(fp)

			// PWM timings
			tC = (PWMHalfPeriod - t5 - t6) / 2;
    867c:	d0a00617 	ldw	r2,-32744(gp)
    8680:	1007883a 	mov	r3,r2
    8684:	e0bff817 	ldw	r2,-32(fp)
    8688:	1887c83a 	sub	r3,r3,r2
    868c:	e0bff917 	ldw	r2,-28(fp)
    8690:	1885c83a 	sub	r2,r3,r2
    8694:	1004d07a 	srli	r2,r2,1
    8698:	e0bfef15 	stw	r2,-68(fp)
			tA = tC + t5;
    869c:	e0ffef17 	ldw	r3,-68(fp)
    86a0:	e0bff817 	ldw	r2,-32(fp)
    86a4:	1885883a 	add	r2,r3,r2
    86a8:	e0bfed15 	stw	r2,-76(fp)
			tB = tA + t6;
    86ac:	e0ffed17 	ldw	r3,-76(fp)
    86b0:	e0bff917 	ldw	r2,-28(fp)
    86b4:	1885883a 	add	r2,r3,r2
    86b8:	e0bfee15 	stw	r2,-72(fp)

			break;
    86bc:	00003b06 	br	87ac <SVM+0x750>

		// sextant 6-1
		case 6:
		{
			// Vector on-times
			uint32_t t6 = (-two_by_sqrt3 * beta) * PWMHalfPeriod;
    86c0:	d0a00817 	ldw	r2,-32736(gp)
    86c4:	10a0003c 	xorhi	r2,r2,32768
    86c8:	1009883a 	mov	r4,r2
    86cc:	e17ffd17 	ldw	r5,-12(fp)
    86d0:	0008c800 	call	8c80 <__mulsf3>
    86d4:	1007883a 	mov	r3,r2
    86d8:	1821883a 	mov	r16,r3
    86dc:	d0a00617 	ldw	r2,-32744(gp)
    86e0:	1009883a 	mov	r4,r2
    86e4:	0008ec80 	call	8ec8 <__floatsisf>
    86e8:	1007883a 	mov	r3,r2
    86ec:	8009883a 	mov	r4,r16
    86f0:	180b883a 	mov	r5,r3
    86f4:	0008c800 	call	8c80 <__mulsf3>
    86f8:	1007883a 	mov	r3,r2
    86fc:	1805883a 	mov	r2,r3
    8700:	1009883a 	mov	r4,r2
    8704:	00089780 	call	8978 <__fixunssfsi>
    8708:	e0bffa15 	stw	r2,-24(fp)
			uint32_t t1 = (alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
    870c:	d0a00717 	ldw	r2,-32740(gp)
    8710:	1009883a 	mov	r4,r2
    8714:	e17ffd17 	ldw	r5,-12(fp)
    8718:	0008c800 	call	8c80 <__mulsf3>
    871c:	1007883a 	mov	r3,r2
    8720:	1805883a 	mov	r2,r3
    8724:	1009883a 	mov	r4,r2
    8728:	e17ffc17 	ldw	r5,-16(fp)
    872c:	0008bdc0 	call	8bdc <__addsf3>
    8730:	1007883a 	mov	r3,r2
    8734:	1821883a 	mov	r16,r3
    8738:	d0a00617 	ldw	r2,-32744(gp)
    873c:	1009883a 	mov	r4,r2
    8740:	0008ec80 	call	8ec8 <__floatsisf>
    8744:	1007883a 	mov	r3,r2
    8748:	8009883a 	mov	r4,r16
    874c:	180b883a 	mov	r5,r3
    8750:	0008c800 	call	8c80 <__mulsf3>
    8754:	1007883a 	mov	r3,r2
    8758:	1805883a 	mov	r2,r3
    875c:	1009883a 	mov	r4,r2
    8760:	00089780 	call	8978 <__fixunssfsi>
    8764:	e0bffb15 	stw	r2,-20(fp)

			// PWM timings
			tA = (PWMHalfPeriod - t6 - t1) / 2;
    8768:	d0a00617 	ldw	r2,-32744(gp)
    876c:	1007883a 	mov	r3,r2
    8770:	e0bffa17 	ldw	r2,-24(fp)
    8774:	1887c83a 	sub	r3,r3,r2
    8778:	e0bffb17 	ldw	r2,-20(fp)
    877c:	1885c83a 	sub	r2,r3,r2
    8780:	1004d07a 	srli	r2,r2,1
    8784:	e0bfed15 	stw	r2,-76(fp)
			tC = tA + t1;
    8788:	e0ffed17 	ldw	r3,-76(fp)
    878c:	e0bffb17 	ldw	r2,-20(fp)
    8790:	1885883a 	add	r2,r3,r2
    8794:	e0bfef15 	stw	r2,-68(fp)
			tB = tC + t6;
    8798:	e0ffef17 	ldw	r3,-68(fp)
    879c:	e0bffa17 	ldw	r2,-24(fp)
    87a0:	1885883a 	add	r2,r3,r2
    87a4:	e0bfee15 	stw	r2,-72(fp)

			break;
    87a8:	0001883a 	nop
		}

	} //switch

	*tAout = tA;
    87ac:	e0bffe17 	ldw	r2,-8(fp)
    87b0:	e0ffed17 	ldw	r3,-76(fp)
    87b4:	10c00015 	stw	r3,0(r2)
	*tBout = tB;
    87b8:	e0bfff17 	ldw	r2,-4(fp)
    87bc:	e0ffee17 	ldw	r3,-72(fp)
    87c0:	10c00015 	stw	r3,0(r2)
	*tCout = tC;
    87c4:	e0800317 	ldw	r2,12(fp)
    87c8:	e0ffef17 	ldw	r3,-68(fp)
    87cc:	10c00015 	stw	r3,0(r2)

}
    87d0:	e037883a 	mov	sp,fp
    87d4:	dfc00217 	ldw	ra,8(sp)
    87d8:	df000117 	ldw	fp,4(sp)
    87dc:	dc000017 	ldw	r16,0(sp)
    87e0:	dec00304 	addi	sp,sp,12
    87e4:	f800283a 	ret

000087e8 <main>:

int main()
{
    87e8:	defff804 	addi	sp,sp,-32
    87ec:	dfc00715 	stw	ra,28(sp)
    87f0:	df000615 	stw	fp,24(sp)
    87f4:	df000604 	addi	fp,sp,24
	//printf("Hello from Nios II!\n");

	IOWR(PWM_0_BASE, PWM_REG_UPDATEON_Z, 1);
    87f8:	00c00044 	movi	r3,1
    87fc:	00800074 	movhi	r2,1
    8800:	10840904 	addi	r2,r2,4132
    8804:	10c00035 	stwio	r3,0(r2)
	IOWR(PWM_0_BASE, PWM_REG_MAXCTR, PWMHalfPeriod);
    8808:	d0e00617 	ldw	r3,-32744(gp)
    880c:	00800074 	movhi	r2,1
    8810:	10840804 	addi	r2,r2,4128
    8814:	10c00035 	stwio	r3,0(r2)

	for (int ud = 0; 1; ud ^= 1)
    8818:	e03ffb15 	stw	zero,-20(fp)
	{
		uint32_t tABC[3];
		SVM(ud*0.05,0,&tABC[0],&tABC[1],&tABC[2]);
    881c:	e13ffb17 	ldw	r4,-20(fp)
    8820:	00092f40 	call	92f4 <__floatsidf>
    8824:	100b883a 	mov	r5,r2
    8828:	180d883a 	mov	r6,r3
    882c:	2809883a 	mov	r4,r5
    8830:	300b883a 	mov	r5,r6
    8834:	01a666b4 	movhi	r6,39322
    8838:	31a66684 	addi	r6,r6,-26214
    883c:	01cfeab4 	movhi	r7,16298
    8840:	39e66644 	addi	r7,r7,-26215
    8844:	00090100 	call	9010 <__muldf3>
    8848:	1009883a 	mov	r4,r2
    884c:	180b883a 	mov	r5,r3
    8850:	2005883a 	mov	r2,r4
    8854:	2807883a 	mov	r3,r5
    8858:	1009883a 	mov	r4,r2
    885c:	180b883a 	mov	r5,r3
    8860:	00093c80 	call	93c8 <__truncdfsf2>
    8864:	1009883a 	mov	r4,r2
    8868:	e0fffd04 	addi	r3,fp,-12
    886c:	e0bffd04 	addi	r2,fp,-12
    8870:	10800104 	addi	r2,r2,4
    8874:	e17ffd04 	addi	r5,fp,-12
    8878:	29400204 	addi	r5,r5,8
    887c:	d9400015 	stw	r5,0(sp)
    8880:	000b883a 	mov	r5,zero
    8884:	180d883a 	mov	r6,r3
    8888:	100f883a 	mov	r7,r2
    888c:	000805c0 	call	805c <SVM>

		for (int i = 0; i < 3; ++i)
    8890:	e03ffc15 	stw	zero,-16(fp)
    8894:	00002a06 	br	8940 <main+0x158>
		{
			IOWR(PWM_0_BASE, 2*i, tABC[i] - deadtimeint/2);
    8898:	e0bffc17 	ldw	r2,-16(fp)
    889c:	100490fa 	slli	r2,r2,3
    88a0:	1007883a 	mov	r3,r2
    88a4:	00800074 	movhi	r2,1
    88a8:	10840004 	addi	r2,r2,4096
    88ac:	1887883a 	add	r3,r3,r2
    88b0:	e0bffc17 	ldw	r2,-16(fp)
    88b4:	1085883a 	add	r2,r2,r2
    88b8:	1085883a 	add	r2,r2,r2
    88bc:	e13ffb04 	addi	r4,fp,-20
    88c0:	2085883a 	add	r2,r4,r2
    88c4:	10800204 	addi	r2,r2,8
    88c8:	11000017 	ldw	r4,0(r2)
    88cc:	d0a00517 	ldw	r2,-32748(gp)
    88d0:	100ad7fa 	srli	r5,r2,31
    88d4:	2885883a 	add	r2,r5,r2
    88d8:	1005d07a 	srai	r2,r2,1
    88dc:	2085c83a 	sub	r2,r4,r2
    88e0:	18800035 	stwio	r2,0(r3)
			IOWR(PWM_0_BASE, 2*i + 1, tABC[i] + deadtimeint/2);
    88e4:	e0bffc17 	ldw	r2,-16(fp)
    88e8:	100490fa 	slli	r2,r2,3
    88ec:	10800104 	addi	r2,r2,4
    88f0:	1007883a 	mov	r3,r2
    88f4:	00800074 	movhi	r2,1
    88f8:	10840004 	addi	r2,r2,4096
    88fc:	1887883a 	add	r3,r3,r2
    8900:	e0bffc17 	ldw	r2,-16(fp)
    8904:	1085883a 	add	r2,r2,r2
    8908:	1085883a 	add	r2,r2,r2
    890c:	e13ffb04 	addi	r4,fp,-20
    8910:	2085883a 	add	r2,r4,r2
    8914:	10800204 	addi	r2,r2,8
    8918:	11000017 	ldw	r4,0(r2)
    891c:	d0a00517 	ldw	r2,-32748(gp)
    8920:	100ad7fa 	srli	r5,r2,31
    8924:	2885883a 	add	r2,r5,r2
    8928:	1005d07a 	srai	r2,r2,1
    892c:	2085883a 	add	r2,r4,r2
    8930:	18800035 	stwio	r2,0(r3)
	for (int ud = 0; 1; ud ^= 1)
	{
		uint32_t tABC[3];
		SVM(ud*0.05,0,&tABC[0],&tABC[1],&tABC[2]);

		for (int i = 0; i < 3; ++i)
    8934:	e0bffc17 	ldw	r2,-16(fp)
    8938:	10800044 	addi	r2,r2,1
    893c:	e0bffc15 	stw	r2,-16(fp)
    8940:	e0bffc17 	ldw	r2,-16(fp)
    8944:	108000d0 	cmplti	r2,r2,3
    8948:	103fd31e 	bne	r2,zero,8898 <main+0xb0>
		{
			IOWR(PWM_0_BASE, 2*i, tABC[i] - deadtimeint/2);
			IOWR(PWM_0_BASE, 2*i + 1, tABC[i] + deadtimeint/2);
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
    894c:	00c00044 	movi	r3,1
    8950:	00800074 	movhi	r2,1
    8954:	10840f04 	addi	r2,r2,4156
    8958:	10c00035 	stwio	r3,0(r2)

		usleep(500000);
    895c:	01000234 	movhi	r4,8
    8960:	21284804 	addi	r4,r4,-24288
    8964:	0009dfc0 	call	9dfc <usleep>
	//printf("Hello from Nios II!\n");

	IOWR(PWM_0_BASE, PWM_REG_UPDATEON_Z, 1);
	IOWR(PWM_0_BASE, PWM_REG_MAXCTR, PWMHalfPeriod);

	for (int ud = 0; 1; ud ^= 1)
    8968:	e0bffb17 	ldw	r2,-20(fp)
    896c:	1080005c 	xori	r2,r2,1
    8970:	e0bffb15 	stw	r2,-20(fp)
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);

		usleep(500000);
	}
    8974:	003fa906 	br	881c <main+0x34>

00008978 <__fixunssfsi>:
    8978:	defffd04 	addi	sp,sp,-12
    897c:	dc000015 	stw	r16,0(sp)
    8980:	0413c034 	movhi	r16,20224
    8984:	800b883a 	mov	r5,r16
    8988:	dc400115 	stw	r17,4(sp)
    898c:	dfc00215 	stw	ra,8(sp)
    8990:	2023883a 	mov	r17,r4
    8994:	0008e6c0 	call	8e6c <__gesf2>
    8998:	1000070e 	bge	r2,zero,89b8 <__fixunssfsi+0x40>
    899c:	8809883a 	mov	r4,r17
    89a0:	0008f6c0 	call	8f6c <__fixsfsi>
    89a4:	dfc00217 	ldw	ra,8(sp)
    89a8:	dc400117 	ldw	r17,4(sp)
    89ac:	dc000017 	ldw	r16,0(sp)
    89b0:	dec00304 	addi	sp,sp,12
    89b4:	f800283a 	ret
    89b8:	800b883a 	mov	r5,r16
    89bc:	8809883a 	mov	r4,r17
    89c0:	0008c280 	call	8c28 <__subsf3>
    89c4:	1009883a 	mov	r4,r2
    89c8:	0008f6c0 	call	8f6c <__fixsfsi>
    89cc:	00e00034 	movhi	r3,32768
    89d0:	10c5883a 	add	r2,r2,r3
    89d4:	dfc00217 	ldw	ra,8(sp)
    89d8:	dc400117 	ldw	r17,4(sp)
    89dc:	dc000017 	ldw	r16,0(sp)
    89e0:	dec00304 	addi	sp,sp,12
    89e4:	f800283a 	ret

000089e8 <_fpadd_parts>:
    89e8:	2005883a 	mov	r2,r4
    89ec:	21000017 	ldw	r4,0(r4)
    89f0:	01c00044 	movi	r7,1
    89f4:	3900332e 	bgeu	r7,r4,8ac4 <_fpadd_parts+0xdc>
    89f8:	28c00017 	ldw	r3,0(r5)
    89fc:	38c0642e 	bgeu	r7,r3,8b90 <_fpadd_parts+0x1a8>
    8a00:	01c00104 	movi	r7,4
    8a04:	21c06e26 	beq	r4,r7,8bc0 <_fpadd_parts+0x1d8>
    8a08:	19c06126 	beq	r3,r7,8b90 <_fpadd_parts+0x1a8>
    8a0c:	01c00084 	movi	r7,2
    8a10:	19c04226 	beq	r3,r7,8b1c <_fpadd_parts+0x134>
    8a14:	21c05e26 	beq	r4,r7,8b90 <_fpadd_parts+0x1a8>
    8a18:	11000217 	ldw	r4,8(r2)
    8a1c:	2a400217 	ldw	r9,8(r5)
    8a20:	12800317 	ldw	r10,12(r2)
    8a24:	29c00317 	ldw	r7,12(r5)
    8a28:	2247c83a 	sub	r3,r4,r9
    8a2c:	1811883a 	mov	r8,r3
    8a30:	18005316 	blt	r3,zero,8b80 <_fpadd_parts+0x198>
    8a34:	02c007c4 	movi	r11,31
    8a38:	5a002316 	blt	r11,r8,8ac8 <_fpadd_parts+0xe0>
    8a3c:	00c0560e 	bge	zero,r3,8b98 <_fpadd_parts+0x1b0>
    8a40:	00c00044 	movi	r3,1
    8a44:	1a06983a 	sll	r3,r3,r8
    8a48:	3a10d83a 	srl	r8,r7,r8
    8a4c:	18ffffc4 	addi	r3,r3,-1
    8a50:	19ce703a 	and	r7,r3,r7
    8a54:	380ec03a 	cmpne	r7,r7,zero
    8a58:	3a0eb03a 	or	r7,r7,r8
    8a5c:	10c00117 	ldw	r3,4(r2)
    8a60:	28800117 	ldw	r2,4(r5)
    8a64:	18801d26 	beq	r3,r2,8adc <_fpadd_parts+0xf4>
    8a68:	18003a26 	beq	r3,zero,8b54 <_fpadd_parts+0x16c>
    8a6c:	3a85c83a 	sub	r2,r7,r10
    8a70:	10003a16 	blt	r2,zero,8b5c <_fpadd_parts+0x174>
    8a74:	30000115 	stw	zero,4(r6)
    8a78:	31000215 	stw	r4,8(r6)
    8a7c:	30800315 	stw	r2,12(r6)
    8a80:	10ffffc4 	addi	r3,r2,-1
    8a84:	01d00034 	movhi	r7,16384
    8a88:	39ffff84 	addi	r7,r7,-2
    8a8c:	38c00936 	bltu	r7,r3,8ab4 <_fpadd_parts+0xcc>
    8a90:	30c00217 	ldw	r3,8(r6)
    8a94:	18ffffc4 	addi	r3,r3,-1
    8a98:	1085883a 	add	r2,r2,r2
    8a9c:	113fffc4 	addi	r4,r2,-1
    8aa0:	180b883a 	mov	r5,r3
    8aa4:	18ffffc4 	addi	r3,r3,-1
    8aa8:	393ffb2e 	bgeu	r7,r4,8a98 <_fpadd_parts+0xb0>
    8aac:	30800315 	stw	r2,12(r6)
    8ab0:	31400215 	stw	r5,8(r6)
    8ab4:	00c000c4 	movi	r3,3
    8ab8:	30c00015 	stw	r3,0(r6)
    8abc:	10000e16 	blt	r2,zero,8af8 <_fpadd_parts+0x110>
    8ac0:	3005883a 	mov	r2,r6
    8ac4:	f800283a 	ret
    8ac8:	49002a0e 	bge	r9,r4,8b74 <_fpadd_parts+0x18c>
    8acc:	10c00117 	ldw	r3,4(r2)
    8ad0:	28800117 	ldw	r2,4(r5)
    8ad4:	000f883a 	mov	r7,zero
    8ad8:	18bfe31e 	bne	r3,r2,8a68 <_fpadd_parts+0x80>
    8adc:	3a85883a 	add	r2,r7,r10
    8ae0:	30c00115 	stw	r3,4(r6)
    8ae4:	00c000c4 	movi	r3,3
    8ae8:	31000215 	stw	r4,8(r6)
    8aec:	30800315 	stw	r2,12(r6)
    8af0:	30c00015 	stw	r3,0(r6)
    8af4:	103ff20e 	bge	r2,zero,8ac0 <_fpadd_parts+0xd8>
    8af8:	30c00217 	ldw	r3,8(r6)
    8afc:	1008d07a 	srli	r4,r2,1
    8b00:	1080004c 	andi	r2,r2,1
    8b04:	18c00044 	addi	r3,r3,1
    8b08:	1104b03a 	or	r2,r2,r4
    8b0c:	30800315 	stw	r2,12(r6)
    8b10:	30c00215 	stw	r3,8(r6)
    8b14:	3005883a 	mov	r2,r6
    8b18:	f800283a 	ret
    8b1c:	20ffe91e 	bne	r4,r3,8ac4 <_fpadd_parts+0xdc>
    8b20:	31000015 	stw	r4,0(r6)
    8b24:	10c00117 	ldw	r3,4(r2)
    8b28:	30c00115 	stw	r3,4(r6)
    8b2c:	11c00217 	ldw	r7,8(r2)
    8b30:	10c00117 	ldw	r3,4(r2)
    8b34:	29000117 	ldw	r4,4(r5)
    8b38:	31c00215 	stw	r7,8(r6)
    8b3c:	10800317 	ldw	r2,12(r2)
    8b40:	20c6703a 	and	r3,r4,r3
    8b44:	30c00115 	stw	r3,4(r6)
    8b48:	30800315 	stw	r2,12(r6)
    8b4c:	3005883a 	mov	r2,r6
    8b50:	f800283a 	ret
    8b54:	51c5c83a 	sub	r2,r10,r7
    8b58:	103fc60e 	bge	r2,zero,8a74 <_fpadd_parts+0x8c>
    8b5c:	0085c83a 	sub	r2,zero,r2
    8b60:	00c00044 	movi	r3,1
    8b64:	30c00115 	stw	r3,4(r6)
    8b68:	31000215 	stw	r4,8(r6)
    8b6c:	30800315 	stw	r2,12(r6)
    8b70:	003fc306 	br	8a80 <_fpadd_parts+0x98>
    8b74:	4809883a 	mov	r4,r9
    8b78:	0015883a 	mov	r10,zero
    8b7c:	003fb706 	br	8a5c <_fpadd_parts+0x74>
    8b80:	00d1c83a 	sub	r8,zero,r3
    8b84:	02c007c4 	movi	r11,31
    8b88:	5a3fcf16 	blt	r11,r8,8ac8 <_fpadd_parts+0xe0>
    8b8c:	003fab06 	br	8a3c <_fpadd_parts+0x54>
    8b90:	2805883a 	mov	r2,r5
    8b94:	f800283a 	ret
    8b98:	183fb026 	beq	r3,zero,8a5c <_fpadd_parts+0x74>
    8b9c:	02400044 	movi	r9,1
    8ba0:	4a12983a 	sll	r9,r9,r8
    8ba4:	5206d83a 	srl	r3,r10,r8
    8ba8:	2209883a 	add	r4,r4,r8
    8bac:	4a3fffc4 	addi	r8,r9,-1
    8bb0:	4294703a 	and	r10,r8,r10
    8bb4:	5014c03a 	cmpne	r10,r10,zero
    8bb8:	50d4b03a 	or	r10,r10,r3
    8bbc:	003fa706 	br	8a5c <_fpadd_parts+0x74>
    8bc0:	193fc01e 	bne	r3,r4,8ac4 <_fpadd_parts+0xdc>
    8bc4:	11000117 	ldw	r4,4(r2)
    8bc8:	28c00117 	ldw	r3,4(r5)
    8bcc:	20ffbd26 	beq	r4,r3,8ac4 <_fpadd_parts+0xdc>
    8bd0:	00800074 	movhi	r2,1
    8bd4:	10ac8304 	addi	r2,r2,-19956
    8bd8:	f800283a 	ret

00008bdc <__addsf3>:
    8bdc:	defff104 	addi	sp,sp,-60
    8be0:	d9000d15 	stw	r4,52(sp)
    8be4:	d9400c15 	stw	r5,48(sp)
    8be8:	d9000d04 	addi	r4,sp,52
    8bec:	d9400804 	addi	r5,sp,32
    8bf0:	dfc00e15 	stw	ra,56(sp)
    8bf4:	00097100 	call	9710 <__unpack_f>
    8bf8:	d9000c04 	addi	r4,sp,48
    8bfc:	d9400404 	addi	r5,sp,16
    8c00:	00097100 	call	9710 <__unpack_f>
    8c04:	d9000804 	addi	r4,sp,32
    8c08:	d9400404 	addi	r5,sp,16
    8c0c:	d80d883a 	mov	r6,sp
    8c10:	00089e80 	call	89e8 <_fpadd_parts>
    8c14:	1009883a 	mov	r4,r2
    8c18:	00095e40 	call	95e4 <__pack_f>
    8c1c:	dfc00e17 	ldw	ra,56(sp)
    8c20:	dec00f04 	addi	sp,sp,60
    8c24:	f800283a 	ret

00008c28 <__subsf3>:
    8c28:	defff104 	addi	sp,sp,-60
    8c2c:	d9000d15 	stw	r4,52(sp)
    8c30:	d9400c15 	stw	r5,48(sp)
    8c34:	d9000d04 	addi	r4,sp,52
    8c38:	d9400804 	addi	r5,sp,32
    8c3c:	dfc00e15 	stw	ra,56(sp)
    8c40:	00097100 	call	9710 <__unpack_f>
    8c44:	d9000c04 	addi	r4,sp,48
    8c48:	d9400404 	addi	r5,sp,16
    8c4c:	00097100 	call	9710 <__unpack_f>
    8c50:	d8800517 	ldw	r2,20(sp)
    8c54:	d9000804 	addi	r4,sp,32
    8c58:	d9400404 	addi	r5,sp,16
    8c5c:	d80d883a 	mov	r6,sp
    8c60:	1080005c 	xori	r2,r2,1
    8c64:	d8800515 	stw	r2,20(sp)
    8c68:	00089e80 	call	89e8 <_fpadd_parts>
    8c6c:	1009883a 	mov	r4,r2
    8c70:	00095e40 	call	95e4 <__pack_f>
    8c74:	dfc00e17 	ldw	ra,56(sp)
    8c78:	dec00f04 	addi	sp,sp,60
    8c7c:	f800283a 	ret

00008c80 <__mulsf3>:
    8c80:	defff104 	addi	sp,sp,-60
    8c84:	d9000d15 	stw	r4,52(sp)
    8c88:	d9400c15 	stw	r5,48(sp)
    8c8c:	d9000d04 	addi	r4,sp,52
    8c90:	d9400804 	addi	r5,sp,32
    8c94:	dfc00e15 	stw	ra,56(sp)
    8c98:	00097100 	call	9710 <__unpack_f>
    8c9c:	d9000c04 	addi	r4,sp,48
    8ca0:	d9400404 	addi	r5,sp,16
    8ca4:	00097100 	call	9710 <__unpack_f>
    8ca8:	d8c00817 	ldw	r3,32(sp)
    8cac:	00800044 	movi	r2,1
    8cb0:	10c00936 	bltu	r2,r3,8cd8 <__mulsf3+0x58>
    8cb4:	d8c00917 	ldw	r3,36(sp)
    8cb8:	d8800517 	ldw	r2,20(sp)
    8cbc:	d9000804 	addi	r4,sp,32
    8cc0:	1884c03a 	cmpne	r2,r3,r2
    8cc4:	d8800915 	stw	r2,36(sp)
    8cc8:	00095e40 	call	95e4 <__pack_f>
    8ccc:	dfc00e17 	ldw	ra,56(sp)
    8cd0:	dec00f04 	addi	sp,sp,60
    8cd4:	f800283a 	ret
    8cd8:	d9000417 	ldw	r4,16(sp)
    8cdc:	11000936 	bltu	r2,r4,8d04 <__mulsf3+0x84>
    8ce0:	d8800517 	ldw	r2,20(sp)
    8ce4:	d8c00917 	ldw	r3,36(sp)
    8ce8:	d9000404 	addi	r4,sp,16
    8cec:	1884c03a 	cmpne	r2,r3,r2
    8cf0:	d8800515 	stw	r2,20(sp)
    8cf4:	00095e40 	call	95e4 <__pack_f>
    8cf8:	dfc00e17 	ldw	ra,56(sp)
    8cfc:	dec00f04 	addi	sp,sp,60
    8d00:	f800283a 	ret
    8d04:	00800104 	movi	r2,4
    8d08:	1880051e 	bne	r3,r2,8d20 <__mulsf3+0xa0>
    8d0c:	00800084 	movi	r2,2
    8d10:	20bfe81e 	bne	r4,r2,8cb4 <__mulsf3+0x34>
    8d14:	01000074 	movhi	r4,1
    8d18:	212c8304 	addi	r4,r4,-19956
    8d1c:	003fea06 	br	8cc8 <__mulsf3+0x48>
    8d20:	2080031e 	bne	r4,r2,8d30 <__mulsf3+0xb0>
    8d24:	00800084 	movi	r2,2
    8d28:	18bffa26 	beq	r3,r2,8d14 <__mulsf3+0x94>
    8d2c:	003fec06 	br	8ce0 <__mulsf3+0x60>
    8d30:	00800084 	movi	r2,2
    8d34:	18bfdf26 	beq	r3,r2,8cb4 <__mulsf3+0x34>
    8d38:	20bfe926 	beq	r4,r2,8ce0 <__mulsf3+0x60>
    8d3c:	d9000717 	ldw	r4,28(sp)
    8d40:	d9800b17 	ldw	r6,44(sp)
    8d44:	000b883a 	mov	r5,zero
    8d48:	000f883a 	mov	r7,zero
    8d4c:	00094280 	call	9428 <__muldi3>
    8d50:	d9000617 	ldw	r4,24(sp)
    8d54:	d9400a17 	ldw	r5,40(sp)
    8d58:	d9c00917 	ldw	r7,36(sp)
    8d5c:	290b883a 	add	r5,r5,r4
    8d60:	d9000517 	ldw	r4,20(sp)
    8d64:	29800084 	addi	r6,r5,2
    8d68:	d9800215 	stw	r6,8(sp)
    8d6c:	3908c03a 	cmpne	r4,r7,r4
    8d70:	d9000115 	stw	r4,4(sp)
    8d74:	1809883a 	mov	r4,r3
    8d78:	1800070e 	bge	r3,zero,8d98 <__mulsf3+0x118>
    8d7c:	1900004c 	andi	r4,r3,1
    8d80:	294000c4 	addi	r5,r5,3
    8d84:	20000226 	beq	r4,zero,8d90 <__mulsf3+0x110>
    8d88:	1004d07a 	srli	r2,r2,1
    8d8c:	10a00034 	orhi	r2,r2,32768
    8d90:	1808d07a 	srli	r4,r3,1
    8d94:	d9400215 	stw	r5,8(sp)
    8d98:	01900034 	movhi	r6,16384
    8d9c:	31bfffc4 	addi	r6,r6,-1
    8da0:	31000c36 	bltu	r6,r4,8dd4 <__mulsf3+0x154>
    8da4:	d8c00217 	ldw	r3,8(sp)
    8da8:	18ffffc4 	addi	r3,r3,-1
    8dac:	00000306 	br	8dbc <__mulsf3+0x13c>
    8db0:	1085883a 	add	r2,r2,r2
    8db4:	18ffffc4 	addi	r3,r3,-1
    8db8:	31000536 	bltu	r6,r4,8dd0 <__mulsf3+0x150>
    8dbc:	2109883a 	add	r4,r4,r4
    8dc0:	180b883a 	mov	r5,r3
    8dc4:	103ffa0e 	bge	r2,zero,8db0 <__mulsf3+0x130>
    8dc8:	21000054 	ori	r4,r4,1
    8dcc:	003ff806 	br	8db0 <__mulsf3+0x130>
    8dd0:	d9400215 	stw	r5,8(sp)
    8dd4:	21401fcc 	andi	r5,r4,127
    8dd8:	00c01004 	movi	r3,64
    8ddc:	28c00526 	beq	r5,r3,8df4 <__mulsf3+0x174>
    8de0:	008000c4 	movi	r2,3
    8de4:	d9000315 	stw	r4,12(sp)
    8de8:	d8800015 	stw	r2,0(sp)
    8dec:	d809883a 	mov	r4,sp
    8df0:	003fb506 	br	8cc8 <__mulsf3+0x48>
    8df4:	20c0200c 	andi	r3,r4,128
    8df8:	183ff91e 	bne	r3,zero,8de0 <__mulsf3+0x160>
    8dfc:	103ff826 	beq	r2,zero,8de0 <__mulsf3+0x160>
    8e00:	21001004 	addi	r4,r4,64
    8e04:	00bfe004 	movi	r2,-128
    8e08:	2088703a 	and	r4,r4,r2
    8e0c:	003ff406 	br	8de0 <__mulsf3+0x160>

00008e10 <__gtsf2>:
    8e10:	defff504 	addi	sp,sp,-44
    8e14:	d9000915 	stw	r4,36(sp)
    8e18:	d9400815 	stw	r5,32(sp)
    8e1c:	d9000904 	addi	r4,sp,36
    8e20:	d9400404 	addi	r5,sp,16
    8e24:	dfc00a15 	stw	ra,40(sp)
    8e28:	00097100 	call	9710 <__unpack_f>
    8e2c:	d9000804 	addi	r4,sp,32
    8e30:	d80b883a 	mov	r5,sp
    8e34:	00097100 	call	9710 <__unpack_f>
    8e38:	d8c00417 	ldw	r3,16(sp)
    8e3c:	00800044 	movi	r2,1
    8e40:	10c0082e 	bgeu	r2,r3,8e64 <__gtsf2+0x54>
    8e44:	d8c00017 	ldw	r3,0(sp)
    8e48:	10c0062e 	bgeu	r2,r3,8e64 <__gtsf2+0x54>
    8e4c:	d9000404 	addi	r4,sp,16
    8e50:	d80b883a 	mov	r5,sp
    8e54:	00097d80 	call	97d8 <__fpcmp_parts_f>
    8e58:	dfc00a17 	ldw	ra,40(sp)
    8e5c:	dec00b04 	addi	sp,sp,44
    8e60:	f800283a 	ret
    8e64:	00bfffc4 	movi	r2,-1
    8e68:	003ffb06 	br	8e58 <__gtsf2+0x48>

00008e6c <__gesf2>:
    8e6c:	defff504 	addi	sp,sp,-44
    8e70:	d9000915 	stw	r4,36(sp)
    8e74:	d9400815 	stw	r5,32(sp)
    8e78:	d9000904 	addi	r4,sp,36
    8e7c:	d9400404 	addi	r5,sp,16
    8e80:	dfc00a15 	stw	ra,40(sp)
    8e84:	00097100 	call	9710 <__unpack_f>
    8e88:	d9000804 	addi	r4,sp,32
    8e8c:	d80b883a 	mov	r5,sp
    8e90:	00097100 	call	9710 <__unpack_f>
    8e94:	d8c00417 	ldw	r3,16(sp)
    8e98:	00800044 	movi	r2,1
    8e9c:	10c0082e 	bgeu	r2,r3,8ec0 <__gesf2+0x54>
    8ea0:	d8c00017 	ldw	r3,0(sp)
    8ea4:	10c0062e 	bgeu	r2,r3,8ec0 <__gesf2+0x54>
    8ea8:	d9000404 	addi	r4,sp,16
    8eac:	d80b883a 	mov	r5,sp
    8eb0:	00097d80 	call	97d8 <__fpcmp_parts_f>
    8eb4:	dfc00a17 	ldw	ra,40(sp)
    8eb8:	dec00b04 	addi	sp,sp,44
    8ebc:	f800283a 	ret
    8ec0:	00bfffc4 	movi	r2,-1
    8ec4:	003ffb06 	br	8eb4 <__gesf2+0x48>

00008ec8 <__floatsisf>:
    8ec8:	2004d7fa 	srli	r2,r4,31
    8ecc:	defffa04 	addi	sp,sp,-24
    8ed0:	00c000c4 	movi	r3,3
    8ed4:	dfc00515 	stw	ra,20(sp)
    8ed8:	dc000415 	stw	r16,16(sp)
    8edc:	d8c00015 	stw	r3,0(sp)
    8ee0:	d8800115 	stw	r2,4(sp)
    8ee4:	2000081e 	bne	r4,zero,8f08 <__floatsisf+0x40>
    8ee8:	00800084 	movi	r2,2
    8eec:	d8800015 	stw	r2,0(sp)
    8ef0:	d809883a 	mov	r4,sp
    8ef4:	00095e40 	call	95e4 <__pack_f>
    8ef8:	dfc00517 	ldw	ra,20(sp)
    8efc:	dc000417 	ldw	r16,16(sp)
    8f00:	dec00604 	addi	sp,sp,24
    8f04:	f800283a 	ret
    8f08:	00c00784 	movi	r3,30
    8f0c:	d8c00215 	stw	r3,8(sp)
    8f10:	10000b1e 	bne	r2,zero,8f40 <__floatsisf+0x78>
    8f14:	2021883a 	mov	r16,r4
    8f18:	8009883a 	mov	r4,r16
    8f1c:	00095380 	call	9538 <__clzsi2>
    8f20:	113fffc4 	addi	r4,r2,-1
    8f24:	01000d0e 	bge	zero,r4,8f5c <__floatsisf+0x94>
    8f28:	8108983a 	sll	r4,r16,r4
    8f2c:	00c007c4 	movi	r3,31
    8f30:	1885c83a 	sub	r2,r3,r2
    8f34:	d9000315 	stw	r4,12(sp)
    8f38:	d8800215 	stw	r2,8(sp)
    8f3c:	003fec06 	br	8ef0 <__floatsisf+0x28>
    8f40:	00a00034 	movhi	r2,32768
    8f44:	20800726 	beq	r4,r2,8f64 <__floatsisf+0x9c>
    8f48:	0121c83a 	sub	r16,zero,r4
    8f4c:	8009883a 	mov	r4,r16
    8f50:	00095380 	call	9538 <__clzsi2>
    8f54:	113fffc4 	addi	r4,r2,-1
    8f58:	013ff316 	blt	zero,r4,8f28 <__floatsisf+0x60>
    8f5c:	dc000315 	stw	r16,12(sp)
    8f60:	003fe306 	br	8ef0 <__floatsisf+0x28>
    8f64:	00b3c034 	movhi	r2,52992
    8f68:	003fe306 	br	8ef8 <__floatsisf+0x30>

00008f6c <__fixsfsi>:
    8f6c:	defffa04 	addi	sp,sp,-24
    8f70:	d9000415 	stw	r4,16(sp)
    8f74:	d80b883a 	mov	r5,sp
    8f78:	d9000404 	addi	r4,sp,16
    8f7c:	dfc00515 	stw	ra,20(sp)
    8f80:	00097100 	call	9710 <__unpack_f>
    8f84:	d8800017 	ldw	r2,0(sp)
    8f88:	00c00084 	movi	r3,2
    8f8c:	10c01826 	beq	r2,r3,8ff0 <__fixsfsi+0x84>
    8f90:	00c00044 	movi	r3,1
    8f94:	1880162e 	bgeu	r3,r2,8ff0 <__fixsfsi+0x84>
    8f98:	00c00104 	movi	r3,4
    8f9c:	10c00426 	beq	r2,r3,8fb0 <__fixsfsi+0x44>
    8fa0:	d8800217 	ldw	r2,8(sp)
    8fa4:	10001216 	blt	r2,zero,8ff0 <__fixsfsi+0x84>
    8fa8:	00c00784 	movi	r3,30
    8fac:	1880070e 	bge	r3,r2,8fcc <__fixsfsi+0x60>
    8fb0:	d8800117 	ldw	r2,4(sp)
    8fb4:	1000121e 	bne	r2,zero,9000 <__fixsfsi+0x94>
    8fb8:	00a00034 	movhi	r2,32768
    8fbc:	10bfffc4 	addi	r2,r2,-1
    8fc0:	dfc00517 	ldw	ra,20(sp)
    8fc4:	dec00604 	addi	sp,sp,24
    8fc8:	f800283a 	ret
    8fcc:	1885c83a 	sub	r2,r3,r2
    8fd0:	d8c00317 	ldw	r3,12(sp)
    8fd4:	1884d83a 	srl	r2,r3,r2
    8fd8:	d8c00117 	ldw	r3,4(sp)
    8fdc:	183ff826 	beq	r3,zero,8fc0 <__fixsfsi+0x54>
    8fe0:	0085c83a 	sub	r2,zero,r2
    8fe4:	dfc00517 	ldw	ra,20(sp)
    8fe8:	dec00604 	addi	sp,sp,24
    8fec:	f800283a 	ret
    8ff0:	0005883a 	mov	r2,zero
    8ff4:	dfc00517 	ldw	ra,20(sp)
    8ff8:	dec00604 	addi	sp,sp,24
    8ffc:	f800283a 	ret
    9000:	00a00034 	movhi	r2,32768
    9004:	dfc00517 	ldw	ra,20(sp)
    9008:	dec00604 	addi	sp,sp,24
    900c:	f800283a 	ret

00009010 <__muldf3>:
    9010:	deffe404 	addi	sp,sp,-112
    9014:	d9001115 	stw	r4,68(sp)
    9018:	d9401215 	stw	r5,72(sp)
    901c:	d9001104 	addi	r4,sp,68
    9020:	d9400a04 	addi	r5,sp,40
    9024:	dfc01b15 	stw	ra,108(sp)
    9028:	d9800f15 	stw	r6,60(sp)
    902c:	d9c01015 	stw	r7,64(sp)
    9030:	ddc01a15 	stw	r23,104(sp)
    9034:	dd801915 	stw	r22,100(sp)
    9038:	dd401815 	stw	r21,96(sp)
    903c:	dd001715 	stw	r20,92(sp)
    9040:	dcc01615 	stw	r19,88(sp)
    9044:	dc801515 	stw	r18,84(sp)
    9048:	dc401415 	stw	r17,80(sp)
    904c:	dc001315 	stw	r16,76(sp)
    9050:	0009ae40 	call	9ae4 <__unpack_d>
    9054:	d9000f04 	addi	r4,sp,60
    9058:	d9400504 	addi	r5,sp,20
    905c:	0009ae40 	call	9ae4 <__unpack_d>
    9060:	d8c00a17 	ldw	r3,40(sp)
    9064:	00800044 	movi	r2,1
    9068:	10c01136 	bltu	r2,r3,90b0 <__muldf3+0xa0>
    906c:	d8c00b17 	ldw	r3,44(sp)
    9070:	d8800617 	ldw	r2,24(sp)
    9074:	d9000a04 	addi	r4,sp,40
    9078:	1884c03a 	cmpne	r2,r3,r2
    907c:	d8800b15 	stw	r2,44(sp)
    9080:	00098c00 	call	98c0 <__pack_d>
    9084:	dfc01b17 	ldw	ra,108(sp)
    9088:	ddc01a17 	ldw	r23,104(sp)
    908c:	dd801917 	ldw	r22,100(sp)
    9090:	dd401817 	ldw	r21,96(sp)
    9094:	dd001717 	ldw	r20,92(sp)
    9098:	dcc01617 	ldw	r19,88(sp)
    909c:	dc801517 	ldw	r18,84(sp)
    90a0:	dc401417 	ldw	r17,80(sp)
    90a4:	dc001317 	ldw	r16,76(sp)
    90a8:	dec01c04 	addi	sp,sp,112
    90ac:	f800283a 	ret
    90b0:	d9000517 	ldw	r4,20(sp)
    90b4:	11000636 	bltu	r2,r4,90d0 <__muldf3+0xc0>
    90b8:	d8800617 	ldw	r2,24(sp)
    90bc:	d8c00b17 	ldw	r3,44(sp)
    90c0:	d9000504 	addi	r4,sp,20
    90c4:	1884c03a 	cmpne	r2,r3,r2
    90c8:	d8800615 	stw	r2,24(sp)
    90cc:	003fec06 	br	9080 <__muldf3+0x70>
    90d0:	00800104 	movi	r2,4
    90d4:	1880051e 	bne	r3,r2,90ec <__muldf3+0xdc>
    90d8:	00800084 	movi	r2,2
    90dc:	20bfe31e 	bne	r4,r2,906c <__muldf3+0x5c>
    90e0:	01000074 	movhi	r4,1
    90e4:	212c8704 	addi	r4,r4,-19940
    90e8:	003fe506 	br	9080 <__muldf3+0x70>
    90ec:	2080031e 	bne	r4,r2,90fc <__muldf3+0xec>
    90f0:	00800084 	movi	r2,2
    90f4:	18bffa26 	beq	r3,r2,90e0 <__muldf3+0xd0>
    90f8:	003fef06 	br	90b8 <__muldf3+0xa8>
    90fc:	00800084 	movi	r2,2
    9100:	18bfda26 	beq	r3,r2,906c <__muldf3+0x5c>
    9104:	20bfec26 	beq	r4,r2,90b8 <__muldf3+0xa8>
    9108:	dc000d17 	ldw	r16,52(sp)
    910c:	dd000817 	ldw	r20,32(sp)
    9110:	dc800917 	ldw	r18,36(sp)
    9114:	8009883a 	mov	r4,r16
    9118:	000b883a 	mov	r5,zero
    911c:	a00d883a 	mov	r6,r20
    9120:	000f883a 	mov	r7,zero
    9124:	00094280 	call	9428 <__muldi3>
    9128:	dc400e17 	ldw	r17,56(sp)
    912c:	9009883a 	mov	r4,r18
    9130:	800d883a 	mov	r6,r16
    9134:	000b883a 	mov	r5,zero
    9138:	000f883a 	mov	r7,zero
    913c:	102f883a 	mov	r23,r2
    9140:	1827883a 	mov	r19,r3
    9144:	00094280 	call	9428 <__muldi3>
    9148:	900d883a 	mov	r6,r18
    914c:	8809883a 	mov	r4,r17
    9150:	000b883a 	mov	r5,zero
    9154:	000f883a 	mov	r7,zero
    9158:	102b883a 	mov	r21,r2
    915c:	1821883a 	mov	r16,r3
    9160:	00094280 	call	9428 <__muldi3>
    9164:	8809883a 	mov	r4,r17
    9168:	000b883a 	mov	r5,zero
    916c:	a00d883a 	mov	r6,r20
    9170:	000f883a 	mov	r7,zero
    9174:	102d883a 	mov	r22,r2
    9178:	1825883a 	mov	r18,r3
    917c:	00094280 	call	9428 <__muldi3>
    9180:	154b883a 	add	r5,r2,r21
    9184:	2889803a 	cmpltu	r4,r5,r2
    9188:	1c07883a 	add	r3,r3,r16
    918c:	20c9883a 	add	r4,r4,r3
    9190:	24004b36 	bltu	r4,r16,92c0 <__muldf3+0x2b0>
    9194:	8100011e 	bne	r16,r4,919c <__muldf3+0x18c>
    9198:	2d404936 	bltu	r5,r21,92c0 <__muldf3+0x2b0>
    919c:	0011883a 	mov	r8,zero
    91a0:	0007883a 	mov	r3,zero
    91a4:	2ccb883a 	add	r5,r5,r19
    91a8:	b80d883a 	mov	r6,r23
    91ac:	2cc0012e 	bgeu	r5,r19,91b4 <__muldf3+0x1a4>
    91b0:	02000044 	movi	r8,1
    91b4:	258f883a 	add	r7,r4,r22
    91b8:	3909803a 	cmpltu	r4,r7,r4
    91bc:	da400c17 	ldw	r9,48(sp)
    91c0:	2489883a 	add	r4,r4,r18
    91c4:	d8800717 	ldw	r2,28(sp)
    91c8:	20c9883a 	add	r4,r4,r3
    91cc:	da800b17 	ldw	r10,44(sp)
    91d0:	d8c00617 	ldw	r3,24(sp)
    91d4:	3a11883a 	add	r8,r7,r8
    91d8:	4885883a 	add	r2,r9,r2
    91dc:	50c6c03a 	cmpne	r3,r10,r3
    91e0:	41cf803a 	cmpltu	r7,r8,r7
    91e4:	12400104 	addi	r9,r2,4
    91e8:	d8c00115 	stw	r3,4(sp)
    91ec:	3909883a 	add	r4,r7,r4
    91f0:	da400215 	stw	r9,8(sp)
    91f4:	03480034 	movhi	r13,8192
    91f8:	6b7fffc4 	addi	r13,r13,-1
    91fc:	4007883a 	mov	r3,r8
    9200:	6900102e 	bgeu	r13,r4,9244 <__muldf3+0x234>
    9204:	10800144 	addi	r2,r2,5
    9208:	180ed07a 	srli	r7,r3,1
    920c:	18c0004c 	andi	r3,r3,1
    9210:	201097fa 	slli	r8,r4,31
    9214:	281697fa 	slli	r11,r5,31
    9218:	2008d07a 	srli	r4,r4,1
    921c:	3014d07a 	srli	r10,r6,1
    9220:	2812d07a 	srli	r9,r5,1
    9224:	1019883a 	mov	r12,r2
    9228:	18000226 	beq	r3,zero,9234 <__muldf3+0x224>
    922c:	5a8cb03a 	or	r6,r11,r10
    9230:	49600034 	orhi	r5,r9,32768
    9234:	41c6b03a 	or	r3,r8,r7
    9238:	10800044 	addi	r2,r2,1
    923c:	693ff236 	bltu	r13,r4,9208 <__muldf3+0x1f8>
    9240:	db000215 	stw	r12,8(sp)
    9244:	03440034 	movhi	r13,4096
    9248:	6b7fffc4 	addi	r13,r13,-1
    924c:	69001336 	bltu	r13,r4,929c <__muldf3+0x28c>
    9250:	d8800217 	ldw	r2,8(sp)
    9254:	10bfffc4 	addi	r2,r2,-1
    9258:	18d3883a 	add	r9,r3,r3
    925c:	48c7803a 	cmpltu	r3,r9,r3
    9260:	2109883a 	add	r4,r4,r4
    9264:	190f883a 	add	r7,r3,r4
    9268:	3191883a 	add	r8,r6,r6
    926c:	4197803a 	cmpltu	r11,r8,r6
    9270:	2955883a 	add	r10,r5,r5
    9274:	1019883a 	mov	r12,r2
    9278:	4807883a 	mov	r3,r9
    927c:	3809883a 	mov	r4,r7
    9280:	2800010e 	bge	r5,zero,9288 <__muldf3+0x278>
    9284:	48c00054 	ori	r3,r9,1
    9288:	400d883a 	mov	r6,r8
    928c:	5a8b883a 	add	r5,r11,r10
    9290:	10bfffc4 	addi	r2,r2,-1
    9294:	69fff02e 	bgeu	r13,r7,9258 <__muldf3+0x248>
    9298:	db000215 	stw	r12,8(sp)
    929c:	18803fcc 	andi	r2,r3,255
    92a0:	01c02004 	movi	r7,128
    92a4:	11c00926 	beq	r2,r7,92cc <__muldf3+0x2bc>
    92a8:	008000c4 	movi	r2,3
    92ac:	d9000415 	stw	r4,16(sp)
    92b0:	d8c00315 	stw	r3,12(sp)
    92b4:	d8800015 	stw	r2,0(sp)
    92b8:	d809883a 	mov	r4,sp
    92bc:	003f7006 	br	9080 <__muldf3+0x70>
    92c0:	0011883a 	mov	r8,zero
    92c4:	00c00044 	movi	r3,1
    92c8:	003fb606 	br	91a4 <__muldf3+0x194>
    92cc:	19c0400c 	andi	r7,r3,256
    92d0:	383ff51e 	bne	r7,zero,92a8 <__muldf3+0x298>
    92d4:	314ab03a 	or	r5,r6,r5
    92d8:	283ff326 	beq	r5,zero,92a8 <__muldf3+0x298>
    92dc:	1885883a 	add	r2,r3,r2
    92e0:	10cb803a 	cmpltu	r5,r2,r3
    92e4:	00ffc004 	movi	r3,-256
    92e8:	10c6703a 	and	r3,r2,r3
    92ec:	2909883a 	add	r4,r5,r4
    92f0:	003fed06 	br	92a8 <__muldf3+0x298>

000092f4 <__floatsidf>:
    92f4:	2004d7fa 	srli	r2,r4,31
    92f8:	defff904 	addi	sp,sp,-28
    92fc:	00c000c4 	movi	r3,3
    9300:	dfc00615 	stw	ra,24(sp)
    9304:	dc000515 	stw	r16,20(sp)
    9308:	d8c00015 	stw	r3,0(sp)
    930c:	d8800115 	stw	r2,4(sp)
    9310:	2000081e 	bne	r4,zero,9334 <__floatsidf+0x40>
    9314:	00800084 	movi	r2,2
    9318:	d8800015 	stw	r2,0(sp)
    931c:	d809883a 	mov	r4,sp
    9320:	00098c00 	call	98c0 <__pack_d>
    9324:	dfc00617 	ldw	ra,24(sp)
    9328:	dc000517 	ldw	r16,20(sp)
    932c:	dec00704 	addi	sp,sp,28
    9330:	f800283a 	ret
    9334:	00c00f04 	movi	r3,60
    9338:	d8c00215 	stw	r3,8(sp)
    933c:	10000f1e 	bne	r2,zero,937c <__floatsidf+0x88>
    9340:	2021883a 	mov	r16,r4
    9344:	8009883a 	mov	r4,r16
    9348:	00095380 	call	9538 <__clzsi2>
    934c:	11000744 	addi	r4,r2,29
    9350:	0100110e 	bge	zero,r4,9398 <__floatsidf+0xa4>
    9354:	10ffff44 	addi	r3,r2,-3
    9358:	18001216 	blt	r3,zero,93a4 <__floatsidf+0xb0>
    935c:	80c6983a 	sll	r3,r16,r3
    9360:	0009883a 	mov	r4,zero
    9364:	014007c4 	movi	r5,31
    9368:	2885c83a 	sub	r2,r5,r2
    936c:	d9000315 	stw	r4,12(sp)
    9370:	d8c00415 	stw	r3,16(sp)
    9374:	d8800215 	stw	r2,8(sp)
    9378:	003fe806 	br	931c <__floatsidf+0x28>
    937c:	00a00034 	movhi	r2,32768
    9380:	20800e26 	beq	r4,r2,93bc <__floatsidf+0xc8>
    9384:	0121c83a 	sub	r16,zero,r4
    9388:	8009883a 	mov	r4,r16
    938c:	00095380 	call	9538 <__clzsi2>
    9390:	11000744 	addi	r4,r2,29
    9394:	013fef16 	blt	zero,r4,9354 <__floatsidf+0x60>
    9398:	dc000315 	stw	r16,12(sp)
    939c:	d8000415 	stw	zero,16(sp)
    93a0:	003fde06 	br	931c <__floatsidf+0x28>
    93a4:	800ad07a 	srli	r5,r16,1
    93a8:	00c007c4 	movi	r3,31
    93ac:	1907c83a 	sub	r3,r3,r4
    93b0:	28c6d83a 	srl	r3,r5,r3
    93b4:	8108983a 	sll	r4,r16,r4
    93b8:	003fea06 	br	9364 <__floatsidf+0x70>
    93bc:	0005883a 	mov	r2,zero
    93c0:	00f07834 	movhi	r3,49632
    93c4:	003fd706 	br	9324 <__floatsidf+0x30>

000093c8 <__truncdfsf2>:
    93c8:	defff804 	addi	sp,sp,-32
    93cc:	d9000515 	stw	r4,20(sp)
    93d0:	d9400615 	stw	r5,24(sp)
    93d4:	d9000504 	addi	r4,sp,20
    93d8:	d80b883a 	mov	r5,sp
    93dc:	dfc00715 	stw	ra,28(sp)
    93e0:	0009ae40 	call	9ae4 <__unpack_d>
    93e4:	d8800317 	ldw	r2,12(sp)
    93e8:	d8c00417 	ldw	r3,16(sp)
    93ec:	01100034 	movhi	r4,16384
    93f0:	213fffc4 	addi	r4,r4,-1
    93f4:	100ed7ba 	srli	r7,r2,30
    93f8:	180690ba 	slli	r3,r3,2
    93fc:	1104703a 	and	r2,r2,r4
    9400:	19ceb03a 	or	r7,r3,r7
    9404:	10000126 	beq	r2,zero,940c <__truncdfsf2+0x44>
    9408:	39c00054 	ori	r7,r7,1
    940c:	d9000017 	ldw	r4,0(sp)
    9410:	d9400117 	ldw	r5,4(sp)
    9414:	d9800217 	ldw	r6,8(sp)
    9418:	00098940 	call	9894 <__make_fp>
    941c:	dfc00717 	ldw	ra,28(sp)
    9420:	dec00804 	addi	sp,sp,32
    9424:	f800283a 	ret

00009428 <__muldi3>:
    9428:	defff604 	addi	sp,sp,-40
    942c:	dd400515 	stw	r21,20(sp)
    9430:	dd000415 	stw	r20,16(sp)
    9434:	257fffcc 	andi	r21,r4,65535
    9438:	353fffcc 	andi	r20,r6,65535
    943c:	dcc00315 	stw	r19,12(sp)
    9440:	3026d43a 	srli	r19,r6,16
    9444:	dd800615 	stw	r22,24(sp)
    9448:	dc800215 	stw	r18,8(sp)
    944c:	dc400115 	stw	r17,4(sp)
    9450:	2024d43a 	srli	r18,r4,16
    9454:	2023883a 	mov	r17,r4
    9458:	282d883a 	mov	r22,r5
    945c:	a009883a 	mov	r4,r20
    9460:	a80b883a 	mov	r5,r21
    9464:	dfc00915 	stw	ra,36(sp)
    9468:	df000815 	stw	fp,32(sp)
    946c:	ddc00715 	stw	r23,28(sp)
    9470:	3839883a 	mov	fp,r7
    9474:	dc000015 	stw	r16,0(sp)
    9478:	3021883a 	mov	r16,r6
    947c:	0009be80 	call	9be8 <__mulsi3>
    9480:	a80b883a 	mov	r5,r21
    9484:	9809883a 	mov	r4,r19
    9488:	102f883a 	mov	r23,r2
    948c:	0009be80 	call	9be8 <__mulsi3>
    9490:	a009883a 	mov	r4,r20
    9494:	900b883a 	mov	r5,r18
    9498:	102b883a 	mov	r21,r2
    949c:	0009be80 	call	9be8 <__mulsi3>
    94a0:	9809883a 	mov	r4,r19
    94a4:	900b883a 	mov	r5,r18
    94a8:	1029883a 	mov	r20,r2
    94ac:	0009be80 	call	9be8 <__mulsi3>
    94b0:	1007883a 	mov	r3,r2
    94b4:	b804d43a 	srli	r2,r23,16
    94b8:	a549883a 	add	r4,r20,r21
    94bc:	2089883a 	add	r4,r4,r2
    94c0:	2500022e 	bgeu	r4,r20,94cc <__muldi3+0xa4>
    94c4:	00800074 	movhi	r2,1
    94c8:	1887883a 	add	r3,r3,r2
    94cc:	200cd43a 	srli	r6,r4,16
    94d0:	2004943a 	slli	r2,r4,16
    94d4:	e00b883a 	mov	r5,fp
    94d8:	8809883a 	mov	r4,r17
    94dc:	bdffffcc 	andi	r23,r23,65535
    94e0:	19a3883a 	add	r17,r3,r6
    94e4:	15ef883a 	add	r23,r2,r23
    94e8:	0009be80 	call	9be8 <__mulsi3>
    94ec:	8009883a 	mov	r4,r16
    94f0:	b00b883a 	mov	r5,r22
    94f4:	1025883a 	mov	r18,r2
    94f8:	0009be80 	call	9be8 <__mulsi3>
    94fc:	9085883a 	add	r2,r18,r2
    9500:	1447883a 	add	r3,r2,r17
    9504:	b805883a 	mov	r2,r23
    9508:	dfc00917 	ldw	ra,36(sp)
    950c:	df000817 	ldw	fp,32(sp)
    9510:	ddc00717 	ldw	r23,28(sp)
    9514:	dd800617 	ldw	r22,24(sp)
    9518:	dd400517 	ldw	r21,20(sp)
    951c:	dd000417 	ldw	r20,16(sp)
    9520:	dcc00317 	ldw	r19,12(sp)
    9524:	dc800217 	ldw	r18,8(sp)
    9528:	dc400117 	ldw	r17,4(sp)
    952c:	dc000017 	ldw	r16,0(sp)
    9530:	dec00a04 	addi	sp,sp,40
    9534:	f800283a 	ret

00009538 <__clzsi2>:
    9538:	00bfffd4 	movui	r2,65535
    953c:	11000b36 	bltu	r2,r4,956c <__clzsi2+0x34>
    9540:	00803fc4 	movi	r2,255
    9544:	11001e2e 	bgeu	r2,r4,95c0 <__clzsi2+0x88>
    9548:	00c00204 	movi	r3,8
    954c:	20c8d83a 	srl	r4,r4,r3
    9550:	00c00074 	movhi	r3,1
    9554:	18ec8c04 	addi	r3,r3,-19920
    9558:	00800604 	movi	r2,24
    955c:	1909883a 	add	r4,r3,r4
    9560:	20c00003 	ldbu	r3,0(r4)
    9564:	10c5c83a 	sub	r2,r2,r3
    9568:	f800283a 	ret
    956c:	00804034 	movhi	r2,256
    9570:	10bfffc4 	addi	r2,r2,-1
    9574:	11000936 	bltu	r2,r4,959c <__clzsi2+0x64>
    9578:	00800404 	movi	r2,16
    957c:	1007883a 	mov	r3,r2
    9580:	20c8d83a 	srl	r4,r4,r3
    9584:	00c00074 	movhi	r3,1
    9588:	18ec8c04 	addi	r3,r3,-19920
    958c:	1909883a 	add	r4,r3,r4
    9590:	20c00003 	ldbu	r3,0(r4)
    9594:	10c5c83a 	sub	r2,r2,r3
    9598:	f800283a 	ret
    959c:	00c00604 	movi	r3,24
    95a0:	20c8d83a 	srl	r4,r4,r3
    95a4:	00c00074 	movhi	r3,1
    95a8:	18ec8c04 	addi	r3,r3,-19920
    95ac:	00800204 	movi	r2,8
    95b0:	1909883a 	add	r4,r3,r4
    95b4:	20c00003 	ldbu	r3,0(r4)
    95b8:	10c5c83a 	sub	r2,r2,r3
    95bc:	f800283a 	ret
    95c0:	0007883a 	mov	r3,zero
    95c4:	20c8d83a 	srl	r4,r4,r3
    95c8:	00c00074 	movhi	r3,1
    95cc:	18ec8c04 	addi	r3,r3,-19920
    95d0:	00800804 	movi	r2,32
    95d4:	1909883a 	add	r4,r3,r4
    95d8:	20c00003 	ldbu	r3,0(r4)
    95dc:	10c5c83a 	sub	r2,r2,r3
    95e0:	f800283a 	ret

000095e4 <__pack_f>:
    95e4:	21400017 	ldw	r5,0(r4)
    95e8:	01800044 	movi	r6,1
    95ec:	20c00317 	ldw	r3,12(r4)
    95f0:	21c00117 	ldw	r7,4(r4)
    95f4:	3140282e 	bgeu	r6,r5,9698 <__pack_f+0xb4>
    95f8:	00800104 	movi	r2,4
    95fc:	28802326 	beq	r5,r2,968c <__pack_f+0xa8>
    9600:	00800084 	movi	r2,2
    9604:	28800f26 	beq	r5,r2,9644 <__pack_f+0x60>
    9608:	18000e26 	beq	r3,zero,9644 <__pack_f+0x60>
    960c:	21000217 	ldw	r4,8(r4)
    9610:	00bfe084 	movi	r2,-126
    9614:	20802616 	blt	r4,r2,96b0 <__pack_f+0xcc>
    9618:	00801fc4 	movi	r2,127
    961c:	11001b16 	blt	r2,r4,968c <__pack_f+0xa8>
    9620:	188a703a 	and	r5,r3,r2
    9624:	00801004 	movi	r2,64
    9628:	28801126 	beq	r5,r2,9670 <__pack_f+0x8c>
    962c:	18c00fc4 	addi	r3,r3,63
    9630:	18001316 	blt	r3,zero,9680 <__pack_f+0x9c>
    9634:	21001fc4 	addi	r4,r4,127
    9638:	180690ba 	slli	r3,r3,2
    963c:	1806d27a 	srli	r3,r3,9
    9640:	00000206 	br	964c <__pack_f+0x68>
    9644:	0009883a 	mov	r4,zero
    9648:	0007883a 	mov	r3,zero
    964c:	21003fcc 	andi	r4,r4,255
    9650:	200895fa 	slli	r4,r4,23
    9654:	380a97fa 	slli	r5,r7,31
    9658:	00802034 	movhi	r2,128
    965c:	10bfffc4 	addi	r2,r2,-1
    9660:	1886703a 	and	r3,r3,r2
    9664:	1904b03a 	or	r2,r3,r4
    9668:	1144b03a 	or	r2,r2,r5
    966c:	f800283a 	ret
    9670:	1880200c 	andi	r2,r3,128
    9674:	103fee26 	beq	r2,zero,9630 <__pack_f+0x4c>
    9678:	18c01004 	addi	r3,r3,64
    967c:	183fed0e 	bge	r3,zero,9634 <__pack_f+0x50>
    9680:	1806d07a 	srli	r3,r3,1
    9684:	21002004 	addi	r4,r4,128
    9688:	003feb06 	br	9638 <__pack_f+0x54>
    968c:	013fffc4 	movi	r4,-1
    9690:	0007883a 	mov	r3,zero
    9694:	003fed06 	br	964c <__pack_f+0x68>
    9698:	18c00434 	orhi	r3,r3,16
    969c:	00802034 	movhi	r2,128
    96a0:	10bfffc4 	addi	r2,r2,-1
    96a4:	1886703a 	and	r3,r3,r2
    96a8:	013fffc4 	movi	r4,-1
    96ac:	003fe706 	br	964c <__pack_f+0x68>
    96b0:	1105c83a 	sub	r2,r2,r4
    96b4:	01000644 	movi	r4,25
    96b8:	20801216 	blt	r4,r2,9704 <__pack_f+0x120>
    96bc:	3088983a 	sll	r4,r6,r2
    96c0:	1884d83a 	srl	r2,r3,r2
    96c4:	213fffc4 	addi	r4,r4,-1
    96c8:	20c6703a 	and	r3,r4,r3
    96cc:	1806c03a 	cmpne	r3,r3,zero
    96d0:	1884b03a 	or	r2,r3,r2
    96d4:	11001fcc 	andi	r4,r2,127
    96d8:	00c01004 	movi	r3,64
    96dc:	20c00a1e 	bne	r4,r3,9708 <__pack_f+0x124>
    96e0:	10c0200c 	andi	r3,r2,128
    96e4:	18000126 	beq	r3,zero,96ec <__pack_f+0x108>
    96e8:	10801004 	addi	r2,r2,64
    96ec:	100690ba 	slli	r3,r2,2
    96f0:	01100034 	movhi	r4,16384
    96f4:	1105403a 	cmpgeu	r2,r2,r4
    96f8:	1806d27a 	srli	r3,r3,9
    96fc:	1009883a 	mov	r4,r2
    9700:	003fd206 	br	964c <__pack_f+0x68>
    9704:	0005883a 	mov	r2,zero
    9708:	10800fc4 	addi	r2,r2,63
    970c:	003ff706 	br	96ec <__pack_f+0x108>

00009710 <__unpack_f>:
    9710:	20c00017 	ldw	r3,0(r4)
    9714:	00802034 	movhi	r2,128
    9718:	10bfffc4 	addi	r2,r2,-1
    971c:	1808d5fa 	srli	r4,r3,23
    9720:	180cd7fa 	srli	r6,r3,31
    9724:	1884703a 	and	r2,r3,r2
    9728:	21003fcc 	andi	r4,r4,255
    972c:	29800115 	stw	r6,4(r5)
    9730:	2000111e 	bne	r4,zero,9778 <__unpack_f+0x68>
    9734:	10001a26 	beq	r2,zero,97a0 <__unpack_f+0x90>
    9738:	00ffe084 	movi	r3,-126
    973c:	100491fa 	slli	r2,r2,7
    9740:	28c00215 	stw	r3,8(r5)
    9744:	00c000c4 	movi	r3,3
    9748:	28c00015 	stw	r3,0(r5)
    974c:	01900034 	movhi	r6,16384
    9750:	31bfffc4 	addi	r6,r6,-1
    9754:	30801036 	bltu	r6,r2,9798 <__unpack_f+0x88>
    9758:	00ffe044 	movi	r3,-127
    975c:	1085883a 	add	r2,r2,r2
    9760:	1809883a 	mov	r4,r3
    9764:	18ffffc4 	addi	r3,r3,-1
    9768:	30bffc2e 	bgeu	r6,r2,975c <__unpack_f+0x4c>
    976c:	29000215 	stw	r4,8(r5)
    9770:	28800315 	stw	r2,12(r5)
    9774:	f800283a 	ret
    9778:	01803fc4 	movi	r6,255
    977c:	21800b26 	beq	r4,r6,97ac <__unpack_f+0x9c>
    9780:	100491fa 	slli	r2,r2,7
    9784:	213fe044 	addi	r4,r4,-127
    9788:	00c000c4 	movi	r3,3
    978c:	10900034 	orhi	r2,r2,16384
    9790:	29000215 	stw	r4,8(r5)
    9794:	28c00015 	stw	r3,0(r5)
    9798:	28800315 	stw	r2,12(r5)
    979c:	f800283a 	ret
    97a0:	00800084 	movi	r2,2
    97a4:	28800015 	stw	r2,0(r5)
    97a8:	f800283a 	ret
    97ac:	10000526 	beq	r2,zero,97c4 <__unpack_f+0xb4>
    97b0:	18c0042c 	andhi	r3,r3,16
    97b4:	18000626 	beq	r3,zero,97d0 <__unpack_f+0xc0>
    97b8:	00c00044 	movi	r3,1
    97bc:	28c00015 	stw	r3,0(r5)
    97c0:	003ff506 	br	9798 <__unpack_f+0x88>
    97c4:	00800104 	movi	r2,4
    97c8:	28800015 	stw	r2,0(r5)
    97cc:	f800283a 	ret
    97d0:	28000015 	stw	zero,0(r5)
    97d4:	003ff006 	br	9798 <__unpack_f+0x88>

000097d8 <__fpcmp_parts_f>:
    97d8:	20c00017 	ldw	r3,0(r4)
    97dc:	00800044 	movi	r2,1
    97e0:	10c0172e 	bgeu	r2,r3,9840 <__fpcmp_parts_f+0x68>
    97e4:	29800017 	ldw	r6,0(r5)
    97e8:	1180152e 	bgeu	r2,r6,9840 <__fpcmp_parts_f+0x68>
    97ec:	01c00104 	movi	r7,4
    97f0:	19c02326 	beq	r3,r7,9880 <__fpcmp_parts_f+0xa8>
    97f4:	31c00926 	beq	r6,r7,981c <__fpcmp_parts_f+0x44>
    97f8:	01c00084 	movi	r7,2
    97fc:	19c00626 	beq	r3,r7,9818 <__fpcmp_parts_f+0x40>
    9800:	31c01126 	beq	r6,r7,9848 <__fpcmp_parts_f+0x70>
    9804:	20c00117 	ldw	r3,4(r4)
    9808:	29800117 	ldw	r6,4(r5)
    980c:	19801226 	beq	r3,r6,9858 <__fpcmp_parts_f+0x80>
    9810:	1800041e 	bne	r3,zero,9824 <__fpcmp_parts_f+0x4c>
    9814:	f800283a 	ret
    9818:	30c01526 	beq	r6,r3,9870 <__fpcmp_parts_f+0x98>
    981c:	28800117 	ldw	r2,4(r5)
    9820:	1000071e 	bne	r2,zero,9840 <__fpcmp_parts_f+0x68>
    9824:	00bfffc4 	movi	r2,-1
    9828:	f800283a 	ret
    982c:	39801216 	blt	r7,r6,9878 <__fpcmp_parts_f+0xa0>
    9830:	21000317 	ldw	r4,12(r4)
    9834:	28800317 	ldw	r2,12(r5)
    9838:	11000c2e 	bgeu	r2,r4,986c <__fpcmp_parts_f+0x94>
    983c:	183ff91e 	bne	r3,zero,9824 <__fpcmp_parts_f+0x4c>
    9840:	00800044 	movi	r2,1
    9844:	f800283a 	ret
    9848:	20800117 	ldw	r2,4(r4)
    984c:	103ff51e 	bne	r2,zero,9824 <__fpcmp_parts_f+0x4c>
    9850:	00800044 	movi	r2,1
    9854:	f800283a 	ret
    9858:	21c00217 	ldw	r7,8(r4)
    985c:	29800217 	ldw	r6,8(r5)
    9860:	31fff20e 	bge	r6,r7,982c <__fpcmp_parts_f+0x54>
    9864:	183fef1e 	bne	r3,zero,9824 <__fpcmp_parts_f+0x4c>
    9868:	f800283a 	ret
    986c:	20800236 	bltu	r4,r2,9878 <__fpcmp_parts_f+0xa0>
    9870:	0005883a 	mov	r2,zero
    9874:	f800283a 	ret
    9878:	183fea26 	beq	r3,zero,9824 <__fpcmp_parts_f+0x4c>
    987c:	003ff006 	br	9840 <__fpcmp_parts_f+0x68>
    9880:	30fff11e 	bne	r6,r3,9848 <__fpcmp_parts_f+0x70>
    9884:	28c00117 	ldw	r3,4(r5)
    9888:	20800117 	ldw	r2,4(r4)
    988c:	1885c83a 	sub	r2,r3,r2
    9890:	f800283a 	ret

00009894 <__make_fp>:
    9894:	defffb04 	addi	sp,sp,-20
    9898:	d9000015 	stw	r4,0(sp)
    989c:	d809883a 	mov	r4,sp
    98a0:	dfc00415 	stw	ra,16(sp)
    98a4:	d9400115 	stw	r5,4(sp)
    98a8:	d9800215 	stw	r6,8(sp)
    98ac:	d9c00315 	stw	r7,12(sp)
    98b0:	00095e40 	call	95e4 <__pack_f>
    98b4:	dfc00417 	ldw	ra,16(sp)
    98b8:	dec00504 	addi	sp,sp,20
    98bc:	f800283a 	ret

000098c0 <__pack_d>:
    98c0:	20800017 	ldw	r2,0(r4)
    98c4:	defff804 	addi	sp,sp,-32
    98c8:	dcc00315 	stw	r19,12(sp)
    98cc:	dc800215 	stw	r18,8(sp)
    98d0:	dfc00715 	stw	ra,28(sp)
    98d4:	dd800615 	stw	r22,24(sp)
    98d8:	dd400515 	stw	r21,20(sp)
    98dc:	dd000415 	stw	r20,16(sp)
    98e0:	dc400115 	stw	r17,4(sp)
    98e4:	dc000015 	stw	r16,0(sp)
    98e8:	04800044 	movi	r18,1
    98ec:	24400317 	ldw	r17,12(r4)
    98f0:	24000417 	ldw	r16,16(r4)
    98f4:	24c00117 	ldw	r19,4(r4)
    98f8:	9080422e 	bgeu	r18,r2,9a04 <__pack_d+0x144>
    98fc:	00c00104 	movi	r3,4
    9900:	10c03c26 	beq	r2,r3,99f4 <__pack_d+0x134>
    9904:	00c00084 	movi	r3,2
    9908:	10c01926 	beq	r2,r3,9970 <__pack_d+0xb0>
    990c:	8c04b03a 	or	r2,r17,r16
    9910:	10001726 	beq	r2,zero,9970 <__pack_d+0xb0>
    9914:	21000217 	ldw	r4,8(r4)
    9918:	00bf0084 	movi	r2,-1022
    991c:	20804016 	blt	r4,r2,9a20 <__pack_d+0x160>
    9920:	0080ffc4 	movi	r2,1023
    9924:	11003316 	blt	r2,r4,99f4 <__pack_d+0x134>
    9928:	88803fcc 	andi	r2,r17,255
    992c:	00c02004 	movi	r3,128
    9930:	10c02926 	beq	r2,r3,99d8 <__pack_d+0x118>
    9934:	88801fc4 	addi	r2,r17,127
    9938:	1463803a 	cmpltu	r17,r2,r17
    993c:	8c21883a 	add	r16,r17,r16
    9940:	1023883a 	mov	r17,r2
    9944:	00880034 	movhi	r2,8192
    9948:	10bfffc4 	addi	r2,r2,-1
    994c:	14001c36 	bltu	r2,r16,99c0 <__pack_d+0x100>
    9950:	2100ffc4 	addi	r4,r4,1023
    9954:	8006963a 	slli	r3,r16,24
    9958:	8804d23a 	srli	r2,r17,8
    995c:	8020913a 	slli	r16,r16,4
    9960:	2101ffcc 	andi	r4,r4,2047
    9964:	1884b03a 	or	r2,r3,r2
    9968:	8020d33a 	srli	r16,r16,12
    996c:	00000306 	br	997c <__pack_d+0xbc>
    9970:	0009883a 	mov	r4,zero
    9974:	0005883a 	mov	r2,zero
    9978:	0021883a 	mov	r16,zero
    997c:	2008953a 	slli	r4,r4,20
    9980:	982697fa 	slli	r19,r19,31
    9984:	00c00434 	movhi	r3,16
    9988:	18ffffc4 	addi	r3,r3,-1
    998c:	80e0703a 	and	r16,r16,r3
    9990:	8106b03a 	or	r3,r16,r4
    9994:	1cc6b03a 	or	r3,r3,r19
    9998:	dfc00717 	ldw	ra,28(sp)
    999c:	dd800617 	ldw	r22,24(sp)
    99a0:	dd400517 	ldw	r21,20(sp)
    99a4:	dd000417 	ldw	r20,16(sp)
    99a8:	dcc00317 	ldw	r19,12(sp)
    99ac:	dc800217 	ldw	r18,8(sp)
    99b0:	dc400117 	ldw	r17,4(sp)
    99b4:	dc000017 	ldw	r16,0(sp)
    99b8:	dec00804 	addi	sp,sp,32
    99bc:	f800283a 	ret
    99c0:	800697fa 	slli	r3,r16,31
    99c4:	8804d07a 	srli	r2,r17,1
    99c8:	21010004 	addi	r4,r4,1024
    99cc:	8020d07a 	srli	r16,r16,1
    99d0:	18a2b03a 	or	r17,r3,r2
    99d4:	003fdf06 	br	9954 <__pack_d+0x94>
    99d8:	88c0400c 	andi	r3,r17,256
    99dc:	183fd926 	beq	r3,zero,9944 <__pack_d+0x84>
    99e0:	8885883a 	add	r2,r17,r2
    99e4:	1463803a 	cmpltu	r17,r2,r17
    99e8:	8c21883a 	add	r16,r17,r16
    99ec:	1023883a 	mov	r17,r2
    99f0:	003fd406 	br	9944 <__pack_d+0x84>
    99f4:	0101ffc4 	movi	r4,2047
    99f8:	0005883a 	mov	r2,zero
    99fc:	0021883a 	mov	r16,zero
    9a00:	003fde06 	br	997c <__pack_d+0xbc>
    9a04:	84000234 	orhi	r16,r16,8
    9a08:	00c00434 	movhi	r3,16
    9a0c:	18ffffc4 	addi	r3,r3,-1
    9a10:	8805883a 	mov	r2,r17
    9a14:	80e0703a 	and	r16,r16,r3
    9a18:	0101ffc4 	movi	r4,2047
    9a1c:	003fd706 	br	997c <__pack_d+0xbc>
    9a20:	1129c83a 	sub	r20,r2,r4
    9a24:	00800e04 	movi	r2,56
    9a28:	15002716 	blt	r2,r20,9ac8 <__pack_d+0x208>
    9a2c:	800b883a 	mov	r5,r16
    9a30:	a00d883a 	mov	r6,r20
    9a34:	8809883a 	mov	r4,r17
    9a38:	0009c100 	call	9c10 <__lshrdi3>
    9a3c:	9009883a 	mov	r4,r18
    9a40:	000b883a 	mov	r5,zero
    9a44:	a00d883a 	mov	r6,r20
    9a48:	102d883a 	mov	r22,r2
    9a4c:	182b883a 	mov	r21,r3
    9a50:	0009c540 	call	9c54 <__ashldi3>
    9a54:	1009003a 	cmpeq	r4,r2,zero
    9a58:	1907c83a 	sub	r3,r3,r4
    9a5c:	10bfffc4 	addi	r2,r2,-1
    9a60:	1c20703a 	and	r16,r3,r16
    9a64:	1444703a 	and	r2,r2,r17
    9a68:	1404b03a 	or	r2,r2,r16
    9a6c:	1004c03a 	cmpne	r2,r2,zero
    9a70:	1584b03a 	or	r2,r2,r22
    9a74:	11003fcc 	andi	r4,r2,255
    9a78:	01402004 	movi	r5,128
    9a7c:	a807883a 	mov	r3,r21
    9a80:	2140131e 	bne	r4,r5,9ad0 <__pack_d+0x210>
    9a84:	1140400c 	andi	r5,r2,256
    9a88:	28000426 	beq	r5,zero,9a9c <__pack_d+0x1dc>
    9a8c:	1109883a 	add	r4,r2,r4
    9a90:	2085803a 	cmpltu	r2,r4,r2
    9a94:	1547883a 	add	r3,r2,r21
    9a98:	2005883a 	mov	r2,r4
    9a9c:	1808963a 	slli	r4,r3,24
    9aa0:	1004d23a 	srli	r2,r2,8
    9aa4:	1820913a 	slli	r16,r3,4
    9aa8:	01440034 	movhi	r5,4096
    9aac:	297fffc4 	addi	r5,r5,-1
    9ab0:	2084b03a 	or	r2,r4,r2
    9ab4:	8020d33a 	srli	r16,r16,12
    9ab8:	01000044 	movi	r4,1
    9abc:	28ffaf36 	bltu	r5,r3,997c <__pack_d+0xbc>
    9ac0:	0009883a 	mov	r4,zero
    9ac4:	003fad06 	br	997c <__pack_d+0xbc>
    9ac8:	0005883a 	mov	r2,zero
    9acc:	0007883a 	mov	r3,zero
    9ad0:	11001fc4 	addi	r4,r2,127
    9ad4:	2085803a 	cmpltu	r2,r4,r2
    9ad8:	10c7883a 	add	r3,r2,r3
    9adc:	2005883a 	mov	r2,r4
    9ae0:	003fee06 	br	9a9c <__pack_d+0x1dc>

00009ae4 <__unpack_d>:
    9ae4:	21800117 	ldw	r6,4(r4)
    9ae8:	20c00017 	ldw	r3,0(r4)
    9aec:	3004d7fa 	srli	r2,r6,31
    9af0:	3008d53a 	srli	r4,r6,20
    9af4:	28800115 	stw	r2,4(r5)
    9af8:	2101ffcc 	andi	r4,r4,2047
    9afc:	00800434 	movhi	r2,16
    9b00:	10bfffc4 	addi	r2,r2,-1
    9b04:	3084703a 	and	r2,r6,r2
    9b08:	20001a1e 	bne	r4,zero,9b74 <__unpack_d+0x90>
    9b0c:	1888b03a 	or	r4,r3,r2
    9b10:	20002626 	beq	r4,zero,9bac <__unpack_d+0xc8>
    9b14:	1808d63a 	srli	r4,r3,24
    9b18:	1004923a 	slli	r2,r2,8
    9b1c:	01bf0084 	movi	r6,-1022
    9b20:	29800215 	stw	r6,8(r5)
    9b24:	2084b03a 	or	r2,r4,r2
    9b28:	010000c4 	movi	r4,3
    9b2c:	29000015 	stw	r4,0(r5)
    9b30:	02040034 	movhi	r8,4096
    9b34:	423fffc4 	addi	r8,r8,-1
    9b38:	1806923a 	slli	r3,r3,8
    9b3c:	40801836 	bltu	r8,r2,9ba0 <__unpack_d+0xbc>
    9b40:	013f0044 	movi	r4,-1023
    9b44:	18cd883a 	add	r6,r3,r3
    9b48:	30c7803a 	cmpltu	r3,r6,r3
    9b4c:	1085883a 	add	r2,r2,r2
    9b50:	1885883a 	add	r2,r3,r2
    9b54:	200f883a 	mov	r7,r4
    9b58:	3007883a 	mov	r3,r6
    9b5c:	213fffc4 	addi	r4,r4,-1
    9b60:	40bff82e 	bgeu	r8,r2,9b44 <__unpack_d+0x60>
    9b64:	29c00215 	stw	r7,8(r5)
    9b68:	28c00315 	stw	r3,12(r5)
    9b6c:	28800415 	stw	r2,16(r5)
    9b70:	f800283a 	ret
    9b74:	01c1ffc4 	movi	r7,2047
    9b78:	21c00f26 	beq	r4,r7,9bb8 <__unpack_d+0xd4>
    9b7c:	180cd63a 	srli	r6,r3,24
    9b80:	1004923a 	slli	r2,r2,8
    9b84:	213f0044 	addi	r4,r4,-1023
    9b88:	1806923a 	slli	r3,r3,8
    9b8c:	3084b03a 	or	r2,r6,r2
    9b90:	29000215 	stw	r4,8(r5)
    9b94:	010000c4 	movi	r4,3
    9b98:	10840034 	orhi	r2,r2,4096
    9b9c:	29000015 	stw	r4,0(r5)
    9ba0:	28c00315 	stw	r3,12(r5)
    9ba4:	28800415 	stw	r2,16(r5)
    9ba8:	f800283a 	ret
    9bac:	00800084 	movi	r2,2
    9bb0:	28800015 	stw	r2,0(r5)
    9bb4:	f800283a 	ret
    9bb8:	1888b03a 	or	r4,r3,r2
    9bbc:	20000526 	beq	r4,zero,9bd4 <__unpack_d+0xf0>
    9bc0:	3180022c 	andhi	r6,r6,8
    9bc4:	30000626 	beq	r6,zero,9be0 <__unpack_d+0xfc>
    9bc8:	01000044 	movi	r4,1
    9bcc:	29000015 	stw	r4,0(r5)
    9bd0:	003ff306 	br	9ba0 <__unpack_d+0xbc>
    9bd4:	00800104 	movi	r2,4
    9bd8:	28800015 	stw	r2,0(r5)
    9bdc:	f800283a 	ret
    9be0:	28000015 	stw	zero,0(r5)
    9be4:	003fee06 	br	9ba0 <__unpack_d+0xbc>

00009be8 <__mulsi3>:
    9be8:	0005883a 	mov	r2,zero
    9bec:	20000726 	beq	r4,zero,9c0c <__mulsi3+0x24>
    9bf0:	20c0004c 	andi	r3,r4,1
    9bf4:	2008d07a 	srli	r4,r4,1
    9bf8:	18000126 	beq	r3,zero,9c00 <__mulsi3+0x18>
    9bfc:	1145883a 	add	r2,r2,r5
    9c00:	294b883a 	add	r5,r5,r5
    9c04:	203ffa1e 	bne	r4,zero,9bf0 <__mulsi3+0x8>
    9c08:	f800283a 	ret
    9c0c:	f800283a 	ret

00009c10 <__lshrdi3>:
    9c10:	2005883a 	mov	r2,r4
    9c14:	2807883a 	mov	r3,r5
    9c18:	30000826 	beq	r6,zero,9c3c <__lshrdi3+0x2c>
    9c1c:	01000804 	movi	r4,32
    9c20:	2189c83a 	sub	r4,r4,r6
    9c24:	0100060e 	bge	zero,r4,9c40 <__lshrdi3+0x30>
    9c28:	1184d83a 	srl	r2,r2,r6
    9c2c:	2908983a 	sll	r4,r5,r4
    9c30:	298cd83a 	srl	r6,r5,r6
    9c34:	2084b03a 	or	r2,r4,r2
    9c38:	3007883a 	mov	r3,r6
    9c3c:	f800283a 	ret
    9c40:	0105c83a 	sub	r2,zero,r4
    9c44:	000d883a 	mov	r6,zero
    9c48:	2884d83a 	srl	r2,r5,r2
    9c4c:	3007883a 	mov	r3,r6
    9c50:	003ffa06 	br	9c3c <__lshrdi3+0x2c>

00009c54 <__ashldi3>:
    9c54:	2005883a 	mov	r2,r4
    9c58:	2807883a 	mov	r3,r5
    9c5c:	30000826 	beq	r6,zero,9c80 <__ashldi3+0x2c>
    9c60:	01000804 	movi	r4,32
    9c64:	2189c83a 	sub	r4,r4,r6
    9c68:	0100060e 	bge	zero,r4,9c84 <__ashldi3+0x30>
    9c6c:	1108d83a 	srl	r4,r2,r4
    9c70:	2986983a 	sll	r3,r5,r6
    9c74:	118c983a 	sll	r6,r2,r6
    9c78:	20c6b03a 	or	r3,r4,r3
    9c7c:	3005883a 	mov	r2,r6
    9c80:	f800283a 	ret
    9c84:	0107c83a 	sub	r3,zero,r4
    9c88:	000d883a 	mov	r6,zero
    9c8c:	10c6983a 	sll	r3,r2,r3
    9c90:	3005883a 	mov	r2,r6
    9c94:	003ffa06 	br	9c80 <__ashldi3+0x2c>

00009c98 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9c98:	defffc04 	addi	sp,sp,-16
    9c9c:	df000315 	stw	fp,12(sp)
    9ca0:	df000304 	addi	fp,sp,12
    9ca4:	e13ffd15 	stw	r4,-12(fp)
    9ca8:	e17ffe15 	stw	r5,-8(fp)
    9cac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9cb0:	e0fffe17 	ldw	r3,-8(fp)
    9cb4:	e0bffd17 	ldw	r2,-12(fp)
    9cb8:	18800e26 	beq	r3,r2,9cf4 <alt_load_section+0x5c>
  {
    while( to != end )
    9cbc:	00000a06 	br	9ce8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    9cc0:	e0bffd17 	ldw	r2,-12(fp)
    9cc4:	10c00017 	ldw	r3,0(r2)
    9cc8:	e0bffe17 	ldw	r2,-8(fp)
    9ccc:	10c00015 	stw	r3,0(r2)
    9cd0:	e0bffe17 	ldw	r2,-8(fp)
    9cd4:	10800104 	addi	r2,r2,4
    9cd8:	e0bffe15 	stw	r2,-8(fp)
    9cdc:	e0bffd17 	ldw	r2,-12(fp)
    9ce0:	10800104 	addi	r2,r2,4
    9ce4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9ce8:	e0fffe17 	ldw	r3,-8(fp)
    9cec:	e0bfff17 	ldw	r2,-4(fp)
    9cf0:	18bff31e 	bne	r3,r2,9cc0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9cf4:	e037883a 	mov	sp,fp
    9cf8:	df000017 	ldw	fp,0(sp)
    9cfc:	dec00104 	addi	sp,sp,4
    9d00:	f800283a 	ret

00009d04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9d04:	defffe04 	addi	sp,sp,-8
    9d08:	dfc00115 	stw	ra,4(sp)
    9d0c:	df000015 	stw	fp,0(sp)
    9d10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9d14:	01000074 	movhi	r4,1
    9d18:	212d9704 	addi	r4,r4,-18852
    9d1c:	01400074 	movhi	r5,1
    9d20:	296cd904 	addi	r5,r5,-19612
    9d24:	01800074 	movhi	r6,1
    9d28:	31ad9704 	addi	r6,r6,-18852
    9d2c:	0009c980 	call	9c98 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9d30:	01000074 	movhi	r4,1
    9d34:	21200804 	addi	r4,r4,-32736
    9d38:	01400074 	movhi	r5,1
    9d3c:	29600804 	addi	r5,r5,-32736
    9d40:	01800074 	movhi	r6,1
    9d44:	31a00804 	addi	r6,r6,-32736
    9d48:	0009c980 	call	9c98 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9d4c:	01000074 	movhi	r4,1
    9d50:	212c8304 	addi	r4,r4,-19956
    9d54:	01400074 	movhi	r5,1
    9d58:	296c8304 	addi	r5,r5,-19956
    9d5c:	01800074 	movhi	r6,1
    9d60:	31acd904 	addi	r6,r6,-19612
    9d64:	0009c980 	call	9c98 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9d68:	000a3880 	call	a388 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9d6c:	000a5780 	call	a578 <alt_icache_flush_all>
}
    9d70:	e037883a 	mov	sp,fp
    9d74:	dfc00117 	ldw	ra,4(sp)
    9d78:	df000017 	ldw	fp,0(sp)
    9d7c:	dec00204 	addi	sp,sp,8
    9d80:	f800283a 	ret

00009d84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9d84:	defffd04 	addi	sp,sp,-12
    9d88:	dfc00215 	stw	ra,8(sp)
    9d8c:	df000115 	stw	fp,4(sp)
    9d90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9d94:	0009883a 	mov	r4,zero
    9d98:	0009e640 	call	9e64 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9d9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9da0:	0009e980 	call	9e98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9da4:	01000074 	movhi	r4,1
    9da8:	212ccc04 	addi	r4,r4,-19664
    9dac:	01400074 	movhi	r5,1
    9db0:	296ccc04 	addi	r5,r5,-19664
    9db4:	01800074 	movhi	r6,1
    9db8:	31accc04 	addi	r6,r6,-19664
    9dbc:	000a6740 	call	a674 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    9dc0:	000a4c00 	call	a4c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9dc4:	01000074 	movhi	r4,1
    9dc8:	21294704 	addi	r4,r4,-23268
    9dcc:	000ac9c0 	call	ac9c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9dd0:	d120cf17 	ldw	r4,-31940(gp)
    9dd4:	d0e0d017 	ldw	r3,-31936(gp)
    9dd8:	d0a0d117 	ldw	r2,-31932(gp)
    9ddc:	180b883a 	mov	r5,r3
    9de0:	100d883a 	mov	r6,r2
    9de4:	00087e80 	call	87e8 <main>
    9de8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9dec:	01000044 	movi	r4,1
    9df0:	000a2bc0 	call	a2bc <close>
  exit (result);
    9df4:	e13fff17 	ldw	r4,-4(fp)
    9df8:	000acb00 	call	acb0 <exit>

00009dfc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    9dfc:	defffd04 	addi	sp,sp,-12
    9e00:	dfc00215 	stw	ra,8(sp)
    9e04:	df000115 	stw	fp,4(sp)
    9e08:	df000104 	addi	fp,sp,4
    9e0c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9e10:	e13fff17 	ldw	r4,-4(fp)
    9e14:	000a1180 	call	a118 <alt_busy_sleep>
}
    9e18:	e037883a 	mov	sp,fp
    9e1c:	dfc00117 	ldw	ra,4(sp)
    9e20:	df000017 	ldw	fp,0(sp)
    9e24:	dec00204 	addi	sp,sp,8
    9e28:	f800283a 	ret

00009e2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9e2c:	defffd04 	addi	sp,sp,-12
    9e30:	dfc00215 	stw	ra,8(sp)
    9e34:	df000115 	stw	fp,4(sp)
    9e38:	df000104 	addi	fp,sp,4
    9e3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9e40:	e13fff17 	ldw	r4,-4(fp)
    9e44:	01400074 	movhi	r5,1
    9e48:	296d9104 	addi	r5,r5,-18876
    9e4c:	000a4200 	call	a420 <alt_dev_llist_insert>
}
    9e50:	e037883a 	mov	sp,fp
    9e54:	dfc00117 	ldw	ra,4(sp)
    9e58:	df000017 	ldw	fp,0(sp)
    9e5c:	dec00204 	addi	sp,sp,8
    9e60:	f800283a 	ret

00009e64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9e64:	defffd04 	addi	sp,sp,-12
    9e68:	dfc00215 	stw	ra,8(sp)
    9e6c:	df000115 	stw	fp,4(sp)
    9e70:	df000104 	addi	fp,sp,4
    9e74:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    9e78:	000aa040 	call	aa04 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9e7c:	00800044 	movi	r2,1
    9e80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9e84:	e037883a 	mov	sp,fp
    9e88:	dfc00117 	ldw	ra,4(sp)
    9e8c:	df000017 	ldw	fp,0(sp)
    9e90:	dec00204 	addi	sp,sp,8
    9e94:	f800283a 	ret

00009e98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9e98:	defffe04 	addi	sp,sp,-8
    9e9c:	dfc00115 	stw	ra,4(sp)
    9ea0:	df000015 	stw	fp,0(sp)
    9ea4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9ea8:	01000074 	movhi	r4,1
    9eac:	212cd904 	addi	r4,r4,-19612
    9eb0:	0009e2c0 	call	9e2c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    9eb4:	0001883a 	nop
}
    9eb8:	e037883a 	mov	sp,fp
    9ebc:	dfc00117 	ldw	ra,4(sp)
    9ec0:	df000017 	ldw	fp,0(sp)
    9ec4:	dec00204 	addi	sp,sp,8
    9ec8:	f800283a 	ret

00009ecc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9ecc:	defffa04 	addi	sp,sp,-24
    9ed0:	dfc00515 	stw	ra,20(sp)
    9ed4:	df000415 	stw	fp,16(sp)
    9ed8:	df000404 	addi	fp,sp,16
    9edc:	e13ffd15 	stw	r4,-12(fp)
    9ee0:	e17ffe15 	stw	r5,-8(fp)
    9ee4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9ee8:	e0bffd17 	ldw	r2,-12(fp)
    9eec:	10800017 	ldw	r2,0(r2)
    9ef0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9ef4:	e0bffc17 	ldw	r2,-16(fp)
    9ef8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9efc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9f00:	10800217 	ldw	r2,8(r2)
    9f04:	1809883a 	mov	r4,r3
    9f08:	e17ffe17 	ldw	r5,-8(fp)
    9f0c:	e1bfff17 	ldw	r6,-4(fp)
    9f10:	100f883a 	mov	r7,r2
    9f14:	0009f8c0 	call	9f8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9f18:	e037883a 	mov	sp,fp
    9f1c:	dfc00117 	ldw	ra,4(sp)
    9f20:	df000017 	ldw	fp,0(sp)
    9f24:	dec00204 	addi	sp,sp,8
    9f28:	f800283a 	ret

00009f2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9f2c:	defffa04 	addi	sp,sp,-24
    9f30:	dfc00515 	stw	ra,20(sp)
    9f34:	df000415 	stw	fp,16(sp)
    9f38:	df000404 	addi	fp,sp,16
    9f3c:	e13ffd15 	stw	r4,-12(fp)
    9f40:	e17ffe15 	stw	r5,-8(fp)
    9f44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9f48:	e0bffd17 	ldw	r2,-12(fp)
    9f4c:	10800017 	ldw	r2,0(r2)
    9f50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9f54:	e0bffc17 	ldw	r2,-16(fp)
    9f58:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9f5c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9f60:	10800217 	ldw	r2,8(r2)
    9f64:	1809883a 	mov	r4,r3
    9f68:	e17ffe17 	ldw	r5,-8(fp)
    9f6c:	e1bfff17 	ldw	r6,-4(fp)
    9f70:	100f883a 	mov	r7,r2
    9f74:	000a0800 	call	a080 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9f78:	e037883a 	mov	sp,fp
    9f7c:	dfc00117 	ldw	ra,4(sp)
    9f80:	df000017 	ldw	fp,0(sp)
    9f84:	dec00204 	addi	sp,sp,8
    9f88:	f800283a 	ret

00009f8c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9f8c:	defff704 	addi	sp,sp,-36
    9f90:	df000815 	stw	fp,32(sp)
    9f94:	df000804 	addi	fp,sp,32
    9f98:	e13ffc15 	stw	r4,-16(fp)
    9f9c:	e17ffd15 	stw	r5,-12(fp)
    9fa0:	e1bffe15 	stw	r6,-8(fp)
    9fa4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9fa8:	e0bffc17 	ldw	r2,-16(fp)
    9fac:	10800017 	ldw	r2,0(r2)
    9fb0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9fb4:	e0bffd17 	ldw	r2,-12(fp)
    9fb8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9fbc:	e0bffe17 	ldw	r2,-8(fp)
    9fc0:	e0fffd17 	ldw	r3,-12(fp)
    9fc4:	1885883a 	add	r2,r3,r2
    9fc8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9fcc:	00001406 	br	a020 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9fd0:	e0bff917 	ldw	r2,-28(fp)
    9fd4:	10800037 	ldwio	r2,0(r2)
    9fd8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9fdc:	e0bffb17 	ldw	r2,-20(fp)
    9fe0:	10a0000c 	andi	r2,r2,32768
    9fe4:	10000826 	beq	r2,zero,a008 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9fe8:	e0bffb17 	ldw	r2,-20(fp)
    9fec:	1007883a 	mov	r3,r2
    9ff0:	e0bff817 	ldw	r2,-32(fp)
    9ff4:	10c00005 	stb	r3,0(r2)
    9ff8:	e0bff817 	ldw	r2,-32(fp)
    9ffc:	10800044 	addi	r2,r2,1
    a000:	e0bff815 	stw	r2,-32(fp)
    a004:	00000606 	br	a020 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    a008:	e0fff817 	ldw	r3,-32(fp)
    a00c:	e0bffd17 	ldw	r2,-12(fp)
    a010:	1880071e 	bne	r3,r2,a030 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    a014:	e0bfff17 	ldw	r2,-4(fp)
    a018:	1090000c 	andi	r2,r2,16384
    a01c:	1000061e 	bne	r2,zero,a038 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    a020:	e0fff817 	ldw	r3,-32(fp)
    a024:	e0bffa17 	ldw	r2,-24(fp)
    a028:	18bfe936 	bltu	r3,r2,9fd0 <altera_avalon_jtag_uart_read+0x44>
    a02c:	00000306 	br	a03c <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    a030:	0001883a 	nop
    a034:	00000106 	br	a03c <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    a038:	0001883a 	nop
    
  }

  if (ptr != buffer)
    a03c:	e0fff817 	ldw	r3,-32(fp)
    a040:	e0bffd17 	ldw	r2,-12(fp)
    a044:	18800426 	beq	r3,r2,a058 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    a048:	e0fff817 	ldw	r3,-32(fp)
    a04c:	e0bffd17 	ldw	r2,-12(fp)
    a050:	1885c83a 	sub	r2,r3,r2
    a054:	00000606 	br	a070 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    a058:	e0bfff17 	ldw	r2,-4(fp)
    a05c:	1090000c 	andi	r2,r2,16384
    a060:	10000226 	beq	r2,zero,a06c <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    a064:	00bffd44 	movi	r2,-11
    a068:	00000106 	br	a070 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    a06c:	00bffec4 	movi	r2,-5
}
    a070:	e037883a 	mov	sp,fp
    a074:	df000017 	ldw	fp,0(sp)
    a078:	dec00104 	addi	sp,sp,4
    a07c:	f800283a 	ret

0000a080 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a080:	defff904 	addi	sp,sp,-28
    a084:	df000615 	stw	fp,24(sp)
    a088:	df000604 	addi	fp,sp,24
    a08c:	e13ffc15 	stw	r4,-16(fp)
    a090:	e17ffd15 	stw	r5,-12(fp)
    a094:	e1bffe15 	stw	r6,-8(fp)
    a098:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    a09c:	e0bffc17 	ldw	r2,-16(fp)
    a0a0:	10800017 	ldw	r2,0(r2)
    a0a4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    a0a8:	e0bffe17 	ldw	r2,-8(fp)
    a0ac:	e0fffd17 	ldw	r3,-12(fp)
    a0b0:	1885883a 	add	r2,r3,r2
    a0b4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    a0b8:	00000f06 	br	a0f8 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    a0bc:	e0bffa17 	ldw	r2,-24(fp)
    a0c0:	10800104 	addi	r2,r2,4
    a0c4:	10800037 	ldwio	r2,0(r2)
    a0c8:	10bfffec 	andhi	r2,r2,65535
    a0cc:	10000a26 	beq	r2,zero,a0f8 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    a0d0:	e0bffa17 	ldw	r2,-24(fp)
    a0d4:	e0fffd17 	ldw	r3,-12(fp)
    a0d8:	18c00003 	ldbu	r3,0(r3)
    a0dc:	18c03fcc 	andi	r3,r3,255
    a0e0:	18c0201c 	xori	r3,r3,128
    a0e4:	18ffe004 	addi	r3,r3,-128
    a0e8:	e13ffd17 	ldw	r4,-12(fp)
    a0ec:	21000044 	addi	r4,r4,1
    a0f0:	e13ffd15 	stw	r4,-12(fp)
    a0f4:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    a0f8:	e0fffd17 	ldw	r3,-12(fp)
    a0fc:	e0bffb17 	ldw	r2,-20(fp)
    a100:	18bfee36 	bltu	r3,r2,a0bc <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    a104:	e0bffe17 	ldw	r2,-8(fp)
}
    a108:	e037883a 	mov	sp,fp
    a10c:	df000017 	ldw	fp,0(sp)
    a110:	dec00104 	addi	sp,sp,4
    a114:	f800283a 	ret

0000a118 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    a118:	defffa04 	addi	sp,sp,-24
    a11c:	dfc00515 	stw	ra,20(sp)
    a120:	df000415 	stw	fp,16(sp)
    a124:	df000404 	addi	fp,sp,16
    a128:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    a12c:	00800244 	movi	r2,9
    a130:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    a134:	e13ffd17 	ldw	r4,-12(fp)
    a138:	014003f4 	movhi	r5,15
    a13c:	29509004 	addi	r5,r5,16960
    a140:	0009be80 	call	9be8 <__mulsi3>
    a144:	0100bef4 	movhi	r4,763
    a148:	213c2004 	addi	r4,r4,-3968
    a14c:	100b883a 	mov	r5,r2
    a150:	000b1c00 	call	b1c0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    a154:	01200034 	movhi	r4,32768
    a158:	213fffc4 	addi	r4,r4,-1
    a15c:	100b883a 	mov	r5,r2
    a160:	000b1c00 	call	b1c0 <__udivsi3>
    a164:	e13fff17 	ldw	r4,-4(fp)
    a168:	100b883a 	mov	r5,r2
    a16c:	000b1c00 	call	b1c0 <__udivsi3>
    a170:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    a174:	e0bffe17 	ldw	r2,-8(fp)
    a178:	10002926 	beq	r2,zero,a220 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    a17c:	e03ffc15 	stw	zero,-16(fp)
    a180:	00001606 	br	a1dc <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    a184:	00a00034 	movhi	r2,32768
    a188:	10bfffc4 	addi	r2,r2,-1
    a18c:	10bfffc4 	addi	r2,r2,-1
    a190:	103ffe1e 	bne	r2,zero,a18c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    a194:	e13ffd17 	ldw	r4,-12(fp)
    a198:	014003f4 	movhi	r5,15
    a19c:	29509004 	addi	r5,r5,16960
    a1a0:	0009be80 	call	9be8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    a1a4:	0100bef4 	movhi	r4,763
    a1a8:	213c2004 	addi	r4,r4,-3968
    a1ac:	100b883a 	mov	r5,r2
    a1b0:	000b1c00 	call	b1c0 <__udivsi3>
    a1b4:	01200034 	movhi	r4,32768
    a1b8:	213fffc4 	addi	r4,r4,-1
    a1bc:	100b883a 	mov	r5,r2
    a1c0:	000b1c00 	call	b1c0 <__udivsi3>
    a1c4:	e0ffff17 	ldw	r3,-4(fp)
    a1c8:	1885c83a 	sub	r2,r3,r2
    a1cc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    a1d0:	e0bffc17 	ldw	r2,-16(fp)
    a1d4:	10800044 	addi	r2,r2,1
    a1d8:	e0bffc15 	stw	r2,-16(fp)
    a1dc:	e0fffc17 	ldw	r3,-16(fp)
    a1e0:	e0bffe17 	ldw	r2,-8(fp)
    a1e4:	18bfe716 	blt	r3,r2,a184 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    a1e8:	e13ffd17 	ldw	r4,-12(fp)
    a1ec:	014003f4 	movhi	r5,15
    a1f0:	29509004 	addi	r5,r5,16960
    a1f4:	0009be80 	call	9be8 <__mulsi3>
    a1f8:	0100bef4 	movhi	r4,763
    a1fc:	213c2004 	addi	r4,r4,-3968
    a200:	100b883a 	mov	r5,r2
    a204:	000b1c00 	call	b1c0 <__udivsi3>
    a208:	1009883a 	mov	r4,r2
    a20c:	e17fff17 	ldw	r5,-4(fp)
    a210:	0009be80 	call	9be8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    a214:	10bfffc4 	addi	r2,r2,-1
    a218:	103ffe1e 	bne	r2,zero,a214 <alt_busy_sleep+0xfc>
    a21c:	00000d06 	br	a254 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    a220:	e13ffd17 	ldw	r4,-12(fp)
    a224:	014003f4 	movhi	r5,15
    a228:	29509004 	addi	r5,r5,16960
    a22c:	0009be80 	call	9be8 <__mulsi3>
    a230:	0100bef4 	movhi	r4,763
    a234:	213c2004 	addi	r4,r4,-3968
    a238:	100b883a 	mov	r5,r2
    a23c:	000b1c00 	call	b1c0 <__udivsi3>
    a240:	1009883a 	mov	r4,r2
    a244:	e17fff17 	ldw	r5,-4(fp)
    a248:	0009be80 	call	9be8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    a24c:	10bfffc4 	addi	r2,r2,-1
    a250:	00bffe16 	blt	zero,r2,a24c <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    a254:	0005883a 	mov	r2,zero
}
    a258:	e037883a 	mov	sp,fp
    a25c:	dfc00117 	ldw	ra,4(sp)
    a260:	df000017 	ldw	fp,0(sp)
    a264:	dec00204 	addi	sp,sp,8
    a268:	f800283a 	ret

0000a26c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a26c:	defffe04 	addi	sp,sp,-8
    a270:	dfc00115 	stw	ra,4(sp)
    a274:	df000015 	stw	fp,0(sp)
    a278:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a27c:	00800074 	movhi	r2,1
    a280:	10ad9404 	addi	r2,r2,-18864
    a284:	10800017 	ldw	r2,0(r2)
    a288:	10000526 	beq	r2,zero,a2a0 <alt_get_errno+0x34>
    a28c:	00800074 	movhi	r2,1
    a290:	10ad9404 	addi	r2,r2,-18864
    a294:	10800017 	ldw	r2,0(r2)
    a298:	103ee83a 	callr	r2
    a29c:	00000206 	br	a2a8 <alt_get_errno+0x3c>
    a2a0:	00800074 	movhi	r2,1
    a2a4:	10ae5804 	addi	r2,r2,-18080
}
    a2a8:	e037883a 	mov	sp,fp
    a2ac:	dfc00117 	ldw	ra,4(sp)
    a2b0:	df000017 	ldw	fp,0(sp)
    a2b4:	dec00204 	addi	sp,sp,8
    a2b8:	f800283a 	ret

0000a2bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a2bc:	defffb04 	addi	sp,sp,-20
    a2c0:	dfc00415 	stw	ra,16(sp)
    a2c4:	df000315 	stw	fp,12(sp)
    a2c8:	df000304 	addi	fp,sp,12
    a2cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a2d0:	e0bfff17 	ldw	r2,-4(fp)
    a2d4:	10000716 	blt	r2,zero,a2f4 <close+0x38>
    a2d8:	e13fff17 	ldw	r4,-4(fp)
    a2dc:	01400304 	movi	r5,12
    a2e0:	0009be80 	call	9be8 <__mulsi3>
    a2e4:	00c00074 	movhi	r3,1
    a2e8:	18ecee04 	addi	r3,r3,-19528
    a2ec:	10c5883a 	add	r2,r2,r3
    a2f0:	00000106 	br	a2f8 <close+0x3c>
    a2f4:	0005883a 	mov	r2,zero
    a2f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    a2fc:	e0bffd17 	ldw	r2,-12(fp)
    a300:	10001826 	beq	r2,zero,a364 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a304:	e0bffd17 	ldw	r2,-12(fp)
    a308:	10800017 	ldw	r2,0(r2)
    a30c:	10800417 	ldw	r2,16(r2)
    a310:	10000626 	beq	r2,zero,a32c <close+0x70>
    a314:	e0bffd17 	ldw	r2,-12(fp)
    a318:	10800017 	ldw	r2,0(r2)
    a31c:	10800417 	ldw	r2,16(r2)
    a320:	e13ffd17 	ldw	r4,-12(fp)
    a324:	103ee83a 	callr	r2
    a328:	00000106 	br	a330 <close+0x74>
    a32c:	0005883a 	mov	r2,zero
    a330:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a334:	e13fff17 	ldw	r4,-4(fp)
    a338:	000a9840 	call	a984 <alt_release_fd>
    if (rval < 0)
    a33c:	e0bffe17 	ldw	r2,-8(fp)
    a340:	1000060e 	bge	r2,zero,a35c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    a344:	000a26c0 	call	a26c <alt_get_errno>
    a348:	e0fffe17 	ldw	r3,-8(fp)
    a34c:	00c7c83a 	sub	r3,zero,r3
    a350:	10c00015 	stw	r3,0(r2)
      return -1;
    a354:	00bfffc4 	movi	r2,-1
    a358:	00000606 	br	a374 <close+0xb8>
    }
    return 0;
    a35c:	0005883a 	mov	r2,zero
    a360:	00000406 	br	a374 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a364:	000a26c0 	call	a26c <alt_get_errno>
    a368:	00c01444 	movi	r3,81
    a36c:	10c00015 	stw	r3,0(r2)
    return -1;
    a370:	00bfffc4 	movi	r2,-1
  }
}
    a374:	e037883a 	mov	sp,fp
    a378:	dfc00117 	ldw	ra,4(sp)
    a37c:	df000017 	ldw	fp,0(sp)
    a380:	dec00204 	addi	sp,sp,8
    a384:	f800283a 	ret

0000a388 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    a388:	deffff04 	addi	sp,sp,-4
    a38c:	df000015 	stw	fp,0(sp)
    a390:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    a394:	e037883a 	mov	sp,fp
    a398:	df000017 	ldw	fp,0(sp)
    a39c:	dec00104 	addi	sp,sp,4
    a3a0:	f800283a 	ret

0000a3a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a3a4:	defffc04 	addi	sp,sp,-16
    a3a8:	df000315 	stw	fp,12(sp)
    a3ac:	df000304 	addi	fp,sp,12
    a3b0:	e13ffd15 	stw	r4,-12(fp)
    a3b4:	e17ffe15 	stw	r5,-8(fp)
    a3b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a3bc:	e0bfff17 	ldw	r2,-4(fp)
}
    a3c0:	e037883a 	mov	sp,fp
    a3c4:	df000017 	ldw	fp,0(sp)
    a3c8:	dec00104 	addi	sp,sp,4
    a3cc:	f800283a 	ret

0000a3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a3d0:	defffe04 	addi	sp,sp,-8
    a3d4:	dfc00115 	stw	ra,4(sp)
    a3d8:	df000015 	stw	fp,0(sp)
    a3dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a3e0:	00800074 	movhi	r2,1
    a3e4:	10ad9404 	addi	r2,r2,-18864
    a3e8:	10800017 	ldw	r2,0(r2)
    a3ec:	10000526 	beq	r2,zero,a404 <alt_get_errno+0x34>
    a3f0:	00800074 	movhi	r2,1
    a3f4:	10ad9404 	addi	r2,r2,-18864
    a3f8:	10800017 	ldw	r2,0(r2)
    a3fc:	103ee83a 	callr	r2
    a400:	00000206 	br	a40c <alt_get_errno+0x3c>
    a404:	00800074 	movhi	r2,1
    a408:	10ae5804 	addi	r2,r2,-18080
}
    a40c:	e037883a 	mov	sp,fp
    a410:	dfc00117 	ldw	ra,4(sp)
    a414:	df000017 	ldw	fp,0(sp)
    a418:	dec00204 	addi	sp,sp,8
    a41c:	f800283a 	ret

0000a420 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    a420:	defffa04 	addi	sp,sp,-24
    a424:	dfc00515 	stw	ra,20(sp)
    a428:	df000415 	stw	fp,16(sp)
    a42c:	df000404 	addi	fp,sp,16
    a430:	e13ffe15 	stw	r4,-8(fp)
    a434:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    a438:	e0bffe17 	ldw	r2,-8(fp)
    a43c:	10000326 	beq	r2,zero,a44c <alt_dev_llist_insert+0x2c>
    a440:	e0bffe17 	ldw	r2,-8(fp)
    a444:	10800217 	ldw	r2,8(r2)
    a448:	1000051e 	bne	r2,zero,a460 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    a44c:	000a3d00 	call	a3d0 <alt_get_errno>
    a450:	00c00584 	movi	r3,22
    a454:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    a458:	00bffa84 	movi	r2,-22
    a45c:	00001306 	br	a4ac <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    a460:	e0bffe17 	ldw	r2,-8(fp)
    a464:	e0ffff17 	ldw	r3,-4(fp)
    a468:	e0fffc15 	stw	r3,-16(fp)
    a46c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a470:	e0bffd17 	ldw	r2,-12(fp)
    a474:	e0fffc17 	ldw	r3,-16(fp)
    a478:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    a47c:	e0bffc17 	ldw	r2,-16(fp)
    a480:	10c00017 	ldw	r3,0(r2)
    a484:	e0bffd17 	ldw	r2,-12(fp)
    a488:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a48c:	e0bffc17 	ldw	r2,-16(fp)
    a490:	10800017 	ldw	r2,0(r2)
    a494:	e0fffd17 	ldw	r3,-12(fp)
    a498:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    a49c:	e0bffc17 	ldw	r2,-16(fp)
    a4a0:	e0fffd17 	ldw	r3,-12(fp)
    a4a4:	10c00015 	stw	r3,0(r2)

  return 0;  
    a4a8:	0005883a 	mov	r2,zero
}
    a4ac:	e037883a 	mov	sp,fp
    a4b0:	dfc00117 	ldw	ra,4(sp)
    a4b4:	df000017 	ldw	fp,0(sp)
    a4b8:	dec00204 	addi	sp,sp,8
    a4bc:	f800283a 	ret

0000a4c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    a4c0:	defffd04 	addi	sp,sp,-12
    a4c4:	dfc00215 	stw	ra,8(sp)
    a4c8:	df000115 	stw	fp,4(sp)
    a4cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a4d0:	00800074 	movhi	r2,1
    a4d4:	10ac8204 	addi	r2,r2,-19960
    a4d8:	e0bfff15 	stw	r2,-4(fp)
    a4dc:	00000606 	br	a4f8 <_do_ctors+0x38>
        (*ctor) (); 
    a4e0:	e0bfff17 	ldw	r2,-4(fp)
    a4e4:	10800017 	ldw	r2,0(r2)
    a4e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a4ec:	e0bfff17 	ldw	r2,-4(fp)
    a4f0:	10bfff04 	addi	r2,r2,-4
    a4f4:	e0bfff15 	stw	r2,-4(fp)
    a4f8:	e0ffff17 	ldw	r3,-4(fp)
    a4fc:	00800074 	movhi	r2,1
    a500:	10ac8304 	addi	r2,r2,-19956
    a504:	18bff62e 	bgeu	r3,r2,a4e0 <_do_ctors+0x20>
        (*ctor) (); 
}
    a508:	e037883a 	mov	sp,fp
    a50c:	dfc00117 	ldw	ra,4(sp)
    a510:	df000017 	ldw	fp,0(sp)
    a514:	dec00204 	addi	sp,sp,8
    a518:	f800283a 	ret

0000a51c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    a51c:	defffd04 	addi	sp,sp,-12
    a520:	dfc00215 	stw	ra,8(sp)
    a524:	df000115 	stw	fp,4(sp)
    a528:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a52c:	00800074 	movhi	r2,1
    a530:	10ac8204 	addi	r2,r2,-19960
    a534:	e0bfff15 	stw	r2,-4(fp)
    a538:	00000606 	br	a554 <_do_dtors+0x38>
        (*dtor) (); 
    a53c:	e0bfff17 	ldw	r2,-4(fp)
    a540:	10800017 	ldw	r2,0(r2)
    a544:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a548:	e0bfff17 	ldw	r2,-4(fp)
    a54c:	10bfff04 	addi	r2,r2,-4
    a550:	e0bfff15 	stw	r2,-4(fp)
    a554:	e0ffff17 	ldw	r3,-4(fp)
    a558:	00800074 	movhi	r2,1
    a55c:	10ac8304 	addi	r2,r2,-19956
    a560:	18bff62e 	bgeu	r3,r2,a53c <_do_dtors+0x20>
        (*dtor) (); 
}
    a564:	e037883a 	mov	sp,fp
    a568:	dfc00117 	ldw	ra,4(sp)
    a56c:	df000017 	ldw	fp,0(sp)
    a570:	dec00204 	addi	sp,sp,8
    a574:	f800283a 	ret

0000a578 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a578:	deffff04 	addi	sp,sp,-4
    a57c:	df000015 	stw	fp,0(sp)
    a580:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    a584:	e037883a 	mov	sp,fp
    a588:	df000017 	ldw	fp,0(sp)
    a58c:	dec00104 	addi	sp,sp,4
    a590:	f800283a 	ret

0000a594 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a594:	defff804 	addi	sp,sp,-32
    a598:	dfc00715 	stw	ra,28(sp)
    a59c:	df000615 	stw	fp,24(sp)
    a5a0:	dc000515 	stw	r16,20(sp)
    a5a4:	df000504 	addi	fp,sp,20
    a5a8:	e13ffc15 	stw	r4,-16(fp)
    a5ac:	e17ffd15 	stw	r5,-12(fp)
    a5b0:	e1bffe15 	stw	r6,-8(fp)
    a5b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a5b8:	e13ffd17 	ldw	r4,-12(fp)
    a5bc:	e17ffe17 	ldw	r5,-8(fp)
    a5c0:	e1bfff17 	ldw	r6,-4(fp)
    a5c4:	000a82c0 	call	a82c <open>
    a5c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a5cc:	e0bffb17 	ldw	r2,-20(fp)
    a5d0:	10002216 	blt	r2,zero,a65c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    a5d4:	04000074 	movhi	r16,1
    a5d8:	842cee04 	addi	r16,r16,-19528
    a5dc:	e0bffb17 	ldw	r2,-20(fp)
    a5e0:	1009883a 	mov	r4,r2
    a5e4:	01400304 	movi	r5,12
    a5e8:	0009be80 	call	9be8 <__mulsi3>
    a5ec:	8085883a 	add	r2,r16,r2
    a5f0:	10c00017 	ldw	r3,0(r2)
    a5f4:	e0bffc17 	ldw	r2,-16(fp)
    a5f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a5fc:	04000074 	movhi	r16,1
    a600:	842cee04 	addi	r16,r16,-19528
    a604:	e0bffb17 	ldw	r2,-20(fp)
    a608:	1009883a 	mov	r4,r2
    a60c:	01400304 	movi	r5,12
    a610:	0009be80 	call	9be8 <__mulsi3>
    a614:	8085883a 	add	r2,r16,r2
    a618:	10800104 	addi	r2,r2,4
    a61c:	10c00017 	ldw	r3,0(r2)
    a620:	e0bffc17 	ldw	r2,-16(fp)
    a624:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a628:	04000074 	movhi	r16,1
    a62c:	842cee04 	addi	r16,r16,-19528
    a630:	e0bffb17 	ldw	r2,-20(fp)
    a634:	1009883a 	mov	r4,r2
    a638:	01400304 	movi	r5,12
    a63c:	0009be80 	call	9be8 <__mulsi3>
    a640:	8085883a 	add	r2,r16,r2
    a644:	10800204 	addi	r2,r2,8
    a648:	10c00017 	ldw	r3,0(r2)
    a64c:	e0bffc17 	ldw	r2,-16(fp)
    a650:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a654:	e13ffb17 	ldw	r4,-20(fp)
    a658:	000a9840 	call	a984 <alt_release_fd>
  }
} 
    a65c:	e037883a 	mov	sp,fp
    a660:	dfc00217 	ldw	ra,8(sp)
    a664:	df000117 	ldw	fp,4(sp)
    a668:	dc000017 	ldw	r16,0(sp)
    a66c:	dec00304 	addi	sp,sp,12
    a670:	f800283a 	ret

0000a674 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a674:	defffb04 	addi	sp,sp,-20
    a678:	dfc00415 	stw	ra,16(sp)
    a67c:	df000315 	stw	fp,12(sp)
    a680:	df000304 	addi	fp,sp,12
    a684:	e13ffd15 	stw	r4,-12(fp)
    a688:	e17ffe15 	stw	r5,-8(fp)
    a68c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a690:	01000074 	movhi	r4,1
    a694:	212cf104 	addi	r4,r4,-19516
    a698:	e17ffd17 	ldw	r5,-12(fp)
    a69c:	01800044 	movi	r6,1
    a6a0:	01c07fc4 	movi	r7,511
    a6a4:	000a5940 	call	a594 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a6a8:	01000074 	movhi	r4,1
    a6ac:	212cee04 	addi	r4,r4,-19528
    a6b0:	e17ffe17 	ldw	r5,-8(fp)
    a6b4:	000d883a 	mov	r6,zero
    a6b8:	01c07fc4 	movi	r7,511
    a6bc:	000a5940 	call	a594 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a6c0:	01000074 	movhi	r4,1
    a6c4:	212cf404 	addi	r4,r4,-19504
    a6c8:	e17fff17 	ldw	r5,-4(fp)
    a6cc:	01800044 	movi	r6,1
    a6d0:	01c07fc4 	movi	r7,511
    a6d4:	000a5940 	call	a594 <alt_open_fd>
}  
    a6d8:	e037883a 	mov	sp,fp
    a6dc:	dfc00117 	ldw	ra,4(sp)
    a6e0:	df000017 	ldw	fp,0(sp)
    a6e4:	dec00204 	addi	sp,sp,8
    a6e8:	f800283a 	ret

0000a6ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a6ec:	defffe04 	addi	sp,sp,-8
    a6f0:	dfc00115 	stw	ra,4(sp)
    a6f4:	df000015 	stw	fp,0(sp)
    a6f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a6fc:	00800074 	movhi	r2,1
    a700:	10ad9404 	addi	r2,r2,-18864
    a704:	10800017 	ldw	r2,0(r2)
    a708:	10000526 	beq	r2,zero,a720 <alt_get_errno+0x34>
    a70c:	00800074 	movhi	r2,1
    a710:	10ad9404 	addi	r2,r2,-18864
    a714:	10800017 	ldw	r2,0(r2)
    a718:	103ee83a 	callr	r2
    a71c:	00000206 	br	a728 <alt_get_errno+0x3c>
    a720:	00800074 	movhi	r2,1
    a724:	10ae5804 	addi	r2,r2,-18080
}
    a728:	e037883a 	mov	sp,fp
    a72c:	dfc00117 	ldw	ra,4(sp)
    a730:	df000017 	ldw	fp,0(sp)
    a734:	dec00204 	addi	sp,sp,8
    a738:	f800283a 	ret

0000a73c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a73c:	defffb04 	addi	sp,sp,-20
    a740:	dfc00415 	stw	ra,16(sp)
    a744:	df000315 	stw	fp,12(sp)
    a748:	dc000215 	stw	r16,8(sp)
    a74c:	df000204 	addi	fp,sp,8
    a750:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a754:	e0bfff17 	ldw	r2,-4(fp)
    a758:	10800217 	ldw	r2,8(r2)
    a75c:	10d00034 	orhi	r3,r2,16384
    a760:	e0bfff17 	ldw	r2,-4(fp)
    a764:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a768:	e03ffe15 	stw	zero,-8(fp)
    a76c:	00002206 	br	a7f8 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a770:	04000074 	movhi	r16,1
    a774:	842cee04 	addi	r16,r16,-19528
    a778:	e0bffe17 	ldw	r2,-8(fp)
    a77c:	1009883a 	mov	r4,r2
    a780:	01400304 	movi	r5,12
    a784:	0009be80 	call	9be8 <__mulsi3>
    a788:	8085883a 	add	r2,r16,r2
    a78c:	10c00017 	ldw	r3,0(r2)
    a790:	e0bfff17 	ldw	r2,-4(fp)
    a794:	10800017 	ldw	r2,0(r2)
    a798:	1880141e 	bne	r3,r2,a7ec <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a79c:	04000074 	movhi	r16,1
    a7a0:	842cee04 	addi	r16,r16,-19528
    a7a4:	e0bffe17 	ldw	r2,-8(fp)
    a7a8:	1009883a 	mov	r4,r2
    a7ac:	01400304 	movi	r5,12
    a7b0:	0009be80 	call	9be8 <__mulsi3>
    a7b4:	8085883a 	add	r2,r16,r2
    a7b8:	10800204 	addi	r2,r2,8
    a7bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a7c0:	10000a0e 	bge	r2,zero,a7ec <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a7c4:	e13ffe17 	ldw	r4,-8(fp)
    a7c8:	01400304 	movi	r5,12
    a7cc:	0009be80 	call	9be8 <__mulsi3>
    a7d0:	00c00074 	movhi	r3,1
    a7d4:	18ecee04 	addi	r3,r3,-19528
    a7d8:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a7dc:	e0bfff17 	ldw	r2,-4(fp)
    a7e0:	18800226 	beq	r3,r2,a7ec <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a7e4:	00bffcc4 	movi	r2,-13
    a7e8:	00000a06 	br	a814 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a7ec:	e0bffe17 	ldw	r2,-8(fp)
    a7f0:	10800044 	addi	r2,r2,1
    a7f4:	e0bffe15 	stw	r2,-8(fp)
    a7f8:	00800074 	movhi	r2,1
    a7fc:	10ad9304 	addi	r2,r2,-18868
    a800:	10800017 	ldw	r2,0(r2)
    a804:	1007883a 	mov	r3,r2
    a808:	e0bffe17 	ldw	r2,-8(fp)
    a80c:	18bfd82e 	bgeu	r3,r2,a770 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a810:	0005883a 	mov	r2,zero
}
    a814:	e037883a 	mov	sp,fp
    a818:	dfc00217 	ldw	ra,8(sp)
    a81c:	df000117 	ldw	fp,4(sp)
    a820:	dc000017 	ldw	r16,0(sp)
    a824:	dec00304 	addi	sp,sp,12
    a828:	f800283a 	ret

0000a82c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a82c:	defff604 	addi	sp,sp,-40
    a830:	dfc00915 	stw	ra,36(sp)
    a834:	df000815 	stw	fp,32(sp)
    a838:	df000804 	addi	fp,sp,32
    a83c:	e13ffd15 	stw	r4,-12(fp)
    a840:	e17ffe15 	stw	r5,-8(fp)
    a844:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a848:	00bfffc4 	movi	r2,-1
    a84c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a850:	00bffb44 	movi	r2,-19
    a854:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a858:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a85c:	e13ffd17 	ldw	r4,-12(fp)
    a860:	01400074 	movhi	r5,1
    a864:	296d9104 	addi	r5,r5,-18876
    a868:	000aa240 	call	aa24 <alt_find_dev>
    a86c:	e0bff815 	stw	r2,-32(fp)
    a870:	e0bff817 	ldw	r2,-32(fp)
    a874:	1000051e 	bne	r2,zero,a88c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a878:	e13ffd17 	ldw	r4,-12(fp)
    a87c:	000aab40 	call	aab4 <alt_find_file>
    a880:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a884:	00800044 	movi	r2,1
    a888:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a88c:	e0bff817 	ldw	r2,-32(fp)
    a890:	10002a26 	beq	r2,zero,a93c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a894:	e13ff817 	ldw	r4,-32(fp)
    a898:	000abc80 	call	abc8 <alt_get_fd>
    a89c:	e0bff915 	stw	r2,-28(fp)
    a8a0:	e0bff917 	ldw	r2,-28(fp)
    a8a4:	1000030e 	bge	r2,zero,a8b4 <open+0x88>
    {
      status = index;
    a8a8:	e0bff917 	ldw	r2,-28(fp)
    a8ac:	e0bffa15 	stw	r2,-24(fp)
    a8b0:	00002406 	br	a944 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    a8b4:	e13ff917 	ldw	r4,-28(fp)
    a8b8:	01400304 	movi	r5,12
    a8bc:	0009be80 	call	9be8 <__mulsi3>
    a8c0:	00c00074 	movhi	r3,1
    a8c4:	18ecee04 	addi	r3,r3,-19528
    a8c8:	10c5883a 	add	r2,r2,r3
    a8cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a8d0:	e0fffe17 	ldw	r3,-8(fp)
    a8d4:	00900034 	movhi	r2,16384
    a8d8:	10bfffc4 	addi	r2,r2,-1
    a8dc:	1886703a 	and	r3,r3,r2
    a8e0:	e0bffc17 	ldw	r2,-16(fp)
    a8e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a8e8:	e0bffb17 	ldw	r2,-20(fp)
    a8ec:	1000051e 	bne	r2,zero,a904 <open+0xd8>
    a8f0:	e13ffc17 	ldw	r4,-16(fp)
    a8f4:	000a73c0 	call	a73c <alt_file_locked>
    a8f8:	e0bffa15 	stw	r2,-24(fp)
    a8fc:	e0bffa17 	ldw	r2,-24(fp)
    a900:	10001016 	blt	r2,zero,a944 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a904:	e0bff817 	ldw	r2,-32(fp)
    a908:	10800317 	ldw	r2,12(r2)
    a90c:	10000826 	beq	r2,zero,a930 <open+0x104>
    a910:	e0bff817 	ldw	r2,-32(fp)
    a914:	10800317 	ldw	r2,12(r2)
    a918:	e13ffc17 	ldw	r4,-16(fp)
    a91c:	e17ffd17 	ldw	r5,-12(fp)
    a920:	e1bffe17 	ldw	r6,-8(fp)
    a924:	e1ffff17 	ldw	r7,-4(fp)
    a928:	103ee83a 	callr	r2
    a92c:	00000106 	br	a934 <open+0x108>
    a930:	0005883a 	mov	r2,zero
    a934:	e0bffa15 	stw	r2,-24(fp)
    a938:	00000206 	br	a944 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a93c:	00bffb44 	movi	r2,-19
    a940:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a944:	e0bffa17 	ldw	r2,-24(fp)
    a948:	1000080e 	bge	r2,zero,a96c <open+0x140>
  {
    alt_release_fd (index);  
    a94c:	e13ff917 	ldw	r4,-28(fp)
    a950:	000a9840 	call	a984 <alt_release_fd>
    ALT_ERRNO = -status;
    a954:	000a6ec0 	call	a6ec <alt_get_errno>
    a958:	e0fffa17 	ldw	r3,-24(fp)
    a95c:	00c7c83a 	sub	r3,zero,r3
    a960:	10c00015 	stw	r3,0(r2)
    return -1;
    a964:	00bfffc4 	movi	r2,-1
    a968:	00000106 	br	a970 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    a96c:	e0bff917 	ldw	r2,-28(fp)
}
    a970:	e037883a 	mov	sp,fp
    a974:	dfc00117 	ldw	ra,4(sp)
    a978:	df000017 	ldw	fp,0(sp)
    a97c:	dec00204 	addi	sp,sp,8
    a980:	f800283a 	ret

0000a984 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a984:	defffc04 	addi	sp,sp,-16
    a988:	dfc00315 	stw	ra,12(sp)
    a98c:	df000215 	stw	fp,8(sp)
    a990:	dc000115 	stw	r16,4(sp)
    a994:	df000104 	addi	fp,sp,4
    a998:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a99c:	e0bfff17 	ldw	r2,-4(fp)
    a9a0:	108000d0 	cmplti	r2,r2,3
    a9a4:	1000111e 	bne	r2,zero,a9ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a9a8:	04000074 	movhi	r16,1
    a9ac:	842cee04 	addi	r16,r16,-19528
    a9b0:	e0bfff17 	ldw	r2,-4(fp)
    a9b4:	1009883a 	mov	r4,r2
    a9b8:	01400304 	movi	r5,12
    a9bc:	0009be80 	call	9be8 <__mulsi3>
    a9c0:	8085883a 	add	r2,r16,r2
    a9c4:	10800204 	addi	r2,r2,8
    a9c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a9cc:	04000074 	movhi	r16,1
    a9d0:	842cee04 	addi	r16,r16,-19528
    a9d4:	e0bfff17 	ldw	r2,-4(fp)
    a9d8:	1009883a 	mov	r4,r2
    a9dc:	01400304 	movi	r5,12
    a9e0:	0009be80 	call	9be8 <__mulsi3>
    a9e4:	8085883a 	add	r2,r16,r2
    a9e8:	10000015 	stw	zero,0(r2)
  }
}
    a9ec:	e037883a 	mov	sp,fp
    a9f0:	dfc00217 	ldw	ra,8(sp)
    a9f4:	df000117 	ldw	fp,4(sp)
    a9f8:	dc000017 	ldw	r16,0(sp)
    a9fc:	dec00304 	addi	sp,sp,12
    aa00:	f800283a 	ret

0000aa04 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    aa04:	deffff04 	addi	sp,sp,-4
    aa08:	df000015 	stw	fp,0(sp)
    aa0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    aa10:	000170fa 	wrctl	ienable,zero
}
    aa14:	e037883a 	mov	sp,fp
    aa18:	df000017 	ldw	fp,0(sp)
    aa1c:	dec00104 	addi	sp,sp,4
    aa20:	f800283a 	ret

0000aa24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    aa24:	defffa04 	addi	sp,sp,-24
    aa28:	dfc00515 	stw	ra,20(sp)
    aa2c:	df000415 	stw	fp,16(sp)
    aa30:	df000404 	addi	fp,sp,16
    aa34:	e13ffe15 	stw	r4,-8(fp)
    aa38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    aa3c:	e0bfff17 	ldw	r2,-4(fp)
    aa40:	10800017 	ldw	r2,0(r2)
    aa44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    aa48:	e13ffe17 	ldw	r4,-8(fp)
    aa4c:	000ad180 	call	ad18 <strlen>
    aa50:	10800044 	addi	r2,r2,1
    aa54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    aa58:	00000d06 	br	aa90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    aa5c:	e0bffc17 	ldw	r2,-16(fp)
    aa60:	10c00217 	ldw	r3,8(r2)
    aa64:	e0bffd17 	ldw	r2,-12(fp)
    aa68:	1809883a 	mov	r4,r3
    aa6c:	e17ffe17 	ldw	r5,-8(fp)
    aa70:	100d883a 	mov	r6,r2
    aa74:	000acd00 	call	acd0 <memcmp>
    aa78:	1000021e 	bne	r2,zero,aa84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    aa7c:	e0bffc17 	ldw	r2,-16(fp)
    aa80:	00000706 	br	aaa0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    aa84:	e0bffc17 	ldw	r2,-16(fp)
    aa88:	10800017 	ldw	r2,0(r2)
    aa8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    aa90:	e0fffc17 	ldw	r3,-16(fp)
    aa94:	e0bfff17 	ldw	r2,-4(fp)
    aa98:	18bff01e 	bne	r3,r2,aa5c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    aa9c:	0005883a 	mov	r2,zero
}
    aaa0:	e037883a 	mov	sp,fp
    aaa4:	dfc00117 	ldw	ra,4(sp)
    aaa8:	df000017 	ldw	fp,0(sp)
    aaac:	dec00204 	addi	sp,sp,8
    aab0:	f800283a 	ret

0000aab4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    aab4:	defffb04 	addi	sp,sp,-20
    aab8:	dfc00415 	stw	ra,16(sp)
    aabc:	df000315 	stw	fp,12(sp)
    aac0:	df000304 	addi	fp,sp,12
    aac4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    aac8:	00800074 	movhi	r2,1
    aacc:	10ad8f04 	addi	r2,r2,-18884
    aad0:	10800017 	ldw	r2,0(r2)
    aad4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    aad8:	00003106 	br	aba0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    aadc:	e0bffd17 	ldw	r2,-12(fp)
    aae0:	10800217 	ldw	r2,8(r2)
    aae4:	1009883a 	mov	r4,r2
    aae8:	000ad180 	call	ad18 <strlen>
    aaec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    aaf0:	e0bffd17 	ldw	r2,-12(fp)
    aaf4:	10c00217 	ldw	r3,8(r2)
    aaf8:	e0bffe17 	ldw	r2,-8(fp)
    aafc:	10bfffc4 	addi	r2,r2,-1
    ab00:	1885883a 	add	r2,r3,r2
    ab04:	10800003 	ldbu	r2,0(r2)
    ab08:	10803fcc 	andi	r2,r2,255
    ab0c:	1080201c 	xori	r2,r2,128
    ab10:	10bfe004 	addi	r2,r2,-128
    ab14:	10800bd8 	cmpnei	r2,r2,47
    ab18:	1000031e 	bne	r2,zero,ab28 <alt_find_file+0x74>
    {
      len -= 1;
    ab1c:	e0bffe17 	ldw	r2,-8(fp)
    ab20:	10bfffc4 	addi	r2,r2,-1
    ab24:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ab28:	e0bffe17 	ldw	r2,-8(fp)
    ab2c:	e0ffff17 	ldw	r3,-4(fp)
    ab30:	1885883a 	add	r2,r3,r2
    ab34:	10800003 	ldbu	r2,0(r2)
    ab38:	10803fcc 	andi	r2,r2,255
    ab3c:	1080201c 	xori	r2,r2,128
    ab40:	10bfe004 	addi	r2,r2,-128
    ab44:	10800be0 	cmpeqi	r2,r2,47
    ab48:	1000081e 	bne	r2,zero,ab6c <alt_find_file+0xb8>
    ab4c:	e0bffe17 	ldw	r2,-8(fp)
    ab50:	e0ffff17 	ldw	r3,-4(fp)
    ab54:	1885883a 	add	r2,r3,r2
    ab58:	10800003 	ldbu	r2,0(r2)
    ab5c:	10803fcc 	andi	r2,r2,255
    ab60:	1080201c 	xori	r2,r2,128
    ab64:	10bfe004 	addi	r2,r2,-128
    ab68:	10000a1e 	bne	r2,zero,ab94 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ab6c:	e0bffd17 	ldw	r2,-12(fp)
    ab70:	10c00217 	ldw	r3,8(r2)
    ab74:	e0bffe17 	ldw	r2,-8(fp)
    ab78:	1809883a 	mov	r4,r3
    ab7c:	e17fff17 	ldw	r5,-4(fp)
    ab80:	100d883a 	mov	r6,r2
    ab84:	000acd00 	call	acd0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ab88:	1000021e 	bne	r2,zero,ab94 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ab8c:	e0bffd17 	ldw	r2,-12(fp)
    ab90:	00000806 	br	abb4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    ab94:	e0bffd17 	ldw	r2,-12(fp)
    ab98:	10800017 	ldw	r2,0(r2)
    ab9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    aba0:	e0fffd17 	ldw	r3,-12(fp)
    aba4:	00800074 	movhi	r2,1
    aba8:	10ad8f04 	addi	r2,r2,-18884
    abac:	18bfcb1e 	bne	r3,r2,aadc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    abb0:	0005883a 	mov	r2,zero
}
    abb4:	e037883a 	mov	sp,fp
    abb8:	dfc00117 	ldw	ra,4(sp)
    abbc:	df000017 	ldw	fp,0(sp)
    abc0:	dec00204 	addi	sp,sp,8
    abc4:	f800283a 	ret

0000abc8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    abc8:	defffa04 	addi	sp,sp,-24
    abcc:	dfc00515 	stw	ra,20(sp)
    abd0:	df000415 	stw	fp,16(sp)
    abd4:	dc000315 	stw	r16,12(sp)
    abd8:	df000304 	addi	fp,sp,12
    abdc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    abe0:	00bffa04 	movi	r2,-24
    abe4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    abe8:	e03ffd15 	stw	zero,-12(fp)
    abec:	00002106 	br	ac74 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    abf0:	04000074 	movhi	r16,1
    abf4:	842cee04 	addi	r16,r16,-19528
    abf8:	e0bffd17 	ldw	r2,-12(fp)
    abfc:	1009883a 	mov	r4,r2
    ac00:	01400304 	movi	r5,12
    ac04:	0009be80 	call	9be8 <__mulsi3>
    ac08:	8085883a 	add	r2,r16,r2
    ac0c:	10800017 	ldw	r2,0(r2)
    ac10:	1000151e 	bne	r2,zero,ac68 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    ac14:	04000074 	movhi	r16,1
    ac18:	842cee04 	addi	r16,r16,-19528
    ac1c:	e0bffd17 	ldw	r2,-12(fp)
    ac20:	1009883a 	mov	r4,r2
    ac24:	01400304 	movi	r5,12
    ac28:	0009be80 	call	9be8 <__mulsi3>
    ac2c:	8085883a 	add	r2,r16,r2
    ac30:	e0ffff17 	ldw	r3,-4(fp)
    ac34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    ac38:	00800074 	movhi	r2,1
    ac3c:	10ad9304 	addi	r2,r2,-18868
    ac40:	10c00017 	ldw	r3,0(r2)
    ac44:	e0bffd17 	ldw	r2,-12(fp)
    ac48:	1880040e 	bge	r3,r2,ac5c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    ac4c:	00800074 	movhi	r2,1
    ac50:	10ad9304 	addi	r2,r2,-18868
    ac54:	e0fffd17 	ldw	r3,-12(fp)
    ac58:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    ac5c:	e0bffd17 	ldw	r2,-12(fp)
    ac60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    ac64:	00000606 	br	ac80 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ac68:	e0bffd17 	ldw	r2,-12(fp)
    ac6c:	10800044 	addi	r2,r2,1
    ac70:	e0bffd15 	stw	r2,-12(fp)
    ac74:	e0bffd17 	ldw	r2,-12(fp)
    ac78:	10800810 	cmplti	r2,r2,32
    ac7c:	103fdc1e 	bne	r2,zero,abf0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ac80:	e0bffe17 	ldw	r2,-8(fp)
}
    ac84:	e037883a 	mov	sp,fp
    ac88:	dfc00217 	ldw	ra,8(sp)
    ac8c:	df000117 	ldw	fp,4(sp)
    ac90:	dc000017 	ldw	r16,0(sp)
    ac94:	dec00304 	addi	sp,sp,12
    ac98:	f800283a 	ret

0000ac9c <atexit>:
    ac9c:	200b883a 	mov	r5,r4
    aca0:	000d883a 	mov	r6,zero
    aca4:	0009883a 	mov	r4,zero
    aca8:	000f883a 	mov	r7,zero
    acac:	000ad401 	jmpi	ad40 <__register_exitproc>

0000acb0 <exit>:
    acb0:	defffe04 	addi	sp,sp,-8
    acb4:	000b883a 	mov	r5,zero
    acb8:	dc000015 	stw	r16,0(sp)
    acbc:	dfc00115 	stw	ra,4(sp)
    acc0:	2021883a 	mov	r16,r4
    acc4:	000aec80 	call	aec8 <__call_exitprocs>
    acc8:	8009883a 	mov	r4,r16
    accc:	000b1d00 	call	b1d0 <_exit>

0000acd0 <memcmp>:
    acd0:	30000d26 	beq	r6,zero,ad08 <memcmp+0x38>
    acd4:	20c00003 	ldbu	r3,0(r4)
    acd8:	28800003 	ldbu	r2,0(r5)
    acdc:	18800c1e 	bne	r3,r2,ad10 <memcmp+0x40>
    ace0:	31bfff84 	addi	r6,r6,-2
    ace4:	01ffffc4 	movi	r7,-1
    ace8:	00000406 	br	acfc <memcmp+0x2c>
    acec:	20c00003 	ldbu	r3,0(r4)
    acf0:	28800003 	ldbu	r2,0(r5)
    acf4:	31bfffc4 	addi	r6,r6,-1
    acf8:	1880051e 	bne	r3,r2,ad10 <memcmp+0x40>
    acfc:	21000044 	addi	r4,r4,1
    ad00:	29400044 	addi	r5,r5,1
    ad04:	31fff91e 	bne	r6,r7,acec <memcmp+0x1c>
    ad08:	0005883a 	mov	r2,zero
    ad0c:	f800283a 	ret
    ad10:	1885c83a 	sub	r2,r3,r2
    ad14:	f800283a 	ret

0000ad18 <strlen>:
    ad18:	20800007 	ldb	r2,0(r4)
    ad1c:	10000626 	beq	r2,zero,ad38 <strlen+0x20>
    ad20:	2005883a 	mov	r2,r4
    ad24:	10800044 	addi	r2,r2,1
    ad28:	10c00007 	ldb	r3,0(r2)
    ad2c:	183ffd1e 	bne	r3,zero,ad24 <strlen+0xc>
    ad30:	1105c83a 	sub	r2,r2,r4
    ad34:	f800283a 	ret
    ad38:	0005883a 	mov	r2,zero
    ad3c:	f800283a 	ret

0000ad40 <__register_exitproc>:
    ad40:	defff904 	addi	sp,sp,-28
    ad44:	00800074 	movhi	r2,1
    ad48:	10ad9504 	addi	r2,r2,-18860
    ad4c:	dc400415 	stw	r17,16(sp)
    ad50:	14400017 	ldw	r17,0(r2)
    ad54:	dc000315 	stw	r16,12(sp)
    ad58:	dc800515 	stw	r18,20(sp)
    ad5c:	8c000c17 	ldw	r16,48(r17)
    ad60:	dfc00615 	stw	ra,24(sp)
    ad64:	2025883a 	mov	r18,r4
    ad68:	80004226 	beq	r16,zero,ae74 <__register_exitproc+0x134>
    ad6c:	80800117 	ldw	r2,4(r16)
    ad70:	00c007c4 	movi	r3,31
    ad74:	1880180e 	bge	r3,r2,add8 <__register_exitproc+0x98>
    ad78:	00800034 	movhi	r2,0
    ad7c:	10800004 	addi	r2,r2,0
    ad80:	1000071e 	bne	r2,zero,ada0 <__register_exitproc+0x60>
    ad84:	00bfffc4 	movi	r2,-1
    ad88:	dfc00617 	ldw	ra,24(sp)
    ad8c:	dc800517 	ldw	r18,20(sp)
    ad90:	dc400417 	ldw	r17,16(sp)
    ad94:	dc000317 	ldw	r16,12(sp)
    ad98:	dec00704 	addi	sp,sp,28
    ad9c:	f800283a 	ret
    ada0:	01002304 	movi	r4,140
    ada4:	d9400015 	stw	r5,0(sp)
    ada8:	d9800115 	stw	r6,4(sp)
    adac:	d9c00215 	stw	r7,8(sp)
    adb0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    adb4:	1021883a 	mov	r16,r2
    adb8:	d9400017 	ldw	r5,0(sp)
    adbc:	d9800117 	ldw	r6,4(sp)
    adc0:	d9c00217 	ldw	r7,8(sp)
    adc4:	103fef26 	beq	r2,zero,ad84 <__register_exitproc+0x44>
    adc8:	88800c17 	ldw	r2,48(r17)
    adcc:	80000115 	stw	zero,4(r16)
    add0:	80800015 	stw	r2,0(r16)
    add4:	8c000c15 	stw	r16,48(r17)
    add8:	90001726 	beq	r18,zero,ae38 <__register_exitproc+0xf8>
    addc:	80802217 	ldw	r2,136(r16)
    ade0:	10002826 	beq	r2,zero,ae84 <__register_exitproc+0x144>
    ade4:	12804017 	ldw	r10,256(r2)
    ade8:	80c00117 	ldw	r3,4(r16)
    adec:	02400044 	movi	r9,1
    adf0:	48d2983a 	sll	r9,r9,r3
    adf4:	19000804 	addi	r4,r3,32
    adf8:	18d1883a 	add	r8,r3,r3
    adfc:	2109883a 	add	r4,r4,r4
    ae00:	4211883a 	add	r8,r8,r8
    ae04:	2109883a 	add	r4,r4,r4
    ae08:	1109883a 	add	r4,r2,r4
    ae0c:	1211883a 	add	r8,r2,r8
    ae10:	5254b03a 	or	r10,r10,r9
    ae14:	21c00015 	stw	r7,0(r4)
    ae18:	41800015 	stw	r6,0(r8)
    ae1c:	12804015 	stw	r10,256(r2)
    ae20:	01000084 	movi	r4,2
    ae24:	9100051e 	bne	r18,r4,ae3c <__register_exitproc+0xfc>
    ae28:	11004117 	ldw	r4,260(r2)
    ae2c:	2252b03a 	or	r9,r4,r9
    ae30:	12404115 	stw	r9,260(r2)
    ae34:	00000106 	br	ae3c <__register_exitproc+0xfc>
    ae38:	80c00117 	ldw	r3,4(r16)
    ae3c:	18800084 	addi	r2,r3,2
    ae40:	1085883a 	add	r2,r2,r2
    ae44:	1085883a 	add	r2,r2,r2
    ae48:	8085883a 	add	r2,r16,r2
    ae4c:	18c00044 	addi	r3,r3,1
    ae50:	11400015 	stw	r5,0(r2)
    ae54:	0005883a 	mov	r2,zero
    ae58:	80c00115 	stw	r3,4(r16)
    ae5c:	dfc00617 	ldw	ra,24(sp)
    ae60:	dc800517 	ldw	r18,20(sp)
    ae64:	dc400417 	ldw	r17,16(sp)
    ae68:	dc000317 	ldw	r16,12(sp)
    ae6c:	dec00704 	addi	sp,sp,28
    ae70:	f800283a 	ret
    ae74:	04000074 	movhi	r16,1
    ae78:	842e5904 	addi	r16,r16,-18076
    ae7c:	8c000c15 	stw	r16,48(r17)
    ae80:	003fba06 	br	ad6c <__register_exitproc+0x2c>
    ae84:	00800034 	movhi	r2,0
    ae88:	10800004 	addi	r2,r2,0
    ae8c:	103fbd26 	beq	r2,zero,ad84 <__register_exitproc+0x44>
    ae90:	d9400015 	stw	r5,0(sp)
    ae94:	d9800115 	stw	r6,4(sp)
    ae98:	d9c00215 	stw	r7,8(sp)
    ae9c:	01004204 	movi	r4,264
    aea0:	103ee83a 	callr	r2
    aea4:	d9400017 	ldw	r5,0(sp)
    aea8:	d9800117 	ldw	r6,4(sp)
    aeac:	d9c00217 	ldw	r7,8(sp)
    aeb0:	103fb426 	beq	r2,zero,ad84 <__register_exitproc+0x44>
    aeb4:	10004015 	stw	zero,256(r2)
    aeb8:	10004115 	stw	zero,260(r2)
    aebc:	80802215 	stw	r2,136(r16)
    aec0:	0015883a 	mov	r10,zero
    aec4:	003fc806 	br	ade8 <__register_exitproc+0xa8>

0000aec8 <__call_exitprocs>:
    aec8:	00800074 	movhi	r2,1
    aecc:	10ad9504 	addi	r2,r2,-18860
    aed0:	10800017 	ldw	r2,0(r2)
    aed4:	defff204 	addi	sp,sp,-56
    aed8:	df000c15 	stw	fp,48(sp)
    aedc:	d8800015 	stw	r2,0(sp)
    aee0:	10800c04 	addi	r2,r2,48
    aee4:	dd400915 	stw	r21,36(sp)
    aee8:	dfc00d15 	stw	ra,52(sp)
    aeec:	ddc00b15 	stw	r23,44(sp)
    aef0:	dd800a15 	stw	r22,40(sp)
    aef4:	dd000815 	stw	r20,32(sp)
    aef8:	dcc00715 	stw	r19,28(sp)
    aefc:	dc800615 	stw	r18,24(sp)
    af00:	dc400515 	stw	r17,20(sp)
    af04:	dc000415 	stw	r16,16(sp)
    af08:	d9000115 	stw	r4,4(sp)
    af0c:	2839883a 	mov	fp,r5
    af10:	d8800215 	stw	r2,8(sp)
    af14:	057fffc4 	movi	r21,-1
    af18:	d8800017 	ldw	r2,0(sp)
    af1c:	dd800217 	ldw	r22,8(sp)
    af20:	15c00c17 	ldw	r23,48(r2)
    af24:	b8001b26 	beq	r23,zero,af94 <__call_exitprocs+0xcc>
    af28:	b9000117 	ldw	r4,4(r23)
    af2c:	bd002217 	ldw	r20,136(r23)
    af30:	243fffc4 	addi	r16,r4,-1
    af34:	80001416 	blt	r16,zero,af88 <__call_exitprocs+0xc0>
    af38:	244007c4 	addi	r17,r4,31
    af3c:	21000044 	addi	r4,r4,1
    af40:	8c63883a 	add	r17,r17,r17
    af44:	8427883a 	add	r19,r16,r16
    af48:	2109883a 	add	r4,r4,r4
    af4c:	8c63883a 	add	r17,r17,r17
    af50:	9ce7883a 	add	r19,r19,r19
    af54:	2109883a 	add	r4,r4,r4
    af58:	a463883a 	add	r17,r20,r17
    af5c:	a4e7883a 	add	r19,r20,r19
    af60:	b925883a 	add	r18,r23,r4
    af64:	e0001726 	beq	fp,zero,afc4 <__call_exitprocs+0xfc>
    af68:	a0000226 	beq	r20,zero,af74 <__call_exitprocs+0xac>
    af6c:	89400017 	ldw	r5,0(r17)
    af70:	2f001426 	beq	r5,fp,afc4 <__call_exitprocs+0xfc>
    af74:	843fffc4 	addi	r16,r16,-1
    af78:	8c7fff04 	addi	r17,r17,-4
    af7c:	9cffff04 	addi	r19,r19,-4
    af80:	94bfff04 	addi	r18,r18,-4
    af84:	857ff71e 	bne	r16,r21,af64 <__call_exitprocs+0x9c>
    af88:	00800034 	movhi	r2,0
    af8c:	10800004 	addi	r2,r2,0
    af90:	1000311e 	bne	r2,zero,b058 <__call_exitprocs+0x190>
    af94:	dfc00d17 	ldw	ra,52(sp)
    af98:	df000c17 	ldw	fp,48(sp)
    af9c:	ddc00b17 	ldw	r23,44(sp)
    afa0:	dd800a17 	ldw	r22,40(sp)
    afa4:	dd400917 	ldw	r21,36(sp)
    afa8:	dd000817 	ldw	r20,32(sp)
    afac:	dcc00717 	ldw	r19,28(sp)
    afb0:	dc800617 	ldw	r18,24(sp)
    afb4:	dc400517 	ldw	r17,20(sp)
    afb8:	dc000417 	ldw	r16,16(sp)
    afbc:	dec00e04 	addi	sp,sp,56
    afc0:	f800283a 	ret
    afc4:	b9000117 	ldw	r4,4(r23)
    afc8:	92000017 	ldw	r8,0(r18)
    afcc:	213fffc4 	addi	r4,r4,-1
    afd0:	24001a26 	beq	r4,r16,b03c <__call_exitprocs+0x174>
    afd4:	90000015 	stw	zero,0(r18)
    afd8:	403fe626 	beq	r8,zero,af74 <__call_exitprocs+0xac>
    afdc:	ba400117 	ldw	r9,4(r23)
    afe0:	a0001226 	beq	r20,zero,b02c <__call_exitprocs+0x164>
    afe4:	00800044 	movi	r2,1
    afe8:	1408983a 	sll	r4,r2,r16
    afec:	a1404017 	ldw	r5,256(r20)
    aff0:	214a703a 	and	r5,r4,r5
    aff4:	28000d26 	beq	r5,zero,b02c <__call_exitprocs+0x164>
    aff8:	a1404117 	ldw	r5,260(r20)
    affc:	2148703a 	and	r4,r4,r5
    b000:	2000101e 	bne	r4,zero,b044 <__call_exitprocs+0x17c>
    b004:	99400017 	ldw	r5,0(r19)
    b008:	d9000117 	ldw	r4,4(sp)
    b00c:	da400315 	stw	r9,12(sp)
    b010:	403ee83a 	callr	r8
    b014:	da400317 	ldw	r9,12(sp)
    b018:	b9000117 	ldw	r4,4(r23)
    b01c:	227fbe1e 	bne	r4,r9,af18 <__call_exitprocs+0x50>
    b020:	b1000017 	ldw	r4,0(r22)
    b024:	25ffd326 	beq	r4,r23,af74 <__call_exitprocs+0xac>
    b028:	003fbb06 	br	af18 <__call_exitprocs+0x50>
    b02c:	da400315 	stw	r9,12(sp)
    b030:	403ee83a 	callr	r8
    b034:	da400317 	ldw	r9,12(sp)
    b038:	003ff706 	br	b018 <__call_exitprocs+0x150>
    b03c:	bc000115 	stw	r16,4(r23)
    b040:	003fe506 	br	afd8 <__call_exitprocs+0x110>
    b044:	99000017 	ldw	r4,0(r19)
    b048:	da400315 	stw	r9,12(sp)
    b04c:	403ee83a 	callr	r8
    b050:	da400317 	ldw	r9,12(sp)
    b054:	003ff006 	br	b018 <__call_exitprocs+0x150>
    b058:	b9000117 	ldw	r4,4(r23)
    b05c:	20000e1e 	bne	r4,zero,b098 <__call_exitprocs+0x1d0>
    b060:	b9000017 	ldw	r4,0(r23)
    b064:	20000826 	beq	r4,zero,b088 <__call_exitprocs+0x1c0>
    b068:	b1000015 	stw	r4,0(r22)
    b06c:	a0000226 	beq	r20,zero,b078 <__call_exitprocs+0x1b0>
    b070:	a009883a 	mov	r4,r20
    b074:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    b078:	b809883a 	mov	r4,r23
    b07c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    b080:	b5c00017 	ldw	r23,0(r22)
    b084:	003fa706 	br	af24 <__call_exitprocs+0x5c>
    b088:	0007883a 	mov	r3,zero
    b08c:	b82d883a 	mov	r22,r23
    b090:	182f883a 	mov	r23,r3
    b094:	003fa306 	br	af24 <__call_exitprocs+0x5c>
    b098:	b8c00017 	ldw	r3,0(r23)
    b09c:	003ffb06 	br	b08c <__call_exitprocs+0x1c4>

0000b0a0 <udivmodsi4>:
    b0a0:	2005883a 	mov	r2,r4
    b0a4:	2900182e 	bgeu	r5,r4,b108 <udivmodsi4+0x68>
    b0a8:	28001716 	blt	r5,zero,b108 <udivmodsi4+0x68>
    b0ac:	01000804 	movi	r4,32
    b0b0:	00c00044 	movi	r3,1
    b0b4:	00000206 	br	b0c0 <udivmodsi4+0x20>
    b0b8:	20001126 	beq	r4,zero,b100 <udivmodsi4+0x60>
    b0bc:	28000516 	blt	r5,zero,b0d4 <udivmodsi4+0x34>
    b0c0:	294b883a 	add	r5,r5,r5
    b0c4:	213fffc4 	addi	r4,r4,-1
    b0c8:	18c7883a 	add	r3,r3,r3
    b0cc:	28bffa36 	bltu	r5,r2,b0b8 <udivmodsi4+0x18>
    b0d0:	18000b26 	beq	r3,zero,b100 <udivmodsi4+0x60>
    b0d4:	0009883a 	mov	r4,zero
    b0d8:	11400236 	bltu	r2,r5,b0e4 <udivmodsi4+0x44>
    b0dc:	1145c83a 	sub	r2,r2,r5
    b0e0:	20c8b03a 	or	r4,r4,r3
    b0e4:	1806d07a 	srli	r3,r3,1
    b0e8:	280ad07a 	srli	r5,r5,1
    b0ec:	183ffa1e 	bne	r3,zero,b0d8 <udivmodsi4+0x38>
    b0f0:	3000021e 	bne	r6,zero,b0fc <udivmodsi4+0x5c>
    b0f4:	2005883a 	mov	r2,r4
    b0f8:	f800283a 	ret
    b0fc:	f800283a 	ret
    b100:	0009883a 	mov	r4,zero
    b104:	003ffa06 	br	b0f0 <udivmodsi4+0x50>
    b108:	00c00044 	movi	r3,1
    b10c:	0009883a 	mov	r4,zero
    b110:	003ff106 	br	b0d8 <udivmodsi4+0x38>

0000b114 <__divsi3>:
    b114:	defffe04 	addi	sp,sp,-8
    b118:	dfc00115 	stw	ra,4(sp)
    b11c:	dc000015 	stw	r16,0(sp)
    b120:	20000a16 	blt	r4,zero,b14c <__divsi3+0x38>
    b124:	0021883a 	mov	r16,zero
    b128:	28000b16 	blt	r5,zero,b158 <__divsi3+0x44>
    b12c:	000d883a 	mov	r6,zero
    b130:	000b0a00 	call	b0a0 <udivmodsi4>
    b134:	80000126 	beq	r16,zero,b13c <__divsi3+0x28>
    b138:	0085c83a 	sub	r2,zero,r2
    b13c:	dfc00117 	ldw	ra,4(sp)
    b140:	dc000017 	ldw	r16,0(sp)
    b144:	dec00204 	addi	sp,sp,8
    b148:	f800283a 	ret
    b14c:	0109c83a 	sub	r4,zero,r4
    b150:	04000044 	movi	r16,1
    b154:	283ff50e 	bge	r5,zero,b12c <__divsi3+0x18>
    b158:	014bc83a 	sub	r5,zero,r5
    b15c:	8400005c 	xori	r16,r16,1
    b160:	003ff206 	br	b12c <__divsi3+0x18>

0000b164 <__modsi3>:
    b164:	deffff04 	addi	sp,sp,-4
    b168:	dfc00015 	stw	ra,0(sp)
    b16c:	20000516 	blt	r4,zero,b184 <__modsi3+0x20>
    b170:	28000c16 	blt	r5,zero,b1a4 <__modsi3+0x40>
    b174:	01800044 	movi	r6,1
    b178:	dfc00017 	ldw	ra,0(sp)
    b17c:	dec00104 	addi	sp,sp,4
    b180:	000b0a01 	jmpi	b0a0 <udivmodsi4>
    b184:	0109c83a 	sub	r4,zero,r4
    b188:	28000b16 	blt	r5,zero,b1b8 <__modsi3+0x54>
    b18c:	01800044 	movi	r6,1
    b190:	000b0a00 	call	b0a0 <udivmodsi4>
    b194:	0085c83a 	sub	r2,zero,r2
    b198:	dfc00017 	ldw	ra,0(sp)
    b19c:	dec00104 	addi	sp,sp,4
    b1a0:	f800283a 	ret
    b1a4:	014bc83a 	sub	r5,zero,r5
    b1a8:	01800044 	movi	r6,1
    b1ac:	dfc00017 	ldw	ra,0(sp)
    b1b0:	dec00104 	addi	sp,sp,4
    b1b4:	000b0a01 	jmpi	b0a0 <udivmodsi4>
    b1b8:	014bc83a 	sub	r5,zero,r5
    b1bc:	003ff306 	br	b18c <__modsi3+0x28>

0000b1c0 <__udivsi3>:
    b1c0:	000d883a 	mov	r6,zero
    b1c4:	000b0a01 	jmpi	b0a0 <udivmodsi4>

0000b1c8 <__umodsi3>:
    b1c8:	01800044 	movi	r6,1
    b1cc:	000b0a01 	jmpi	b0a0 <udivmodsi4>

0000b1d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b1d0:	defffc04 	addi	sp,sp,-16
    b1d4:	df000315 	stw	fp,12(sp)
    b1d8:	df000304 	addi	fp,sp,12
    b1dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    b1e0:	0001883a 	nop
    b1e4:	e0bfff17 	ldw	r2,-4(fp)
    b1e8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    b1ec:	e0bffd17 	ldw	r2,-12(fp)
    b1f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b1f4:	e0bffe17 	ldw	r2,-8(fp)
    b1f8:	10000226 	beq	r2,zero,b204 <_exit+0x34>
    ALT_SIM_FAIL();
    b1fc:	002af070 	cmpltui	zero,zero,43969
    b200:	00000106 	br	b208 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    b204:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b208:	003fff06 	br	b208 <_exit+0x38>
