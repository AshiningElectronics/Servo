
ServoDrive.elf:     file format elf32-littlenios2
ServoDrive.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002d0c memsz 0x00002d0c flags r-x
    LOAD off    0x00003d2c vaddr 0x0000ad2c paddr 0x0000b39c align 2**12
         filesz 0x00000670 memsz 0x00000670 flags rw-
    LOAD off    0x00004a0c vaddr 0x0000ba0c paddr 0x0000ba0c align 2**12
         filesz 0x00000000 memsz 0x0000002c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  0000439c  2**0
                  CONTENTS
  2 .text         00002ad4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000238  0000aaf4  0000aaf4  00003af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000670  0000ad2c  0000b39c  00003d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000002c  0000ba0c  0000ba0c  00004a0c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000ba38  0000ba38  0000439c  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  0000439c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000468  00000000  00000000  000043d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006477  00000000  00000000  00004840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001eef  00000000  00000000  0000acb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002195  00000000  00000000  0000cba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008b8  00000000  00000000  0000ed3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000018a2  00000000  00000000  0000f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007da  00000000  00000000  00010e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00011670  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000038  00000000  00000000  000116a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00013126  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00013129  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00013135  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00013136  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00013137  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001313b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001313f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00013143  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001314e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00013159  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  00013164  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  0001316b  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00081954  00000000  00000000  0001318e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000aaf4 l    d  .rodata	00000000 .rodata
0000ad2c l    d  .rwdata	00000000 .rwdata
0000ba0c l    d  .bss	00000000 .bss
0000ba38 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ServoDrive_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Servo.c
0000b324 l     O .rwdata	00000004 one_by_sqrt3
0000b328 l     O .rwdata	00000004 two_by_sqrt3
0000b32c l     O .rwdata	00000004 sqrt3_by_2
0000b330 l     O .rwdata	00000004 tFallFET
0000b334 l     O .rwdata	00000004 tFallDriver
0000b338 l     O .rwdata	00000004 tDelayMatchDriver
0000b33c l     O .rwdata	00000004 tSafety
0000b340 l     O .rwdata	00000004 deadtimeint
0000b344 l     O .rwdata	00000004 PWMPeriod
0000b348 l     O .rwdata	00000004 PWMHalfPeriod
0000b34c l     O .rwdata	00000004 ADCtoAscalefactor
0000b350 l     O .rwdata	00000004 encToPhasefactor
0000b354 l     O .rwdata	00000004 omegaFilterConst
0000b358 l     O .rwdata	00000004 lockinCurrent
0000b35c l     O .rwdata	00000004 currentKp
0000b360 l     O .rwdata	00000004 currentKi
0000b364 l     O .rwdata	00000004 speedKp
0000b368 l     O .rwdata	00000004 speedKi
0000b36c l     O .rwdata	00000004 currentlimit
0000ba14 l     O .bss	00000004 IerrVstateAlpha.2238
0000ba18 l     O .bss	00000004 IerrVstateBeta.2239
0000ba0c l     O .bss	00000008 IsenseOffset
0000ba1c l     O .bss	00000004 omega.2340
0000ba20 l     O .bss	00000004 logctr.2341
0000ba24 l     O .bss	00000004 Iqintstate.2344
00000000 l    df *ABS*	00000000 extramath.c
0000b370 l     O .rwdata	00000004 one_by_sqrt3
0000b374 l     O .rwdata	00000004 two_by_sqrt3
0000b378 l     O .rwdata	00000004 sqrt3_by_2
00000000 l    df *ABS*	00000000 sincostables.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000096f8 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
0000980c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009968 l     F .text	00000038 alt_dev_reg
0000ad2c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00009c40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009d9c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009dc8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009fa0 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000a0d8 l     F .text	00000050 alt_get_errno
0000a128 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000af00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000098f0 g     F .text	00000078 alt_main
0000b39c g       *ABS*	00000000 __flash_rwdata_start
0000806c g     F .text	000007a4 SVM
0000aaf4 g     O .rodata	00000100 cospi_table
0000a3a8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ba34 g     O .bss	00000004 errno
0000ba2c g     O .bss	00000004 alt_argv
00013324 g       *ABS*	00000000 _gp
0000ad80 g     O .rwdata	00000180 alt_fd_list
0000a3c8 g     F .text	00000090 alt_find_dev
0000a060 g     F .text	00000078 alt_io_redirect
0000aaf4 g       *ABS*	00000000 __DTOR_END__
00009ac8 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000097fc g     F .text	00000008 .hidden __udivsi3
0000a620 g     F .text	0000008c alt_icache_flush
00008a94 g     F .text	000000f4 blocking_polar_control_current
0000b38c g     O .rwdata	00000004 alt_max_fd
0000b394 g     O .rwdata	00000004 _global_impure_ptr
0000ba38 g       *ABS*	00000000 __bss_end
0000944c g     F .text	0000020c fast_cossin
0000930c g     F .text	00000140 fast_atan2
0000ad58 g     O .rwdata	00000028 alt_dev_null
00009d58 g     F .text	00000044 alt_dcache_flush_all
0000b39c g       *ABS*	00000000 __ram_rwdata_end
0000b384 g     O .rwdata	00000008 alt_dev_list
0000ad2c g       *ABS*	00000000 __ram_rodata_end
00009804 g     F .text	00000008 .hidden __umodsi3
0000ba38 g       *ABS*	00000000 end
0000aaf4 g       *ABS*	00000000 __CTOR_LIST__
0000c800 g       *ABS*	00000000 __alt_stack_pointer
00009bac g     F .text	00000094 altera_avalon_jtag_uart_write
0000a91c g     F .text	000001a4 __call_exitprocs
00008020 g     F .text	0000004c _start
000099d4 g     F .text	00000034 alt_sys_init
0000a800 g     F .text	0000011c __register_exitproc
0000ad2c g       *ABS*	00000000 __ram_rwdata_start
0000aaf4 g       *ABS*	00000000 __ram_rodata_start
00009a08 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a56c g     F .text	000000b4 alt_get_fd
0000a6f8 g     F .text	0000007c memcmp
0000ba38 g       *ABS*	00000000 __alt_stack_base
0000a458 g     F .text	00000114 alt_find_file
00009e18 g     F .text	000000a0 alt_dev_llist_insert
0000ba0c g       *ABS*	00000000 __bss_start
00008b88 g     F .text	00000784 main
0000ba30 g     O .bss	00000004 alt_envp
00009a68 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b390 g     O .rwdata	00000004 alt_errno
00009768 g     F .text	00000048 .hidden __divsi3
0000aaf4 g       *ABS*	00000000 __CTOR_END__
0000aaf4 g       *ABS*	00000000 __flash_rodata_start
0000aaf4 g       *ABS*	00000000 __DTOR_LIST__
000099a0 g     F .text	00000034 alt_irq_init
0000a348 g     F .text	00000060 alt_release_fd
0000a6ac g     F .text	00000014 atexit
0000b398 g     O .rwdata	00000004 _impure_ptr
0000ba28 g     O .bss	00000004 alt_argc
00009f14 g     F .text	0000005c _do_dtors
0000b37c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009658 g     F .text	000000a0 Q_rsqrt
0000b39c g       *ABS*	00000000 _edata
0000ba38 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000abf4 g     O .rodata	00000100 sinpi_table
0000a6c0 g     F .text	00000038 exit
000097b0 g     F .text	0000004c .hidden __modsi3
0000c800 g       *ABS*	00000000 __alt_data_end
0000aac0 g     F .text	00000034 _exit
0000a774 g     F .text	0000008c strlen
0000a1f4 g     F .text	00000154 open
00008810 g     F .text	00000284 control_current
00009f70 g     F .text	00000030 alt_icache_flush_all
00009eb8 g     F .text	0000005c _do_ctors
00009c90 g     F .text	000000c8 close
00009870 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff4ce0>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_gp+0xffff4d00>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	def20014 	ori	sp,sp,51200
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d68cc914 	ori	gp,gp,13092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10ae8314 	ori	r2,r2,47628

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18ee8e14 	ori	r3,r3,47672

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_gp+0xffff4d30>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	00098700 	call	9870 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	00098f00 	call	98f0 <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <_gp+0xffff4d44>

0000806c <SVM>:
static const float speedKp = 0.02f;
static const float speedKi = 0.0f;
static const float currentlimit = 50.0f;

// Magnitude must not be larger than sqrt(3)/2, or 0.866
void SVM(float alpha, float beta, uint32_t* tAout, uint32_t* tBout, uint32_t* tCout){
    806c:	deffeb04 	addi	sp,sp,-84
    8070:	df001415 	stw	fp,80(sp)
    8074:	df001404 	addi	fp,sp,80
    8078:	e13ffc15 	stw	r4,-16(fp)
    807c:	e17ffd15 	stw	r5,-12(fp)
    8080:	e1bffe15 	stw	r6,-8(fp)
    8084:	e1ffff15 	stw	r7,-4(fp)

	uint32_t Sextant;

	if (beta >= 0.0f)
    8088:	e0fffd17 	ldw	r3,-12(fp)
    808c:	0005883a 	mov	r2,zero
    8090:	1885f932 	custom	228,r2,r3,r2
    8094:	10001f26 	beq	r2,zero,8114 <SVM+0xa8>
	{
		if (alpha >= 0.0f)
    8098:	e0fffc17 	ldw	r3,-16(fp)
    809c:	0005883a 	mov	r2,zero
    80a0:	1885f932 	custom	228,r2,r3,r2
    80a4:	10000d26 	beq	r2,zero,80dc <SVM+0x70>
		{
			//quadrant I
			if (one_by_sqrt3 * beta > alpha)
    80a8:	00cfc534 	movhi	r3,16148
    80ac:	18f34e84 	addi	r3,r3,-12998
    80b0:	e0bffd17 	ldw	r2,-12(fp)
    80b4:	1887ff32 	custom	252,r3,r3,r2
    80b8:	e0bffc17 	ldw	r2,-16(fp)
    80bc:	1885f972 	custom	229,r2,r3,r2
    80c0:	10000326 	beq	r2,zero,80d0 <SVM+0x64>
				Sextant = 2;
    80c4:	00800084 	movi	r2,2
    80c8:	e0bfec15 	stw	r2,-80(fp)
    80cc:	00002f06 	br	818c <SVM+0x120>
			else
				Sextant = 1;
    80d0:	00800044 	movi	r2,1
    80d4:	e0bfec15 	stw	r2,-80(fp)
    80d8:	00002c06 	br	818c <SVM+0x120>

		} else {
			//quadrant II
			if (-one_by_sqrt3 * beta > alpha)
    80dc:	008fc534 	movhi	r2,16148
    80e0:	10b34e84 	addi	r2,r2,-12998
    80e4:	1007f872 	custom	225,r3,r2,zero
    80e8:	e0bffd17 	ldw	r2,-12(fp)
    80ec:	1887ff32 	custom	252,r3,r3,r2
    80f0:	e0bffc17 	ldw	r2,-16(fp)
    80f4:	1885f972 	custom	229,r2,r3,r2
    80f8:	10000326 	beq	r2,zero,8108 <SVM+0x9c>
				Sextant = 3;
    80fc:	008000c4 	movi	r2,3
    8100:	e0bfec15 	stw	r2,-80(fp)
    8104:	00002106 	br	818c <SVM+0x120>
			else
				Sextant = 2;
    8108:	00800084 	movi	r2,2
    810c:	e0bfec15 	stw	r2,-80(fp)
    8110:	00001e06 	br	818c <SVM+0x120>
		}
	} else {
		if (alpha >= 0.0f)
    8114:	e0fffc17 	ldw	r3,-16(fp)
    8118:	0005883a 	mov	r2,zero
    811c:	1885f932 	custom	228,r2,r3,r2
    8120:	10000e26 	beq	r2,zero,815c <SVM+0xf0>
		{
			//quadrant IV
			if (-one_by_sqrt3 * beta > alpha)
    8124:	008fc534 	movhi	r2,16148
    8128:	10b34e84 	addi	r2,r2,-12998
    812c:	1007f872 	custom	225,r3,r2,zero
    8130:	e0bffd17 	ldw	r2,-12(fp)
    8134:	1887ff32 	custom	252,r3,r3,r2
    8138:	e0bffc17 	ldw	r2,-16(fp)
    813c:	1885f972 	custom	229,r2,r3,r2
    8140:	10000326 	beq	r2,zero,8150 <SVM+0xe4>
				Sextant = 5;
    8144:	00800144 	movi	r2,5
    8148:	e0bfec15 	stw	r2,-80(fp)
    814c:	00000f06 	br	818c <SVM+0x120>
			else
				Sextant = 6;
    8150:	00800184 	movi	r2,6
    8154:	e0bfec15 	stw	r2,-80(fp)
    8158:	00000c06 	br	818c <SVM+0x120>
		} else {
			//quadrant III
			if (one_by_sqrt3 * beta > alpha)
    815c:	00cfc534 	movhi	r3,16148
    8160:	18f34e84 	addi	r3,r3,-12998
    8164:	e0bffd17 	ldw	r2,-12(fp)
    8168:	1887ff32 	custom	252,r3,r3,r2
    816c:	e0bffc17 	ldw	r2,-16(fp)
    8170:	1885f972 	custom	229,r2,r3,r2
    8174:	10000326 	beq	r2,zero,8184 <SVM+0x118>
				Sextant = 4;
    8178:	00800104 	movi	r2,4
    817c:	e0bfec15 	stw	r2,-80(fp)
    8180:	00000206 	br	818c <SVM+0x120>
			else
				Sextant = 5;
    8184:	00800144 	movi	r2,5
    8188:	e0bfec15 	stw	r2,-80(fp)
	}

	// PWM timings
	uint32_t tA, tB, tC;

	switch (Sextant) {
    818c:	e0bfec17 	ldw	r2,-80(fp)
    8190:	108001e8 	cmpgeui	r2,r2,7
    8194:	1001911e 	bne	r2,zero,87dc <SVM+0x770>
    8198:	e0bfec17 	ldw	r2,-80(fp)
    819c:	1085883a 	add	r2,r2,r2
    81a0:	1087883a 	add	r3,r2,r2
    81a4:	00800074 	movhi	r2,1
    81a8:	10a06e04 	addi	r2,r2,-32328
    81ac:	1885883a 	add	r2,r3,r2
    81b0:	10800017 	ldw	r2,0(r2)
    81b4:	1000683a 	jmp	r2
    81b8:	000087dc 	xori	zero,zero,543
    81bc:	000081d4 	movui	zero,519
    81c0:	000082d0 	cmplti	zero,zero,523
    81c4:	000083d4 	movui	zero,527
    81c8:	000084d4 	movui	zero,531
    81cc:	000085d4 	movui	zero,535
    81d0:	000086dc 	xori	zero,zero,539

		// sextant 1-2
		case 1:
		{
			// Vector on-times
			uint32_t t1 = (alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
    81d4:	00cfc534 	movhi	r3,16148
    81d8:	18f34e84 	addi	r3,r3,-12998
    81dc:	e0bffd17 	ldw	r2,-12(fp)
    81e0:	1885ff32 	custom	252,r2,r3,r2
    81e4:	e0fffc17 	ldw	r3,-16(fp)
    81e8:	1887ffb2 	custom	254,r3,r3,r2
    81ec:	0084e204 	movi	r2,5000
    81f0:	1005feb2 	custom	250,r2,r2,zero
    81f4:	1885ff32 	custom	252,r2,r3,r2
    81f8:	00d3c034 	movhi	r3,20224
    81fc:	10c7f932 	custom	228,r3,r2,r3
    8200:	1800031e 	bne	r3,zero,8210 <SVM+0x1a4>
    8204:	1005fe72 	custom	249,r2,r2,zero
    8208:	e0bff015 	stw	r2,-64(fp)
    820c:	00000706 	br	822c <SVM+0x1c0>
    8210:	00d3c034 	movhi	r3,20224
    8214:	10c5ffb2 	custom	254,r2,r2,r3
    8218:	1005fe72 	custom	249,r2,r2,zero
    821c:	e0bff015 	stw	r2,-64(fp)
    8220:	e0bff017 	ldw	r2,-64(fp)
    8224:	10a0003c 	xorhi	r2,r2,32768
    8228:	e0bff015 	stw	r2,-64(fp)
    822c:	e0bff017 	ldw	r2,-64(fp)
    8230:	e0bff015 	stw	r2,-64(fp)
			uint32_t t2 = (two_by_sqrt3 * beta) * PWMHalfPeriod;
    8234:	00cfe534 	movhi	r3,16276
    8238:	18f34e84 	addi	r3,r3,-12998
    823c:	e0bffd17 	ldw	r2,-12(fp)
    8240:	1887ff32 	custom	252,r3,r3,r2
    8244:	0084e204 	movi	r2,5000
    8248:	1005feb2 	custom	250,r2,r2,zero
    824c:	1885ff32 	custom	252,r2,r3,r2
    8250:	00d3c034 	movhi	r3,20224
    8254:	10c7f932 	custom	228,r3,r2,r3
    8258:	1800031e 	bne	r3,zero,8268 <SVM+0x1fc>
    825c:	1005fe72 	custom	249,r2,r2,zero
    8260:	e0bff115 	stw	r2,-60(fp)
    8264:	00000706 	br	8284 <SVM+0x218>
    8268:	00d3c034 	movhi	r3,20224
    826c:	10c5ffb2 	custom	254,r2,r2,r3
    8270:	1005fe72 	custom	249,r2,r2,zero
    8274:	e0bff115 	stw	r2,-60(fp)
    8278:	e0bff117 	ldw	r2,-60(fp)
    827c:	10a0003c 	xorhi	r2,r2,32768
    8280:	e0bff115 	stw	r2,-60(fp)
    8284:	e0bff117 	ldw	r2,-60(fp)
    8288:	e0bff115 	stw	r2,-60(fp)

			// PWM timings
			tA = (PWMHalfPeriod - t1 - t2) / 2;
    828c:	0084e204 	movi	r2,5000
    8290:	1007883a 	mov	r3,r2
    8294:	e0bff017 	ldw	r2,-64(fp)
    8298:	1887c83a 	sub	r3,r3,r2
    829c:	e0bff117 	ldw	r2,-60(fp)
    82a0:	1885c83a 	sub	r2,r3,r2
    82a4:	1004d07a 	srli	r2,r2,1
    82a8:	e0bfed15 	stw	r2,-76(fp)
			tB = tA + t1;
    82ac:	e0ffed17 	ldw	r3,-76(fp)
    82b0:	e0bff017 	ldw	r2,-64(fp)
    82b4:	1885883a 	add	r2,r3,r2
    82b8:	e0bfee15 	stw	r2,-72(fp)
			tC = tB + t2;
    82bc:	e0ffee17 	ldw	r3,-72(fp)
    82c0:	e0bff117 	ldw	r2,-60(fp)
    82c4:	1885883a 	add	r2,r3,r2
    82c8:	e0bfef15 	stw	r2,-68(fp)

			break;
    82cc:	00014306 	br	87dc <SVM+0x770>

		// sextant 2-3
		case 2:
		{
			// Vector on-times
			uint32_t t2 = (alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
    82d0:	00cfc534 	movhi	r3,16148
    82d4:	18f34e84 	addi	r3,r3,-12998
    82d8:	e0bffd17 	ldw	r2,-12(fp)
    82dc:	1887ff32 	custom	252,r3,r3,r2
    82e0:	e0bffc17 	ldw	r2,-16(fp)
    82e4:	1887ff72 	custom	253,r3,r3,r2
    82e8:	0084e204 	movi	r2,5000
    82ec:	1005feb2 	custom	250,r2,r2,zero
    82f0:	1885ff32 	custom	252,r2,r3,r2
    82f4:	00d3c034 	movhi	r3,20224
    82f8:	10c7f932 	custom	228,r3,r2,r3
    82fc:	1800031e 	bne	r3,zero,830c <SVM+0x2a0>
    8300:	1005fe72 	custom	249,r2,r2,zero
    8304:	e0bff215 	stw	r2,-56(fp)
    8308:	00000706 	br	8328 <SVM+0x2bc>
    830c:	00d3c034 	movhi	r3,20224
    8310:	10c5ffb2 	custom	254,r2,r2,r3
    8314:	1005fe72 	custom	249,r2,r2,zero
    8318:	e0bff215 	stw	r2,-56(fp)
    831c:	e0bff217 	ldw	r2,-56(fp)
    8320:	10a0003c 	xorhi	r2,r2,32768
    8324:	e0bff215 	stw	r2,-56(fp)
    8328:	e0bff217 	ldw	r2,-56(fp)
    832c:	e0bff215 	stw	r2,-56(fp)
			uint32_t t3 = (-alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
    8330:	00cfc534 	movhi	r3,16148
    8334:	18f34e84 	addi	r3,r3,-12998
    8338:	e0bffd17 	ldw	r2,-12(fp)
    833c:	1887ff32 	custom	252,r3,r3,r2
    8340:	e0bffc17 	ldw	r2,-16(fp)
    8344:	1887ffb2 	custom	254,r3,r3,r2
    8348:	0084e204 	movi	r2,5000
    834c:	1005feb2 	custom	250,r2,r2,zero
    8350:	1885ff32 	custom	252,r2,r3,r2
    8354:	00d3c034 	movhi	r3,20224
    8358:	10c7f932 	custom	228,r3,r2,r3
    835c:	1800031e 	bne	r3,zero,836c <SVM+0x300>
    8360:	1005fe72 	custom	249,r2,r2,zero
    8364:	e0bff315 	stw	r2,-52(fp)
    8368:	00000706 	br	8388 <SVM+0x31c>
    836c:	00d3c034 	movhi	r3,20224
    8370:	10c5ffb2 	custom	254,r2,r2,r3
    8374:	1005fe72 	custom	249,r2,r2,zero
    8378:	e0bff315 	stw	r2,-52(fp)
    837c:	e0bff317 	ldw	r2,-52(fp)
    8380:	10a0003c 	xorhi	r2,r2,32768
    8384:	e0bff315 	stw	r2,-52(fp)
    8388:	e0bff317 	ldw	r2,-52(fp)
    838c:	e0bff315 	stw	r2,-52(fp)

			// PWM timings
			tB = (PWMHalfPeriod - t2 - t3) / 2;
    8390:	0084e204 	movi	r2,5000
    8394:	1007883a 	mov	r3,r2
    8398:	e0bff217 	ldw	r2,-56(fp)
    839c:	1887c83a 	sub	r3,r3,r2
    83a0:	e0bff317 	ldw	r2,-52(fp)
    83a4:	1885c83a 	sub	r2,r3,r2
    83a8:	1004d07a 	srli	r2,r2,1
    83ac:	e0bfee15 	stw	r2,-72(fp)
			tA = tB + t3;
    83b0:	e0ffee17 	ldw	r3,-72(fp)
    83b4:	e0bff317 	ldw	r2,-52(fp)
    83b8:	1885883a 	add	r2,r3,r2
    83bc:	e0bfed15 	stw	r2,-76(fp)
			tC = tA + t2;
    83c0:	e0ffed17 	ldw	r3,-76(fp)
    83c4:	e0bff217 	ldw	r2,-56(fp)
    83c8:	1885883a 	add	r2,r3,r2
    83cc:	e0bfef15 	stw	r2,-68(fp)

			break;
    83d0:	00010206 	br	87dc <SVM+0x770>

		// sextant 3-4
		case 3:
		{
			// Vector on-times
			uint32_t t3 = (two_by_sqrt3 * beta) * PWMHalfPeriod;
    83d4:	00cfe534 	movhi	r3,16276
    83d8:	18f34e84 	addi	r3,r3,-12998
    83dc:	e0bffd17 	ldw	r2,-12(fp)
    83e0:	1887ff32 	custom	252,r3,r3,r2
    83e4:	0084e204 	movi	r2,5000
    83e8:	1005feb2 	custom	250,r2,r2,zero
    83ec:	1885ff32 	custom	252,r2,r3,r2
    83f0:	00d3c034 	movhi	r3,20224
    83f4:	10c7f932 	custom	228,r3,r2,r3
    83f8:	1800031e 	bne	r3,zero,8408 <SVM+0x39c>
    83fc:	1005fe72 	custom	249,r2,r2,zero
    8400:	e0bff415 	stw	r2,-48(fp)
    8404:	00000706 	br	8424 <SVM+0x3b8>
    8408:	00d3c034 	movhi	r3,20224
    840c:	10c5ffb2 	custom	254,r2,r2,r3
    8410:	1005fe72 	custom	249,r2,r2,zero
    8414:	e0bff415 	stw	r2,-48(fp)
    8418:	e0bff417 	ldw	r2,-48(fp)
    841c:	10a0003c 	xorhi	r2,r2,32768
    8420:	e0bff415 	stw	r2,-48(fp)
    8424:	e0bff417 	ldw	r2,-48(fp)
    8428:	e0bff415 	stw	r2,-48(fp)
			uint32_t t4 = (-alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
    842c:	e0bffc17 	ldw	r2,-16(fp)
    8430:	1007f872 	custom	225,r3,r2,zero
    8434:	010fc534 	movhi	r4,16148
    8438:	21334e84 	addi	r4,r4,-12998
    843c:	e0bffd17 	ldw	r2,-12(fp)
    8440:	2085ff32 	custom	252,r2,r4,r2
    8444:	1887ffb2 	custom	254,r3,r3,r2
    8448:	0084e204 	movi	r2,5000
    844c:	1005feb2 	custom	250,r2,r2,zero
    8450:	1885ff32 	custom	252,r2,r3,r2
    8454:	00d3c034 	movhi	r3,20224
    8458:	10c7f932 	custom	228,r3,r2,r3
    845c:	1800031e 	bne	r3,zero,846c <SVM+0x400>
    8460:	1005fe72 	custom	249,r2,r2,zero
    8464:	e0bff515 	stw	r2,-44(fp)
    8468:	00000706 	br	8488 <SVM+0x41c>
    846c:	00d3c034 	movhi	r3,20224
    8470:	10c5ffb2 	custom	254,r2,r2,r3
    8474:	1005fe72 	custom	249,r2,r2,zero
    8478:	e0bff515 	stw	r2,-44(fp)
    847c:	e0bff517 	ldw	r2,-44(fp)
    8480:	10a0003c 	xorhi	r2,r2,32768
    8484:	e0bff515 	stw	r2,-44(fp)
    8488:	e0bff517 	ldw	r2,-44(fp)
    848c:	e0bff515 	stw	r2,-44(fp)

			// PWM timings
			tB = (PWMHalfPeriod - t3 - t4) / 2;
    8490:	0084e204 	movi	r2,5000
    8494:	1007883a 	mov	r3,r2
    8498:	e0bff417 	ldw	r2,-48(fp)
    849c:	1887c83a 	sub	r3,r3,r2
    84a0:	e0bff517 	ldw	r2,-44(fp)
    84a4:	1885c83a 	sub	r2,r3,r2
    84a8:	1004d07a 	srli	r2,r2,1
    84ac:	e0bfee15 	stw	r2,-72(fp)
			tC = tB + t3;
    84b0:	e0ffee17 	ldw	r3,-72(fp)
    84b4:	e0bff417 	ldw	r2,-48(fp)
    84b8:	1885883a 	add	r2,r3,r2
    84bc:	e0bfef15 	stw	r2,-68(fp)
			tA = tC + t4;
    84c0:	e0ffef17 	ldw	r3,-68(fp)
    84c4:	e0bff517 	ldw	r2,-44(fp)
    84c8:	1885883a 	add	r2,r3,r2
    84cc:	e0bfed15 	stw	r2,-76(fp)

			break;
    84d0:	0000c206 	br	87dc <SVM+0x770>

		// sextant 4-5
		case 4:
		{
			// Vector on-times
			uint32_t t4 = (-alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
    84d4:	00cfc534 	movhi	r3,16148
    84d8:	18f34e84 	addi	r3,r3,-12998
    84dc:	e0bffd17 	ldw	r2,-12(fp)
    84e0:	1887ff32 	custom	252,r3,r3,r2
    84e4:	e0bffc17 	ldw	r2,-16(fp)
    84e8:	1887ffb2 	custom	254,r3,r3,r2
    84ec:	0084e204 	movi	r2,5000
    84f0:	1005feb2 	custom	250,r2,r2,zero
    84f4:	1885ff32 	custom	252,r2,r3,r2
    84f8:	00d3c034 	movhi	r3,20224
    84fc:	10c7f932 	custom	228,r3,r2,r3
    8500:	1800031e 	bne	r3,zero,8510 <SVM+0x4a4>
    8504:	1005fe72 	custom	249,r2,r2,zero
    8508:	e0bff615 	stw	r2,-40(fp)
    850c:	00000706 	br	852c <SVM+0x4c0>
    8510:	00d3c034 	movhi	r3,20224
    8514:	10c5ffb2 	custom	254,r2,r2,r3
    8518:	1005fe72 	custom	249,r2,r2,zero
    851c:	e0bff615 	stw	r2,-40(fp)
    8520:	e0bff617 	ldw	r2,-40(fp)
    8524:	10a0003c 	xorhi	r2,r2,32768
    8528:	e0bff615 	stw	r2,-40(fp)
    852c:	e0bff617 	ldw	r2,-40(fp)
    8530:	e0bff615 	stw	r2,-40(fp)
			uint32_t t5 = (-two_by_sqrt3 * beta) * PWMHalfPeriod;
    8534:	008fe534 	movhi	r2,16276
    8538:	10b34e84 	addi	r2,r2,-12998
    853c:	1007f872 	custom	225,r3,r2,zero
    8540:	e0bffd17 	ldw	r2,-12(fp)
    8544:	1887ff32 	custom	252,r3,r3,r2
    8548:	0084e204 	movi	r2,5000
    854c:	1005feb2 	custom	250,r2,r2,zero
    8550:	1885ff32 	custom	252,r2,r3,r2
    8554:	00d3c034 	movhi	r3,20224
    8558:	10c7f932 	custom	228,r3,r2,r3
    855c:	1800031e 	bne	r3,zero,856c <SVM+0x500>
    8560:	1005fe72 	custom	249,r2,r2,zero
    8564:	e0bff715 	stw	r2,-36(fp)
    8568:	00000706 	br	8588 <SVM+0x51c>
    856c:	00d3c034 	movhi	r3,20224
    8570:	10c5ffb2 	custom	254,r2,r2,r3
    8574:	1005fe72 	custom	249,r2,r2,zero
    8578:	e0bff715 	stw	r2,-36(fp)
    857c:	e0bff717 	ldw	r2,-36(fp)
    8580:	10a0003c 	xorhi	r2,r2,32768
    8584:	e0bff715 	stw	r2,-36(fp)
    8588:	e0bff717 	ldw	r2,-36(fp)
    858c:	e0bff715 	stw	r2,-36(fp)

			// PWM timings
			tC = (PWMHalfPeriod - t4 - t5) / 2;
    8590:	0084e204 	movi	r2,5000
    8594:	1007883a 	mov	r3,r2
    8598:	e0bff617 	ldw	r2,-40(fp)
    859c:	1887c83a 	sub	r3,r3,r2
    85a0:	e0bff717 	ldw	r2,-36(fp)
    85a4:	1885c83a 	sub	r2,r3,r2
    85a8:	1004d07a 	srli	r2,r2,1
    85ac:	e0bfef15 	stw	r2,-68(fp)
			tB = tC + t5;
    85b0:	e0ffef17 	ldw	r3,-68(fp)
    85b4:	e0bff717 	ldw	r2,-36(fp)
    85b8:	1885883a 	add	r2,r3,r2
    85bc:	e0bfee15 	stw	r2,-72(fp)
			tA = tB + t4;
    85c0:	e0ffee17 	ldw	r3,-72(fp)
    85c4:	e0bff617 	ldw	r2,-40(fp)
    85c8:	1885883a 	add	r2,r3,r2
    85cc:	e0bfed15 	stw	r2,-76(fp)

			break;
    85d0:	00008206 	br	87dc <SVM+0x770>

		// sextant 5-6
		case 5:
		{
			// Vector on-times
			uint32_t t5 = (-alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
    85d4:	e0bffc17 	ldw	r2,-16(fp)
    85d8:	1007f872 	custom	225,r3,r2,zero
    85dc:	010fc534 	movhi	r4,16148
    85e0:	21334e84 	addi	r4,r4,-12998
    85e4:	e0bffd17 	ldw	r2,-12(fp)
    85e8:	2085ff32 	custom	252,r2,r4,r2
    85ec:	1887ffb2 	custom	254,r3,r3,r2
    85f0:	0084e204 	movi	r2,5000
    85f4:	1005feb2 	custom	250,r2,r2,zero
    85f8:	1885ff32 	custom	252,r2,r3,r2
    85fc:	00d3c034 	movhi	r3,20224
    8600:	10c7f932 	custom	228,r3,r2,r3
    8604:	1800031e 	bne	r3,zero,8614 <SVM+0x5a8>
    8608:	1005fe72 	custom	249,r2,r2,zero
    860c:	e0bff815 	stw	r2,-32(fp)
    8610:	00000706 	br	8630 <SVM+0x5c4>
    8614:	00d3c034 	movhi	r3,20224
    8618:	10c5ffb2 	custom	254,r2,r2,r3
    861c:	1005fe72 	custom	249,r2,r2,zero
    8620:	e0bff815 	stw	r2,-32(fp)
    8624:	e0bff817 	ldw	r2,-32(fp)
    8628:	10a0003c 	xorhi	r2,r2,32768
    862c:	e0bff815 	stw	r2,-32(fp)
    8630:	e0bff817 	ldw	r2,-32(fp)
    8634:	e0bff815 	stw	r2,-32(fp)
			uint32_t t6 = (alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
    8638:	00cfc534 	movhi	r3,16148
    863c:	18f34e84 	addi	r3,r3,-12998
    8640:	e0bffd17 	ldw	r2,-12(fp)
    8644:	1885ff32 	custom	252,r2,r3,r2
    8648:	e0fffc17 	ldw	r3,-16(fp)
    864c:	1887ffb2 	custom	254,r3,r3,r2
    8650:	0084e204 	movi	r2,5000
    8654:	1005feb2 	custom	250,r2,r2,zero
    8658:	1885ff32 	custom	252,r2,r3,r2
    865c:	00d3c034 	movhi	r3,20224
    8660:	10c7f932 	custom	228,r3,r2,r3
    8664:	1800031e 	bne	r3,zero,8674 <SVM+0x608>
    8668:	1005fe72 	custom	249,r2,r2,zero
    866c:	e0bff915 	stw	r2,-28(fp)
    8670:	00000706 	br	8690 <SVM+0x624>
    8674:	00d3c034 	movhi	r3,20224
    8678:	10c5ffb2 	custom	254,r2,r2,r3
    867c:	1005fe72 	custom	249,r2,r2,zero
    8680:	e0bff915 	stw	r2,-28(fp)
    8684:	e0bff917 	ldw	r2,-28(fp)
    8688:	10a0003c 	xorhi	r2,r2,32768
    868c:	e0bff915 	stw	r2,-28(fp)
    8690:	e0bff917 	ldw	r2,-28(fp)
    8694:	e0bff915 	stw	r2,-28(fp)

			// PWM timings
			tC = (PWMHalfPeriod - t5 - t6) / 2;
    8698:	0084e204 	movi	r2,5000
    869c:	1007883a 	mov	r3,r2
    86a0:	e0bff817 	ldw	r2,-32(fp)
    86a4:	1887c83a 	sub	r3,r3,r2
    86a8:	e0bff917 	ldw	r2,-28(fp)
    86ac:	1885c83a 	sub	r2,r3,r2
    86b0:	1004d07a 	srli	r2,r2,1
    86b4:	e0bfef15 	stw	r2,-68(fp)
			tA = tC + t5;
    86b8:	e0ffef17 	ldw	r3,-68(fp)
    86bc:	e0bff817 	ldw	r2,-32(fp)
    86c0:	1885883a 	add	r2,r3,r2
    86c4:	e0bfed15 	stw	r2,-76(fp)
			tB = tA + t6;
    86c8:	e0ffed17 	ldw	r3,-76(fp)
    86cc:	e0bff917 	ldw	r2,-28(fp)
    86d0:	1885883a 	add	r2,r3,r2
    86d4:	e0bfee15 	stw	r2,-72(fp)

			break;
    86d8:	00004006 	br	87dc <SVM+0x770>

		// sextant 6-1
		case 6:
		{
			// Vector on-times
			uint32_t t6 = (-two_by_sqrt3 * beta) * PWMHalfPeriod;
    86dc:	008fe534 	movhi	r2,16276
    86e0:	10b34e84 	addi	r2,r2,-12998
    86e4:	1007f872 	custom	225,r3,r2,zero
    86e8:	e0bffd17 	ldw	r2,-12(fp)
    86ec:	1887ff32 	custom	252,r3,r3,r2
    86f0:	0084e204 	movi	r2,5000
    86f4:	1005feb2 	custom	250,r2,r2,zero
    86f8:	1885ff32 	custom	252,r2,r3,r2
    86fc:	00d3c034 	movhi	r3,20224
    8700:	10c7f932 	custom	228,r3,r2,r3
    8704:	1800031e 	bne	r3,zero,8714 <SVM+0x6a8>
    8708:	1005fe72 	custom	249,r2,r2,zero
    870c:	e0bffa15 	stw	r2,-24(fp)
    8710:	00000706 	br	8730 <SVM+0x6c4>
    8714:	00d3c034 	movhi	r3,20224
    8718:	10c5ffb2 	custom	254,r2,r2,r3
    871c:	1005fe72 	custom	249,r2,r2,zero
    8720:	e0bffa15 	stw	r2,-24(fp)
    8724:	e0bffa17 	ldw	r2,-24(fp)
    8728:	10a0003c 	xorhi	r2,r2,32768
    872c:	e0bffa15 	stw	r2,-24(fp)
    8730:	e0bffa17 	ldw	r2,-24(fp)
    8734:	e0bffa15 	stw	r2,-24(fp)
			uint32_t t1 = (alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
    8738:	00cfc534 	movhi	r3,16148
    873c:	18f34e84 	addi	r3,r3,-12998
    8740:	e0bffd17 	ldw	r2,-12(fp)
    8744:	1887ff32 	custom	252,r3,r3,r2
    8748:	e0bffc17 	ldw	r2,-16(fp)
    874c:	1887ff72 	custom	253,r3,r3,r2
    8750:	0084e204 	movi	r2,5000
    8754:	1005feb2 	custom	250,r2,r2,zero
    8758:	1885ff32 	custom	252,r2,r3,r2
    875c:	00d3c034 	movhi	r3,20224
    8760:	10c7f932 	custom	228,r3,r2,r3
    8764:	1800031e 	bne	r3,zero,8774 <SVM+0x708>
    8768:	1005fe72 	custom	249,r2,r2,zero
    876c:	e0bffb15 	stw	r2,-20(fp)
    8770:	00000706 	br	8790 <SVM+0x724>
    8774:	00d3c034 	movhi	r3,20224
    8778:	10c5ffb2 	custom	254,r2,r2,r3
    877c:	1005fe72 	custom	249,r2,r2,zero
    8780:	e0bffb15 	stw	r2,-20(fp)
    8784:	e0bffb17 	ldw	r2,-20(fp)
    8788:	10a0003c 	xorhi	r2,r2,32768
    878c:	e0bffb15 	stw	r2,-20(fp)
    8790:	e0bffb17 	ldw	r2,-20(fp)
    8794:	e0bffb15 	stw	r2,-20(fp)

			// PWM timings
			tA = (PWMHalfPeriod - t6 - t1) / 2;
    8798:	0084e204 	movi	r2,5000
    879c:	1007883a 	mov	r3,r2
    87a0:	e0bffa17 	ldw	r2,-24(fp)
    87a4:	1887c83a 	sub	r3,r3,r2
    87a8:	e0bffb17 	ldw	r2,-20(fp)
    87ac:	1885c83a 	sub	r2,r3,r2
    87b0:	1004d07a 	srli	r2,r2,1
    87b4:	e0bfed15 	stw	r2,-76(fp)
			tC = tA + t1;
    87b8:	e0ffed17 	ldw	r3,-76(fp)
    87bc:	e0bffb17 	ldw	r2,-20(fp)
    87c0:	1885883a 	add	r2,r3,r2
    87c4:	e0bfef15 	stw	r2,-68(fp)
			tB = tC + t6;
    87c8:	e0ffef17 	ldw	r3,-68(fp)
    87cc:	e0bffa17 	ldw	r2,-24(fp)
    87d0:	1885883a 	add	r2,r3,r2
    87d4:	e0bfee15 	stw	r2,-72(fp)

			break;
    87d8:	0001883a 	nop
		}

	} //switch

	*tAout = tA;
    87dc:	e0bffe17 	ldw	r2,-8(fp)
    87e0:	e0ffed17 	ldw	r3,-76(fp)
    87e4:	10c00015 	stw	r3,0(r2)
	*tBout = tB;
    87e8:	e0bfff17 	ldw	r2,-4(fp)
    87ec:	e0ffee17 	ldw	r3,-72(fp)
    87f0:	10c00015 	stw	r3,0(r2)
	*tCout = tC;
    87f4:	e0800117 	ldw	r2,4(fp)
    87f8:	e0ffef17 	ldw	r3,-68(fp)
    87fc:	10c00015 	stw	r3,0(r2)

}
    8800:	e037883a 	mov	sp,fp
    8804:	df000017 	ldw	fp,0(sp)
    8808:	dec00104 	addi	sp,sp,4
    880c:	f800283a 	ret

00008810 <control_current>:

void control_current(float ItargetAlpha, float ItargetBeta, float Ia, float Ib){
    8810:	deffec04 	addi	sp,sp,-80
    8814:	dfc01315 	stw	ra,76(sp)
    8818:	df001215 	stw	fp,72(sp)
    881c:	df001204 	addi	fp,sp,72
    8820:	e13ffc15 	stw	r4,-16(fp)
    8824:	e17ffd15 	stw	r5,-12(fp)
    8828:	e1bffe15 	stw	r6,-8(fp)
    882c:	e1ffff15 	stw	r7,-4(fp)

	float Ialpha = Ia;
    8830:	e0bffe17 	ldw	r2,-8(fp)
    8834:	e0bff215 	stw	r2,-56(fp)
	float Ibeta = one_by_sqrt3 * Ia + two_by_sqrt3 * Ib; 
    8838:	00cfc534 	movhi	r3,16148
    883c:	18f34e84 	addi	r3,r3,-12998
    8840:	e0bffe17 	ldw	r2,-8(fp)
    8844:	1887ff32 	custom	252,r3,r3,r2
    8848:	010fe534 	movhi	r4,16276
    884c:	21334e84 	addi	r4,r4,-12998
    8850:	e0bfff17 	ldw	r2,-4(fp)
    8854:	2085ff32 	custom	252,r2,r4,r2
    8858:	1885ff72 	custom	253,r2,r3,r2
    885c:	e0bff315 	stw	r2,-52(fp)

	float IerrAlpha = ItargetAlpha - Ialpha;
    8860:	e0fffc17 	ldw	r3,-16(fp)
    8864:	e0bff217 	ldw	r2,-56(fp)
    8868:	1885ffb2 	custom	254,r2,r3,r2
    886c:	e0bff415 	stw	r2,-48(fp)
	float IerrBeta = ItargetBeta - Ibeta;
    8870:	e0fffd17 	ldw	r3,-12(fp)
    8874:	e0bff317 	ldw	r2,-52(fp)
    8878:	1885ffb2 	custom	254,r2,r3,r2
    887c:	e0bff515 	stw	r2,-44(fp)

	static float IerrVstateAlpha = 0.0f;
	static float IerrVstateBeta = 0.0f;

	float Valpha = IerrVstateAlpha + IerrAlpha * currentKp;
    8880:	00cec0f4 	movhi	r3,15107
    8884:	18c49bc4 	addi	r3,r3,4719
    8888:	e0bff417 	ldw	r2,-48(fp)
    888c:	1887ff32 	custom	252,r3,r3,r2
    8890:	d0a1bc17 	ldw	r2,-30992(gp)
    8894:	1885ff72 	custom	253,r2,r3,r2
    8898:	e0bfef15 	stw	r2,-68(fp)
	float Vbeta = IerrVstateBeta + IerrBeta * currentKp;
    889c:	00cec0f4 	movhi	r3,15107
    88a0:	18c49bc4 	addi	r3,r3,4719
    88a4:	e0bff517 	ldw	r2,-44(fp)
    88a8:	1887ff32 	custom	252,r3,r3,r2
    88ac:	d0a1bd17 	ldw	r2,-30988(gp)
    88b0:	1885ff72 	custom	253,r2,r3,r2
    88b4:	e0bff015 	stw	r2,-64(fp)

	float Vscalefactor = sqrt3_by_2 * Q_rsqrt(Valpha*Valpha + Vbeta*Vbeta);
    88b8:	e0ffef17 	ldw	r3,-68(fp)
    88bc:	e0bfef17 	ldw	r2,-68(fp)
    88c0:	1887ff32 	custom	252,r3,r3,r2
    88c4:	e13ff017 	ldw	r4,-64(fp)
    88c8:	e0bff017 	ldw	r2,-64(fp)
    88cc:	2085ff32 	custom	252,r2,r4,r2
    88d0:	1885ff72 	custom	253,r2,r3,r2
    88d4:	1009883a 	mov	r4,r2
    88d8:	00096580 	call	9658 <Q_rsqrt>
    88dc:	1007883a 	mov	r3,r2
    88e0:	008fd7b4 	movhi	r2,16222
    88e4:	10acf5c4 	addi	r2,r2,-19497
    88e8:	1885ff32 	custom	252,r2,r3,r2
    88ec:	e0bff615 	stw	r2,-40(fp)
	if (Vscalefactor < 1)
    88f0:	e0fff617 	ldw	r3,-40(fp)
    88f4:	008fe034 	movhi	r2,16256
    88f8:	1885f9f2 	custom	231,r2,r3,r2
    88fc:	10000926 	beq	r2,zero,8924 <control_current+0x114>
	{
		Valpha *= Vscalefactor;
    8900:	e0ffef17 	ldw	r3,-68(fp)
    8904:	e0bff617 	ldw	r2,-40(fp)
    8908:	1885ff32 	custom	252,r2,r3,r2
    890c:	e0bfef15 	stw	r2,-68(fp)
		Vbeta *= Vscalefactor;
    8910:	e0fff017 	ldw	r3,-64(fp)
    8914:	e0bff617 	ldw	r2,-40(fp)
    8918:	1885ff32 	custom	252,r2,r3,r2
    891c:	e0bff015 	stw	r2,-64(fp)
    8920:	00001206 	br	896c <control_current+0x15c>
	} else {
		IerrVstateAlpha += IerrAlpha * (currentKi * PWMPeriod);
    8924:	00d04834 	movhi	r3,16672
    8928:	008e20f4 	movhi	r2,14467
    892c:	10849bc4 	addi	r2,r2,4719
    8930:	1887ff32 	custom	252,r3,r3,r2
    8934:	e0bff417 	ldw	r2,-48(fp)
    8938:	1887ff32 	custom	252,r3,r3,r2
    893c:	d0a1bc17 	ldw	r2,-30992(gp)
    8940:	1885ff72 	custom	253,r2,r3,r2
    8944:	d0a1bc15 	stw	r2,-30992(gp)
		IerrVstateBeta += IerrBeta * (currentKi * PWMPeriod);
    8948:	00d04834 	movhi	r3,16672
    894c:	008e20f4 	movhi	r2,14467
    8950:	10849bc4 	addi	r2,r2,4719
    8954:	1887ff32 	custom	252,r3,r3,r2
    8958:	e0bff517 	ldw	r2,-44(fp)
    895c:	1887ff32 	custom	252,r3,r3,r2
    8960:	d0a1bd17 	ldw	r2,-30988(gp)
    8964:	1885ff72 	custom	253,r2,r3,r2
    8968:	d0a1bd15 	stw	r2,-30988(gp)
	}

	uint32_t tABC[3];
	SVM(Valpha,Vbeta,&tABC[0],&tABC[1],&tABC[2]);
    896c:	e0fff904 	addi	r3,fp,-28
    8970:	e0bff904 	addi	r2,fp,-28
    8974:	10800104 	addi	r2,r2,4
    8978:	e13ff904 	addi	r4,fp,-28
    897c:	21000204 	addi	r4,r4,8
    8980:	d9000015 	stw	r4,0(sp)
    8984:	e13fef17 	ldw	r4,-68(fp)
    8988:	e17ff017 	ldw	r5,-64(fp)
    898c:	180d883a 	mov	r6,r3
    8990:	100f883a 	mov	r7,r2
    8994:	000806c0 	call	806c <SVM>

	for (int i = 0; i < 3; ++i)
    8998:	e03ff115 	stw	zero,-60(fp)
    899c:	00003106 	br	8a64 <control_current+0x254>
	{
		IOWR(PWM_0_BASE, 2*i, MAX((int)tABC[i] - deadtimeint/2, 0));
    89a0:	e0bff117 	ldw	r2,-60(fp)
    89a4:	100490fa 	slli	r2,r2,3
    89a8:	1007883a 	mov	r3,r2
    89ac:	00800074 	movhi	r2,1
    89b0:	10882004 	addi	r2,r2,8320
    89b4:	1889883a 	add	r4,r3,r2
    89b8:	e0bff117 	ldw	r2,-60(fp)
    89bc:	1085883a 	add	r2,r2,r2
    89c0:	1085883a 	add	r2,r2,r2
    89c4:	e0ffef04 	addi	r3,fp,-68
    89c8:	1885883a 	add	r2,r3,r2
    89cc:	10800a04 	addi	r2,r2,40
    89d0:	10800017 	ldw	r2,0(r2)
    89d4:	1007883a 	mov	r3,r2
    89d8:	00800404 	movi	r2,16
    89dc:	100ad7fa 	srli	r5,r2,31
    89e0:	2885883a 	add	r2,r5,r2
    89e4:	1005d07a 	srai	r2,r2,1
    89e8:	1885c83a 	sub	r2,r3,r2
    89ec:	e0bff715 	stw	r2,-36(fp)
    89f0:	e03ff815 	stw	zero,-32(fp)
    89f4:	e0fff717 	ldw	r3,-36(fp)
    89f8:	e0bff817 	ldw	r2,-32(fp)
    89fc:	10c0010e 	bge	r2,r3,8a04 <control_current+0x1f4>
    8a00:	1805883a 	mov	r2,r3
    8a04:	20800035 	stwio	r2,0(r4)
		IOWR(PWM_0_BASE, 2*i + 1, tABC[i] + deadtimeint/2);
    8a08:	e0bff117 	ldw	r2,-60(fp)
    8a0c:	100490fa 	slli	r2,r2,3
    8a10:	10800104 	addi	r2,r2,4
    8a14:	1007883a 	mov	r3,r2
    8a18:	00800074 	movhi	r2,1
    8a1c:	10882004 	addi	r2,r2,8320
    8a20:	1887883a 	add	r3,r3,r2
    8a24:	e0bff117 	ldw	r2,-60(fp)
    8a28:	1085883a 	add	r2,r2,r2
    8a2c:	1085883a 	add	r2,r2,r2
    8a30:	e13fef04 	addi	r4,fp,-68
    8a34:	2085883a 	add	r2,r4,r2
    8a38:	10800a04 	addi	r2,r2,40
    8a3c:	11000017 	ldw	r4,0(r2)
    8a40:	00800404 	movi	r2,16
    8a44:	100ad7fa 	srli	r5,r2,31
    8a48:	2885883a 	add	r2,r5,r2
    8a4c:	1005d07a 	srai	r2,r2,1
    8a50:	2085883a 	add	r2,r4,r2
    8a54:	18800035 	stwio	r2,0(r3)
	}

	uint32_t tABC[3];
	SVM(Valpha,Vbeta,&tABC[0],&tABC[1],&tABC[2]);

	for (int i = 0; i < 3; ++i)
    8a58:	e0bff117 	ldw	r2,-60(fp)
    8a5c:	10800044 	addi	r2,r2,1
    8a60:	e0bff115 	stw	r2,-60(fp)
    8a64:	e0bff117 	ldw	r2,-60(fp)
    8a68:	108000d0 	cmplti	r2,r2,3
    8a6c:	103fcc1e 	bne	r2,zero,89a0 <_gp+0xffff567c>
	{
		IOWR(PWM_0_BASE, 2*i, MAX((int)tABC[i] - deadtimeint/2, 0));
		IOWR(PWM_0_BASE, 2*i + 1, tABC[i] + deadtimeint/2);
	}

	IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
    8a70:	00c00044 	movi	r3,1
    8a74:	00800074 	movhi	r2,1
    8a78:	10882f04 	addi	r2,r2,8380
    8a7c:	10c00035 	stwio	r3,0(r2)
}
    8a80:	e037883a 	mov	sp,fp
    8a84:	dfc00117 	ldw	ra,4(sp)
    8a88:	df000017 	ldw	fp,0(sp)
    8a8c:	dec00204 	addi	sp,sp,8
    8a90:	f800283a 	ret

00008a94 <blocking_polar_control_current>:

static int IsenseOffset[2] = {0};

void blocking_polar_control_current(float phase, float mag){
    8a94:	defff804 	addi	sp,sp,-32
    8a98:	dfc00715 	stw	ra,28(sp)
    8a9c:	df000615 	stw	fp,24(sp)
    8aa0:	df000604 	addi	fp,sp,24
    8aa4:	e13ffe15 	stw	r4,-8(fp)
    8aa8:	e17fff15 	stw	r5,-4(fp)
	while(!IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG));
    8aac:	0001883a 	nop
    8ab0:	00800074 	movhi	r2,1
    8ab4:	10880104 	addi	r2,r2,8196
    8ab8:	10800037 	ldwio	r2,0(r2)
    8abc:	103ffc26 	beq	r2,zero,8ab0 <_gp+0xffff578c>
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
    8ac0:	0007883a 	mov	r3,zero
    8ac4:	00800074 	movhi	r2,1
    8ac8:	10880104 	addi	r2,r2,8196
    8acc:	10c00035 	stwio	r3,0(r2)

	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
    8ad0:	0007883a 	mov	r3,zero
    8ad4:	00800074 	movhi	r2,1
    8ad8:	10880104 	addi	r2,r2,8196
    8adc:	10c00035 	stwio	r3,0(r2)
	float Ia = ADCtoAscalefactor * ((int)IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_SAMPSTORE + 0) - IsenseOffset[0]);
    8ae0:	00800074 	movhi	r2,1
    8ae4:	10881804 	addi	r2,r2,8288
    8ae8:	10c00037 	ldwio	r3,0(r2)
    8aec:	d0a1ba17 	ldw	r2,-31000(gp)
    8af0:	1885c83a 	sub	r2,r3,r2
    8af4:	1007feb2 	custom	250,r3,r2,zero
    8af8:	008f4134 	movhi	r2,15620
    8afc:	1885ff32 	custom	252,r2,r3,r2
    8b00:	e0bffa15 	stw	r2,-24(fp)
	float Ib = ADCtoAscalefactor * ((int)IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_SAMPSTORE + 1) - IsenseOffset[1]);
    8b04:	00800074 	movhi	r2,1
    8b08:	10881904 	addi	r2,r2,8292
    8b0c:	10c00037 	ldwio	r3,0(r2)
    8b10:	00800074 	movhi	r2,1
    8b14:	10ae8404 	addi	r2,r2,-17904
    8b18:	10800017 	ldw	r2,0(r2)
    8b1c:	1885c83a 	sub	r2,r3,r2
    8b20:	1007feb2 	custom	250,r3,r2,zero
    8b24:	008f4134 	movhi	r2,15620
    8b28:	1885ff32 	custom	252,r2,r3,r2
    8b2c:	e0bffb15 	stw	r2,-20(fp)
	float c,s;
	fast_cossin(phase, &c, &s);
    8b30:	e0fffc04 	addi	r3,fp,-16
    8b34:	e0bffd04 	addi	r2,fp,-12
    8b38:	e13ffe17 	ldw	r4,-8(fp)
    8b3c:	180b883a 	mov	r5,r3
    8b40:	100d883a 	mov	r6,r2
    8b44:	000944c0 	call	944c <fast_cossin>

	control_current(mag*c, mag*s, Ia, Ib);
    8b48:	e0fffc17 	ldw	r3,-16(fp)
    8b4c:	e0bfff17 	ldw	r2,-4(fp)
    8b50:	1887ff32 	custom	252,r3,r3,r2
    8b54:	e13ffd17 	ldw	r4,-12(fp)
    8b58:	e0bfff17 	ldw	r2,-4(fp)
    8b5c:	2085ff32 	custom	252,r2,r4,r2
    8b60:	1809883a 	mov	r4,r3
    8b64:	100b883a 	mov	r5,r2
    8b68:	e1bffa17 	ldw	r6,-24(fp)
    8b6c:	e1fffb17 	ldw	r7,-20(fp)
    8b70:	00088100 	call	8810 <control_current>
}
    8b74:	e037883a 	mov	sp,fp
    8b78:	dfc00117 	ldw	ra,4(sp)
    8b7c:	df000017 	ldw	fp,0(sp)
    8b80:	dec00204 	addi	sp,sp,8
    8b84:	f800283a 	ret

00008b88 <main>:

int main()
{
    8b88:	deffde04 	addi	sp,sp,-136
    8b8c:	dfc02115 	stw	ra,132(sp)
    8b90:	df002015 	stw	fp,128(sp)
    8b94:	df002004 	addi	fp,sp,128

	//350kv motor vice rig
	//IOWR(QEI_0_BASE, QEI_REG_revDir, 1); //encoder reversed dir compared to motor

	//Teleport rig
	IOWR(QEI_0_BASE, QEI_REG_revDir, 0);
    8b98:	0007883a 	mov	r3,zero
    8b9c:	00800074 	movhi	r2,1
    8ba0:	10883204 	addi	r2,r2,8392
    8ba4:	10c00035 	stwio	r3,0(r2)

	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_MAXSEQ, 1);
    8ba8:	00c00044 	movi	r3,1
    8bac:	00800074 	movhi	r2,1
    8bb0:	10880204 	addi	r2,r2,8200
    8bb4:	10c00035 	stwio	r3,0(r2)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_CH_MAP + 0, 7);
    8bb8:	00c001c4 	movi	r3,7
    8bbc:	00800074 	movhi	r2,1
    8bc0:	10881004 	addi	r2,r2,8256
    8bc4:	10c00035 	stwio	r3,0(r2)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_CH_MAP + 1, 6),
    8bc8:	00c00184 	movi	r3,6
    8bcc:	00800074 	movhi	r2,1
    8bd0:	10881104 	addi	r2,r2,8260
    8bd4:	10c00035 	stwio	r3,0(r2)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
    8bd8:	0007883a 	mov	r3,zero
    8bdc:	00800074 	movhi	r2,1
    8be0:	10880104 	addi	r2,r2,8196
    8be4:	10c00035 	stwio	r3,0(r2)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_EN, 1);
    8be8:	00c00044 	movi	r3,1
    8bec:	00800074 	movhi	r2,1
    8bf0:	10880004 	addi	r2,r2,8192
    8bf4:	10c00035 	stwio	r3,0(r2)

	IOWR(PWM_0_BASE, PWM_REG_TRIGON_Z, 1);
    8bf8:	00c00044 	movi	r3,1
    8bfc:	00800074 	movhi	r2,1
    8c00:	10882c04 	addi	r2,r2,8368
    8c04:	10c00035 	stwio	r3,0(r2)
	IOWR(PWM_0_BASE, PWM_REG_UPDATEON_Z, 1);
    8c08:	00c00044 	movi	r3,1
    8c0c:	00800074 	movhi	r2,1
    8c10:	10882a04 	addi	r2,r2,8360
    8c14:	10c00035 	stwio	r3,0(r2)
	IOWR(PWM_0_BASE, PWM_REG_MAXCTR, PWMHalfPeriod);
    8c18:	00c4e204 	movi	r3,5000
    8c1c:	00800074 	movhi	r2,1
    8c20:	10882804 	addi	r2,r2,8352
    8c24:	10c00035 	stwio	r3,0(r2)
	for (int i = 0; i < 3; ++i)
    8c28:	e03fe015 	stw	zero,-128(fp)
    8c2c:	00002606 	br	8cc8 <main+0x140>
	{
		IOWR(PWM_0_BASE, 2*i, PWMHalfPeriod/2 - deadtimeint/2);//MAX((int)tABC[i] - deadtimeint/2, 0));
    8c30:	e0bfe017 	ldw	r2,-128(fp)
    8c34:	100490fa 	slli	r2,r2,3
    8c38:	1007883a 	mov	r3,r2
    8c3c:	00800074 	movhi	r2,1
    8c40:	10882004 	addi	r2,r2,8320
    8c44:	1887883a 	add	r3,r3,r2
    8c48:	0084e204 	movi	r2,5000
    8c4c:	1008d7fa 	srli	r4,r2,31
    8c50:	2085883a 	add	r2,r4,r2
    8c54:	1005d07a 	srai	r2,r2,1
    8c58:	1009883a 	mov	r4,r2
    8c5c:	00800404 	movi	r2,16
    8c60:	100ad7fa 	srli	r5,r2,31
    8c64:	2885883a 	add	r2,r5,r2
    8c68:	1005d07a 	srai	r2,r2,1
    8c6c:	2085c83a 	sub	r2,r4,r2
    8c70:	18800035 	stwio	r2,0(r3)
		IOWR(PWM_0_BASE, 2*i + 1, PWMHalfPeriod/2 + deadtimeint/2);
    8c74:	e0bfe017 	ldw	r2,-128(fp)
    8c78:	100490fa 	slli	r2,r2,3
    8c7c:	10800104 	addi	r2,r2,4
    8c80:	1007883a 	mov	r3,r2
    8c84:	00800074 	movhi	r2,1
    8c88:	10882004 	addi	r2,r2,8320
    8c8c:	1887883a 	add	r3,r3,r2
    8c90:	0084e204 	movi	r2,5000
    8c94:	1008d7fa 	srli	r4,r2,31
    8c98:	2085883a 	add	r2,r4,r2
    8c9c:	1005d07a 	srai	r2,r2,1
    8ca0:	1009883a 	mov	r4,r2
    8ca4:	00800404 	movi	r2,16
    8ca8:	100ad7fa 	srli	r5,r2,31
    8cac:	2885883a 	add	r2,r5,r2
    8cb0:	1005d07a 	srai	r2,r2,1
    8cb4:	2085883a 	add	r2,r4,r2
    8cb8:	18800035 	stwio	r2,0(r3)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_EN, 1);

	IOWR(PWM_0_BASE, PWM_REG_TRIGON_Z, 1);
	IOWR(PWM_0_BASE, PWM_REG_UPDATEON_Z, 1);
	IOWR(PWM_0_BASE, PWM_REG_MAXCTR, PWMHalfPeriod);
	for (int i = 0; i < 3; ++i)
    8cbc:	e0bfe017 	ldw	r2,-128(fp)
    8cc0:	10800044 	addi	r2,r2,1
    8cc4:	e0bfe015 	stw	r2,-128(fp)
    8cc8:	e0bfe017 	ldw	r2,-128(fp)
    8ccc:	108000d0 	cmplti	r2,r2,3
    8cd0:	103fd71e 	bne	r2,zero,8c30 <_gp+0xffff590c>
	{
		IOWR(PWM_0_BASE, 2*i, PWMHalfPeriod/2 - deadtimeint/2);//MAX((int)tABC[i] - deadtimeint/2, 0));
		IOWR(PWM_0_BASE, 2*i + 1, PWMHalfPeriod/2 + deadtimeint/2);
	}
	IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
    8cd4:	00c00044 	movi	r3,1
    8cd8:	00800074 	movhi	r2,1
    8cdc:	10882f04 	addi	r2,r2,8380
    8ce0:	10c00035 	stwio	r3,0(r2)
	IOWR(PWM_0_BASE, PWM_REG_EN, 1);
    8ce4:	00c00044 	movi	r3,1
    8ce8:	00800074 	movhi	r2,1
    8cec:	10882904 	addi	r2,r2,8356
    8cf0:	10c00035 	stwio	r3,0(r2)

	//sample current sense values during V0 PWM
	for (int i = -128; i < 128; ++i)
    8cf4:	00bfe004 	movi	r2,-128
    8cf8:	e0bfe115 	stw	r2,-124(fp)
    8cfc:	00005106 	br	8e44 <main+0x2bc>
	{
		while(!IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG));
    8d00:	0001883a 	nop
    8d04:	00800074 	movhi	r2,1
    8d08:	10880104 	addi	r2,r2,8196
    8d0c:	10800037 	ldwio	r2,0(r2)
    8d10:	103ffc26 	beq	r2,zero,8d04 <_gp+0xffff59e0>
		IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
    8d14:	0007883a 	mov	r3,zero
    8d18:	00800074 	movhi	r2,1
    8d1c:	10880104 	addi	r2,r2,8196
    8d20:	10c00035 	stwio	r3,0(r2)
		int Ia = IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_SAMPSTORE + 0);
    8d24:	00800074 	movhi	r2,1
    8d28:	10881804 	addi	r2,r2,8288
    8d2c:	10800037 	ldwio	r2,0(r2)
    8d30:	e0bfed15 	stw	r2,-76(fp)
		int Ib = IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_SAMPSTORE + 1);
    8d34:	00800074 	movhi	r2,1
    8d38:	10881904 	addi	r2,r2,8292
    8d3c:	10800037 	ldwio	r2,0(r2)
    8d40:	e0bfee15 	stw	r2,-72(fp)
		if(i >= 0){
    8d44:	e0bfe117 	ldw	r2,-124(fp)
    8d48:	10000c16 	blt	r2,zero,8d7c <main+0x1f4>
			IsenseOffset[0] += Ia;
    8d4c:	d0e1ba17 	ldw	r3,-31000(gp)
    8d50:	e0bfed17 	ldw	r2,-76(fp)
    8d54:	1885883a 	add	r2,r3,r2
    8d58:	d0a1ba15 	stw	r2,-31000(gp)
			IsenseOffset[1] += Ib;
    8d5c:	00800074 	movhi	r2,1
    8d60:	10ae8404 	addi	r2,r2,-17904
    8d64:	10c00017 	ldw	r3,0(r2)
    8d68:	e0bfee17 	ldw	r2,-72(fp)
    8d6c:	1887883a 	add	r3,r3,r2
    8d70:	00800074 	movhi	r2,1
    8d74:	10ae8404 	addi	r2,r2,-17904
    8d78:	10c00015 	stw	r3,0(r2)
		}

		for (int i = 0; i < 3; ++i)
    8d7c:	e03fe215 	stw	zero,-120(fp)
    8d80:	00002606 	br	8e1c <main+0x294>
		{
			IOWR(PWM_0_BASE, 2*i, PWMHalfPeriod/2 - deadtimeint/2);//MAX((int)tABC[i] - deadtimeint/2, 0));
    8d84:	e0bfe217 	ldw	r2,-120(fp)
    8d88:	100490fa 	slli	r2,r2,3
    8d8c:	1007883a 	mov	r3,r2
    8d90:	00800074 	movhi	r2,1
    8d94:	10882004 	addi	r2,r2,8320
    8d98:	1887883a 	add	r3,r3,r2
    8d9c:	0084e204 	movi	r2,5000
    8da0:	1008d7fa 	srli	r4,r2,31
    8da4:	2085883a 	add	r2,r4,r2
    8da8:	1005d07a 	srai	r2,r2,1
    8dac:	1009883a 	mov	r4,r2
    8db0:	00800404 	movi	r2,16
    8db4:	100ad7fa 	srli	r5,r2,31
    8db8:	2885883a 	add	r2,r5,r2
    8dbc:	1005d07a 	srai	r2,r2,1
    8dc0:	2085c83a 	sub	r2,r4,r2
    8dc4:	18800035 	stwio	r2,0(r3)
			IOWR(PWM_0_BASE, 2*i + 1, PWMHalfPeriod/2 + deadtimeint/2);
    8dc8:	e0bfe217 	ldw	r2,-120(fp)
    8dcc:	100490fa 	slli	r2,r2,3
    8dd0:	10800104 	addi	r2,r2,4
    8dd4:	1007883a 	mov	r3,r2
    8dd8:	00800074 	movhi	r2,1
    8ddc:	10882004 	addi	r2,r2,8320
    8de0:	1887883a 	add	r3,r3,r2
    8de4:	0084e204 	movi	r2,5000
    8de8:	1008d7fa 	srli	r4,r2,31
    8dec:	2085883a 	add	r2,r4,r2
    8df0:	1005d07a 	srai	r2,r2,1
    8df4:	1009883a 	mov	r4,r2
    8df8:	00800404 	movi	r2,16
    8dfc:	100ad7fa 	srli	r5,r2,31
    8e00:	2885883a 	add	r2,r5,r2
    8e04:	1005d07a 	srai	r2,r2,1
    8e08:	2085883a 	add	r2,r4,r2
    8e0c:	18800035 	stwio	r2,0(r3)
		if(i >= 0){
			IsenseOffset[0] += Ia;
			IsenseOffset[1] += Ib;
		}

		for (int i = 0; i < 3; ++i)
    8e10:	e0bfe217 	ldw	r2,-120(fp)
    8e14:	10800044 	addi	r2,r2,1
    8e18:	e0bfe215 	stw	r2,-120(fp)
    8e1c:	e0bfe217 	ldw	r2,-120(fp)
    8e20:	108000d0 	cmplti	r2,r2,3
    8e24:	103fd71e 	bne	r2,zero,8d84 <_gp+0xffff5a60>
		{
			IOWR(PWM_0_BASE, 2*i, PWMHalfPeriod/2 - deadtimeint/2);//MAX((int)tABC[i] - deadtimeint/2, 0));
			IOWR(PWM_0_BASE, 2*i + 1, PWMHalfPeriod/2 + deadtimeint/2);
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
    8e28:	00c00044 	movi	r3,1
    8e2c:	00800074 	movhi	r2,1
    8e30:	10882f04 	addi	r2,r2,8380
    8e34:	10c00035 	stwio	r3,0(r2)
	}
	IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
	IOWR(PWM_0_BASE, PWM_REG_EN, 1);

	//sample current sense values during V0 PWM
	for (int i = -128; i < 128; ++i)
    8e38:	e0bfe117 	ldw	r2,-124(fp)
    8e3c:	10800044 	addi	r2,r2,1
    8e40:	e0bfe115 	stw	r2,-124(fp)
    8e44:	e0bfe117 	ldw	r2,-124(fp)
    8e48:	10802010 	cmplti	r2,r2,128
    8e4c:	103fac1e 	bne	r2,zero,8d00 <_gp+0xffff59dc>
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
	}

	for (int i = 0; i < 2; ++i)
    8e50:	e03fe315 	stw	zero,-116(fp)
    8e54:	00001306 	br	8ea4 <main+0x31c>
	{
		IsenseOffset[i] /= 128;
    8e58:	e0bfe317 	ldw	r2,-116(fp)
    8e5c:	1085883a 	add	r2,r2,r2
    8e60:	1087883a 	add	r3,r2,r2
    8e64:	d0a1ba04 	addi	r2,gp,-31000
    8e68:	1885883a 	add	r2,r3,r2
    8e6c:	10800017 	ldw	r2,0(r2)
    8e70:	1000010e 	bge	r2,zero,8e78 <main+0x2f0>
    8e74:	10801fc4 	addi	r2,r2,127
    8e78:	1005d1fa 	srai	r2,r2,7
    8e7c:	1007883a 	mov	r3,r2
    8e80:	e0bfe317 	ldw	r2,-116(fp)
    8e84:	1085883a 	add	r2,r2,r2
    8e88:	1089883a 	add	r4,r2,r2
    8e8c:	d0a1ba04 	addi	r2,gp,-31000
    8e90:	2085883a 	add	r2,r4,r2
    8e94:	10c00015 	stw	r3,0(r2)
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
	}

	for (int i = 0; i < 2; ++i)
    8e98:	e0bfe317 	ldw	r2,-116(fp)
    8e9c:	10800044 	addi	r2,r2,1
    8ea0:	e0bfe315 	stw	r2,-116(fp)
    8ea4:	e0bfe317 	ldw	r2,-116(fp)
    8ea8:	10800090 	cmplti	r2,r2,2
    8eac:	103fea1e 	bne	r2,zero,8e58 <_gp+0xffff5b34>
	{
		IsenseOffset[i] /= 128;
	}

	//Fixed voltage test
	while(0){
    8eb0:	0001883a 	nop

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
	}

	//square wave current control test
	while(0){
    8eb4:	0001883a 	nop
	{
		blocking_polar_control_current(ph, lockinCurrent);
	}

#else
	IOWR(QEI_0_BASE, QEI_REG_COUNT, 0);
    8eb8:	0007883a 	mov	r3,zero
    8ebc:	00800074 	movhi	r2,1
    8ec0:	10883004 	addi	r2,r2,8384
    8ec4:	10c00035 	stwio	r3,0(r2)
#endif

	//go to rotor zero phase to get ready to scan
	for (int i = 0; i < (0.5f*PWMFrequency); ++i)
    8ec8:	e03fe415 	stw	zero,-112(fp)
    8ecc:	00000806 	br	8ef0 <main+0x368>
	{
		blocking_polar_control_current(-2*PI_F, lockinCurrent);
    8ed0:	00904834 	movhi	r2,16672
    8ed4:	01303274 	movhi	r4,49353
    8ed8:	2103f6c4 	addi	r4,r4,4059
    8edc:	100b883a 	mov	r5,r2
    8ee0:	0008a940 	call	8a94 <blocking_polar_control_current>
#else
	IOWR(QEI_0_BASE, QEI_REG_COUNT, 0);
#endif

	//go to rotor zero phase to get ready to scan
	for (int i = 0; i < (0.5f*PWMFrequency); ++i)
    8ee4:	e0bfe417 	ldw	r2,-112(fp)
    8ee8:	10800044 	addi	r2,r2,1
    8eec:	e0bfe415 	stw	r2,-112(fp)
    8ef0:	e0bfe417 	ldw	r2,-112(fp)
    8ef4:	1007feb2 	custom	250,r3,r2,zero
    8ef8:	00917eb4 	movhi	r2,17914
    8efc:	1885f9f2 	custom	231,r2,r3,r2
    8f00:	103ff31e 	bne	r2,zero,8ed0 <_gp+0xffff5bac>
	{
		blocking_polar_control_current(-2*PI_F, lockinCurrent);
	}

	//scan forwards
	int encvaluesum = 0;
    8f04:	e03fe515 	stw	zero,-108(fp)
	for (float ph = -2*PI_F; ph < 2*PI_F; ph += 4*PI_F/128.0f)
    8f08:	00b03274 	movhi	r2,49353
    8f0c:	1083f6c4 	addi	r2,r2,4059
    8f10:	e0bfe615 	stw	r2,-104(fp)
    8f14:	00001906 	br	8f7c <main+0x3f4>
	{
		for (int i = 0; i < (0.01f*PWMFrequency); ++i)
    8f18:	e03fe715 	stw	zero,-100(fp)
    8f1c:	00000706 	br	8f3c <main+0x3b4>
		{
			blocking_polar_control_current(ph, lockinCurrent);
    8f20:	00904834 	movhi	r2,16672
    8f24:	e13fe617 	ldw	r4,-104(fp)
    8f28:	100b883a 	mov	r5,r2
    8f2c:	0008a940 	call	8a94 <blocking_polar_control_current>

	//scan forwards
	int encvaluesum = 0;
	for (float ph = -2*PI_F; ph < 2*PI_F; ph += 4*PI_F/128.0f)
	{
		for (int i = 0; i < (0.01f*PWMFrequency); ++i)
    8f30:	e0bfe717 	ldw	r2,-100(fp)
    8f34:	10800044 	addi	r2,r2,1
    8f38:	e0bfe715 	stw	r2,-100(fp)
    8f3c:	e0bfe717 	ldw	r2,-100(fp)
    8f40:	1007feb2 	custom	250,r3,r2,zero
    8f44:	0090c834 	movhi	r2,17184
    8f48:	1885f9f2 	custom	231,r2,r3,r2
    8f4c:	103ff41e 	bne	r2,zero,8f20 <_gp+0xffff5bfc>
		{
			blocking_polar_control_current(ph, lockinCurrent);
		}
		encvaluesum += IORD(QEI_0_BASE, QEI_REG_COUNT);
    8f50:	00800074 	movhi	r2,1
    8f54:	10883004 	addi	r2,r2,8384
    8f58:	10800037 	ldwio	r2,0(r2)
    8f5c:	e0ffe517 	ldw	r3,-108(fp)
    8f60:	1885883a 	add	r2,r3,r2
    8f64:	e0bfe515 	stw	r2,-108(fp)
		blocking_polar_control_current(-2*PI_F, lockinCurrent);
	}

	//scan forwards
	int encvaluesum = 0;
	for (float ph = -2*PI_F; ph < 2*PI_F; ph += 4*PI_F/128.0f)
    8f68:	e0ffe617 	ldw	r3,-104(fp)
    8f6c:	008f7274 	movhi	r2,15817
    8f70:	1083f6c4 	addi	r2,r2,4059
    8f74:	1885ff72 	custom	253,r2,r3,r2
    8f78:	e0bfe615 	stw	r2,-104(fp)
    8f7c:	e0ffe617 	ldw	r3,-104(fp)
    8f80:	00903274 	movhi	r2,16585
    8f84:	1083f6c4 	addi	r2,r2,4059
    8f88:	1885f9f2 	custom	231,r2,r3,r2
    8f8c:	103fe21e 	bne	r2,zero,8f18 <_gp+0xffff5bf4>
		{
			blocking_polar_control_current(ph, lockinCurrent);
		}
		encvaluesum += IORD(QEI_0_BASE, QEI_REG_COUNT);
	}
	int testencval = IORD(QEI_0_BASE, QEI_REG_COUNT);
    8f90:	00800074 	movhi	r2,1
    8f94:	10883004 	addi	r2,r2,8384
    8f98:	10800037 	ldwio	r2,0(r2)
    8f9c:	e0bfef15 	stw	r2,-68(fp)
	if(testencval < 0/*-(QudcountsPerRev/(7*2))*/) //encoder vs motor phases likely configured backwards
    8fa0:	e0bfef17 	ldw	r2,-68(fp)
    8fa4:	1000010e 	bge	r2,zero,8fac <main+0x424>
		while(1){
			//TODO flash red phase LED here
		}
    8fa8:	003fff06 	br	8fa8 <_gp+0xffff5c84>
	for (float ph = 2*PI_F; ph > -2*PI_F; ph -= 4*PI_F/128.0f)
    8fac:	00903274 	movhi	r2,16585
    8fb0:	1083f6c4 	addi	r2,r2,4059
    8fb4:	e0bfe815 	stw	r2,-96(fp)
    8fb8:	00001906 	br	9020 <main+0x498>
	{
		for (int i = 0; i < (0.01f*PWMFrequency); ++i)
    8fbc:	e03fe915 	stw	zero,-92(fp)
    8fc0:	00000706 	br	8fe0 <main+0x458>
		{
			blocking_polar_control_current(ph, lockinCurrent);
    8fc4:	00904834 	movhi	r2,16672
    8fc8:	e13fe817 	ldw	r4,-96(fp)
    8fcc:	100b883a 	mov	r5,r2
    8fd0:	0008a940 	call	8a94 <blocking_polar_control_current>
		while(1){
			//TODO flash red phase LED here
		}
	for (float ph = 2*PI_F; ph > -2*PI_F; ph -= 4*PI_F/128.0f)
	{
		for (int i = 0; i < (0.01f*PWMFrequency); ++i)
    8fd4:	e0bfe917 	ldw	r2,-92(fp)
    8fd8:	10800044 	addi	r2,r2,1
    8fdc:	e0bfe915 	stw	r2,-92(fp)
    8fe0:	e0bfe917 	ldw	r2,-92(fp)
    8fe4:	1007feb2 	custom	250,r3,r2,zero
    8fe8:	0090c834 	movhi	r2,17184
    8fec:	1885f9f2 	custom	231,r2,r3,r2
    8ff0:	103ff41e 	bne	r2,zero,8fc4 <_gp+0xffff5ca0>
		{
			blocking_polar_control_current(ph, lockinCurrent);
		}
		encvaluesum += IORD(QEI_0_BASE, QEI_REG_COUNT);
    8ff4:	00800074 	movhi	r2,1
    8ff8:	10883004 	addi	r2,r2,8384
    8ffc:	10800037 	ldwio	r2,0(r2)
    9000:	e0ffe517 	ldw	r3,-108(fp)
    9004:	1885883a 	add	r2,r3,r2
    9008:	e0bfe515 	stw	r2,-108(fp)
	int testencval = IORD(QEI_0_BASE, QEI_REG_COUNT);
	if(testencval < 0/*-(QudcountsPerRev/(7*2))*/) //encoder vs motor phases likely configured backwards
		while(1){
			//TODO flash red phase LED here
		}
	for (float ph = 2*PI_F; ph > -2*PI_F; ph -= 4*PI_F/128.0f)
    900c:	e0ffe817 	ldw	r3,-96(fp)
    9010:	008f7274 	movhi	r2,15817
    9014:	1083f6c4 	addi	r2,r2,4059
    9018:	1885ffb2 	custom	254,r2,r3,r2
    901c:	e0bfe815 	stw	r2,-96(fp)
    9020:	e0ffe817 	ldw	r3,-96(fp)
    9024:	00b03274 	movhi	r2,49353
    9028:	1083f6c4 	addi	r2,r2,4059
    902c:	1885f972 	custom	229,r2,r3,r2
    9030:	103fe21e 	bne	r2,zero,8fbc <_gp+0xffff5c98>
			blocking_polar_control_current(ph, lockinCurrent);
		}
		encvaluesum += IORD(QEI_0_BASE, QEI_REG_COUNT);
	}

	int encoffset = encvaluesum / 256;
    9034:	e0bfe517 	ldw	r2,-108(fp)
    9038:	1000010e 	bge	r2,zero,9040 <main+0x4b8>
    903c:	10803fc4 	addi	r2,r2,255
    9040:	1005d23a 	srai	r2,r2,8
    9044:	e0bff015 	stw	r2,-64(fp)

	//while(1);

	int oldenc = IORD(QEI_0_BASE, QEI_REG_COUNT);
    9048:	00800074 	movhi	r2,1
    904c:	10883004 	addi	r2,r2,8384
    9050:	10800037 	ldwio	r2,0(r2)
    9054:	e0bfea15 	stw	r2,-88(fp)
	while(1)
	for(int i = -2000; i < 2000; ++i){
    9058:	00be0c04 	movi	r2,-2000
    905c:	e0bfeb15 	stw	r2,-84(fp)
    9060:	0000a606 	br	92fc <main+0x774>

		while(!IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG));
    9064:	0001883a 	nop
    9068:	00800074 	movhi	r2,1
    906c:	10880104 	addi	r2,r2,8196
    9070:	10800037 	ldwio	r2,0(r2)
    9074:	103ffc26 	beq	r2,zero,9068 <_gp+0xffff5d44>
		IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
    9078:	0007883a 	mov	r3,zero
    907c:	00800074 	movhi	r2,1
    9080:	10880104 	addi	r2,r2,8196
    9084:	10c00035 	stwio	r3,0(r2)

		IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
    9088:	0007883a 	mov	r3,zero
    908c:	00800074 	movhi	r2,1
    9090:	10880104 	addi	r2,r2,8196
    9094:	10c00035 	stwio	r3,0(r2)
		float Ia = ADCtoAscalefactor * ((int)IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_SAMPSTORE + 0) - IsenseOffset[0]);
    9098:	00800074 	movhi	r2,1
    909c:	10881804 	addi	r2,r2,8288
    90a0:	10c00037 	ldwio	r3,0(r2)
    90a4:	d0a1ba17 	ldw	r2,-31000(gp)
    90a8:	1885c83a 	sub	r2,r3,r2
    90ac:	1007feb2 	custom	250,r3,r2,zero
    90b0:	008f4134 	movhi	r2,15620
    90b4:	1885ff32 	custom	252,r2,r3,r2
    90b8:	e0bff115 	stw	r2,-60(fp)
		float Ib = ADCtoAscalefactor * ((int)IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_SAMPSTORE + 1) - IsenseOffset[1]);
    90bc:	00800074 	movhi	r2,1
    90c0:	10881904 	addi	r2,r2,8292
    90c4:	10c00037 	ldwio	r3,0(r2)
    90c8:	00800074 	movhi	r2,1
    90cc:	10ae8404 	addi	r2,r2,-17904
    90d0:	10800017 	ldw	r2,0(r2)
    90d4:	1885c83a 	sub	r2,r3,r2
    90d8:	1007feb2 	custom	250,r3,r2,zero
    90dc:	008f4134 	movhi	r2,15620
    90e0:	1885ff32 	custom	252,r2,r3,r2
    90e4:	e0bff215 	stw	r2,-56(fp)

		int enccount = IORD(QEI_0_BASE, QEI_REG_COUNT);
    90e8:	00800074 	movhi	r2,1
    90ec:	10883004 	addi	r2,r2,8384
    90f0:	10800037 	ldwio	r2,0(r2)
    90f4:	e0bff315 	stw	r2,-52(fp)
		float phase = ((enccount - encoffset) % QudcountsPerRev) * encToPhasefactor;
    90f8:	e0fff317 	ldw	r3,-52(fp)
    90fc:	e0bff017 	ldw	r2,-64(fp)
    9100:	1885c83a 	sub	r2,r3,r2
    9104:	1009883a 	mov	r4,r2
    9108:	01425804 	movi	r5,2400
    910c:	00097b00 	call	97b0 <__modsi3>
    9110:	1007feb2 	custom	250,r3,r2,zero
    9114:	008f25b4 	movhi	r2,15510
    9118:	10881484 	addi	r2,r2,8274
    911c:	1885ff32 	custom	252,r2,r3,r2
    9120:	e0bff415 	stw	r2,-48(fp)
		float c,s;
		fast_cossin(phase, &c, &s);
    9124:	e0fffe04 	addi	r3,fp,-8
    9128:	e0bfff04 	addi	r2,fp,-4
    912c:	e13ff417 	ldw	r4,-48(fp)
    9130:	180b883a 	mov	r5,r3
    9134:	100d883a 	mov	r6,r2
    9138:	000944c0 	call	944c <fast_cossin>

		float dencbydt = encToPhasefactor*(enccount - oldenc)*PWMFrequency;
    913c:	e0fff317 	ldw	r3,-52(fp)
    9140:	e0bfea17 	ldw	r2,-88(fp)
    9144:	1885c83a 	sub	r2,r3,r2
    9148:	1007feb2 	custom	250,r3,r2,zero
    914c:	008f25b4 	movhi	r2,15510
    9150:	10881484 	addi	r2,r2,8274
    9154:	1887ff32 	custom	252,r3,r3,r2
    9158:	00919eb4 	movhi	r2,18042
    915c:	1885ff32 	custom	252,r2,r3,r2
    9160:	e0bff515 	stw	r2,-44(fp)
		oldenc = enccount;
    9164:	e0bff317 	ldw	r2,-52(fp)
    9168:	e0bfea15 	stw	r2,-88(fp)

		static float omega = 0.0f;
		omega = omegaFilterConst*omega + (1-omegaFilterConst)*dencbydt;
    916c:	00cfdef4 	movhi	r3,16251
    9170:	18f85204 	addi	r3,r3,-7864
    9174:	d0a1be17 	ldw	r2,-30984(gp)
    9178:	1887ff32 	custom	252,r3,r3,r2
    917c:	008fdef4 	movhi	r2,16251
    9180:	10b85204 	addi	r2,r2,-7864
    9184:	010fe034 	movhi	r4,16256
    9188:	2089ffb2 	custom	254,r4,r4,r2
    918c:	e0bff517 	ldw	r2,-44(fp)
    9190:	2085ff32 	custom	252,r2,r4,r2
    9194:	1885ff72 	custom	253,r2,r3,r2
    9198:	d0a1be15 	stw	r2,-30984(gp)

		static int logctr = 0;
		if(++logctr == 1){
    919c:	d0a1bf17 	ldw	r2,-30980(gp)
    91a0:	10800044 	addi	r2,r2,1
    91a4:	d0a1bf15 	stw	r2,-30980(gp)
    91a8:	d0a1bf17 	ldw	r2,-30980(gp)
    91ac:	10800058 	cmpnei	r2,r2,1
    91b0:	1000071e 	bne	r2,zero,91d0 <main+0x648>
			logctr = 0;
    91b4:	d021bf15 	stw	zero,-30980(gp)
			IOWR(LOG_REG_0_BASE, 0, (int)(omega*10.0f));
    91b8:	d0e1be17 	ldw	r3,-30984(gp)
    91bc:	00904834 	movhi	r2,16672
    91c0:	1885ff32 	custom	252,r2,r3,r2
    91c4:	1007fe72 	custom	249,r3,r2,zero
    91c8:	00800074 	movhi	r2,1
    91cc:	10c00035 	stwio	r3,0(r2)
		}

		float omegasetpoint = (i<0) ? 2000.0f : -2000.0f;
    91d0:	e0bfeb17 	ldw	r2,-84(fp)
    91d4:	1000020e 	bge	r2,zero,91e0 <main+0x658>
    91d8:	00913eb4 	movhi	r2,17658
    91dc:	00000106 	br	91e4 <main+0x65c>
    91e0:	00b13eb4 	movhi	r2,50426
    91e4:	e0bff615 	stw	r2,-40(fp)
		omegasetpoint -= enccount * 0.1f;
    91e8:	e0bff317 	ldw	r2,-52(fp)
    91ec:	1007feb2 	custom	250,r3,r2,zero
    91f0:	008f7374 	movhi	r2,15821
    91f4:	10b33344 	addi	r2,r2,-13107
    91f8:	1885ff32 	custom	252,r2,r3,r2
    91fc:	e0fff617 	ldw	r3,-40(fp)
    9200:	1885ffb2 	custom	254,r2,r3,r2
    9204:	e0bff615 	stw	r2,-40(fp)
		float omegaerror = omegasetpoint - omega;
    9208:	d0a1be17 	ldw	r2,-30984(gp)
    920c:	e0fff617 	ldw	r3,-40(fp)
    9210:	1885ffb2 	custom	254,r2,r3,r2
    9214:	e0bff715 	stw	r2,-36(fp)

		static float Iqintstate = 0.0f;

		float Id = 0.0f;
    9218:	e03ff815 	stw	zero,-32(fp)
		float Iq = speedKp * omegaerror + Iqintstate;
    921c:	00cf2934 	movhi	r3,15524
    9220:	18f5c284 	addi	r3,r3,-10486
    9224:	e0bff717 	ldw	r2,-36(fp)
    9228:	1887ff32 	custom	252,r3,r3,r2
    922c:	d0a1c017 	ldw	r2,-30976(gp)
    9230:	1885ff72 	custom	253,r2,r3,r2
    9234:	e0bfec15 	stw	r2,-80(fp)

		if(Iq > currentlimit){
    9238:	00909234 	movhi	r2,16968
    923c:	e0ffec17 	ldw	r3,-80(fp)
    9240:	1885f972 	custom	229,r2,r3,r2
    9244:	10000326 	beq	r2,zero,9254 <main+0x6cc>
			Iq = currentlimit;
    9248:	00909234 	movhi	r2,16968
    924c:	e0bfec15 	stw	r2,-80(fp)
    9250:	00001206 	br	929c <main+0x714>
		}else{
			if(Iq < -currentlimit){
    9254:	00909234 	movhi	r2,16968
    9258:	1007f872 	custom	225,r3,r2,zero
    925c:	e0bfec17 	ldw	r2,-80(fp)
    9260:	1885f972 	custom	229,r2,r3,r2
    9264:	10000426 	beq	r2,zero,9278 <main+0x6f0>
				Iq = -currentlimit;
    9268:	00909234 	movhi	r2,16968
    926c:	1005f872 	custom	225,r2,r2,zero
    9270:	e0bfec15 	stw	r2,-80(fp)
    9274:	00000906 	br	929c <main+0x714>
			} else {
				Iqintstate += omegaerror * (speedKi * PWMPeriod);
    9278:	0007883a 	mov	r3,zero
    927c:	008e20f4 	movhi	r2,14467
    9280:	10849bc4 	addi	r2,r2,4719
    9284:	1887ff32 	custom	252,r3,r3,r2
    9288:	e0bff717 	ldw	r2,-36(fp)
    928c:	1887ff32 	custom	252,r3,r3,r2
    9290:	d0a1c017 	ldw	r2,-30976(gp)
    9294:	1885ff72 	custom	253,r2,r3,r2
    9298:	d0a1c015 	stw	r2,-30976(gp)
			}
		}

		float Ialpha = c*Id - s*Iq;
    929c:	e0fffe17 	ldw	r3,-8(fp)
    92a0:	e0bff817 	ldw	r2,-32(fp)
    92a4:	1887ff32 	custom	252,r3,r3,r2
    92a8:	e13fff17 	ldw	r4,-4(fp)
    92ac:	e0bfec17 	ldw	r2,-80(fp)
    92b0:	2085ff32 	custom	252,r2,r4,r2
    92b4:	1885ffb2 	custom	254,r2,r3,r2
    92b8:	e0bff915 	stw	r2,-28(fp)
		float Ibeta  = c*Iq + s*Id;
    92bc:	e0fffe17 	ldw	r3,-8(fp)
    92c0:	e0bfec17 	ldw	r2,-80(fp)
    92c4:	1887ff32 	custom	252,r3,r3,r2
    92c8:	e13fff17 	ldw	r4,-4(fp)
    92cc:	e0bff817 	ldw	r2,-32(fp)
    92d0:	2085ff32 	custom	252,r2,r4,r2
    92d4:	1885ff72 	custom	253,r2,r3,r2
    92d8:	e0bffa15 	stw	r2,-24(fp)

		control_current(Ialpha, Ibeta, Ia, Ib);
    92dc:	e13ff917 	ldw	r4,-28(fp)
    92e0:	e17ffa17 	ldw	r5,-24(fp)
    92e4:	e1bff117 	ldw	r6,-60(fp)
    92e8:	e1fff217 	ldw	r7,-56(fp)
    92ec:	00088100 	call	8810 <control_current>

	//while(1);

	int oldenc = IORD(QEI_0_BASE, QEI_REG_COUNT);
	while(1)
	for(int i = -2000; i < 2000; ++i){
    92f0:	e0bfeb17 	ldw	r2,-84(fp)
    92f4:	10800044 	addi	r2,r2,1
    92f8:	e0bfeb15 	stw	r2,-84(fp)
    92fc:	e0bfeb17 	ldw	r2,-84(fp)
    9300:	1081f410 	cmplti	r2,r2,2000
    9304:	103f571e 	bne	r2,zero,9064 <_gp+0xffff5d40>
		float Ialpha = c*Id - s*Iq;
		float Ibeta  = c*Iq + s*Id;

		control_current(Ialpha, Ibeta, Ia, Ib);

	}
    9308:	003f5306 	br	9058 <_gp+0xffff5d34>

0000930c <fast_atan2>:
//Code originally from http://www.dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization
//Which was in the public domain.
//It has since been modified.

//Max error 0.1 rad
float fast_atan2(float y, float x){
    930c:	defff704 	addi	sp,sp,-36
    9310:	df000815 	stw	fp,32(sp)
    9314:	df000804 	addi	fp,sp,32
    9318:	e13ffe15 	stw	r4,-8(fp)
    931c:	e17fff15 	stw	r5,-4(fp)
	float abs_y = fabs(y)+1e-10f;      // kludge to prevent 0/0 condition
    9320:	e0bffe17 	ldw	r2,-8(fp)
    9324:	1007f832 	custom	224,r3,r2,zero
    9328:	008bb734 	movhi	r2,11996
    932c:	10b9bfc4 	addi	r2,r2,-6401
    9330:	1885ff72 	custom	253,r2,r3,r2
    9334:	e0bff915 	stw	r2,-28(fp)
	float angle;
	if (x>=0)
    9338:	e0ffff17 	ldw	r3,-4(fp)
    933c:	0005883a 	mov	r2,zero
    9340:	1885f932 	custom	228,r2,r3,r2
    9344:	10001a26 	beq	r2,zero,93b0 <fast_atan2+0xa4>
	{
		float r = (x - abs_y) / (x + abs_y);
    9348:	e0ffff17 	ldw	r3,-4(fp)
    934c:	e0bff917 	ldw	r2,-28(fp)
    9350:	1887ffb2 	custom	254,r3,r3,r2
    9354:	e13fff17 	ldw	r4,-4(fp)
    9358:	e0bff917 	ldw	r2,-28(fp)
    935c:	2085ff72 	custom	253,r2,r4,r2
    9360:	1885fff2 	custom	255,r2,r3,r2
    9364:	e0bffa15 	stw	r2,-24(fp)
		float rsq = r*r;
    9368:	e0fffa17 	ldw	r3,-24(fp)
    936c:	e0bffa17 	ldw	r2,-24(fp)
    9370:	1885ff32 	custom	252,r2,r3,r2
    9374:	e0bffb15 	stw	r2,-20(fp)
		angle = ((0.1963f * rsq) - 0.9817f) * r + (PI_F/4.0f);
    9378:	e0fffb17 	ldw	r3,-20(fp)
    937c:	008f9274 	movhi	r2,15945
    9380:	1080b784 	addi	r2,r2,734
    9384:	1887ff32 	custom	252,r3,r3,r2
    9388:	008fdef4 	movhi	r2,16251
    938c:	10942c44 	addi	r2,r2,20657
    9390:	1887ffb2 	custom	254,r3,r3,r2
    9394:	e0bffa17 	ldw	r2,-24(fp)
    9398:	1887ff32 	custom	252,r3,r3,r2
    939c:	008fd274 	movhi	r2,16201
    93a0:	1083f6c4 	addi	r2,r2,4059
    93a4:	1885ff72 	custom	253,r2,r3,r2
    93a8:	e0bff815 	stw	r2,-32(fp)
    93ac:	00001906 	br	9414 <fast_atan2+0x108>
	}
	else
	{
		float r = (x + abs_y) / (abs_y - x);
    93b0:	e0ffff17 	ldw	r3,-4(fp)
    93b4:	e0bff917 	ldw	r2,-28(fp)
    93b8:	1887ff72 	custom	253,r3,r3,r2
    93bc:	e13ff917 	ldw	r4,-28(fp)
    93c0:	e0bfff17 	ldw	r2,-4(fp)
    93c4:	2085ffb2 	custom	254,r2,r4,r2
    93c8:	1885fff2 	custom	255,r2,r3,r2
    93cc:	e0bffc15 	stw	r2,-16(fp)
		float rsq = r*r;
    93d0:	e0fffc17 	ldw	r3,-16(fp)
    93d4:	e0bffc17 	ldw	r2,-16(fp)
    93d8:	1885ff32 	custom	252,r2,r3,r2
    93dc:	e0bffd15 	stw	r2,-12(fp)
		angle = ((0.1963f * rsq) - 0.9817f) * r + (3.0f*PI_F/4.0f);
    93e0:	e0fffd17 	ldw	r3,-12(fp)
    93e4:	008f9274 	movhi	r2,15945
    93e8:	1080b784 	addi	r2,r2,734
    93ec:	1887ff32 	custom	252,r3,r3,r2
    93f0:	008fdef4 	movhi	r2,16251
    93f4:	10942c44 	addi	r2,r2,20657
    93f8:	1887ffb2 	custom	254,r3,r3,r2
    93fc:	e0bffc17 	ldw	r2,-16(fp)
    9400:	1887ff32 	custom	252,r3,r3,r2
    9404:	009005f4 	movhi	r2,16407
    9408:	10b2f904 	addi	r2,r2,-13340
    940c:	1885ff72 	custom	253,r2,r3,r2
    9410:	e0bff815 	stw	r2,-32(fp)
	}
	if (y < 0)
    9414:	e0fffe17 	ldw	r3,-8(fp)
    9418:	0005883a 	mov	r2,zero
    941c:	1885f9f2 	custom	231,r2,r3,r2
    9420:	10000326 	beq	r2,zero,9430 <fast_atan2+0x124>
	return(-angle);     // negate if in quad III or IV
    9424:	e0bff817 	ldw	r2,-32(fp)
    9428:	1005f872 	custom	225,r2,r2,zero
    942c:	00000106 	br	9434 <fast_atan2+0x128>
	else
	return(angle);
    9430:	e0bff817 	ldw	r2,-32(fp)
    9434:	1007883a 	mov	r3,r2
}
    9438:	1805883a 	mov	r2,r3
    943c:	e037883a 	mov	sp,fp
    9440:	df000017 	ldw	fp,0(sp)
    9444:	dec00104 	addi	sp,sp,4
    9448:	f800283a 	ret

0000944c <fast_cossin>:

extern const float cospi_table[64]; //first octant of cos(x)
extern const float sinpi_table[64]; //first octant of sin(x)

//Argument reudction on theta is included in function. Max error 0.0002
void fast_cossin(float theta, float* cosout, float* sinout){
    944c:	deffef04 	addi	sp,sp,-68
    9450:	df001015 	stw	fp,64(sp)
    9454:	df001004 	addi	fp,sp,64
    9458:	e13ffd15 	stw	r4,-12(fp)
    945c:	e17ffe15 	stw	r5,-8(fp)
    9460:	e1bfff15 	stw	r6,-4(fp)

	// theta = -pi to pi is x = -2^15 to 2^15-1
	int x = theta*(((float)(1<<15))/PI_F);
    9464:	e0fffd17 	ldw	r3,-12(fp)
    9468:	009188f4 	movhi	r2,17955
    946c:	10be60c4 	addi	r2,r2,-1661
    9470:	1885ff32 	custom	252,r2,r3,r2
    9474:	1005fe72 	custom	249,r2,r2,zero
    9478:	e0bff415 	stw	r2,-48(fp)

	//Argument reduction to the first octant.
	//s is sign bit, qo (quadrant octant) is 2 bits, y is 13 bits which is built up of (t is 6 bits, h is 7 bits)
	unsigned int s = ((unsigned int)x & (1u<<15));//>>15;
    947c:	e0bff417 	ldw	r2,-48(fp)
    9480:	10a0000c 	andi	r2,r2,32768
    9484:	e0bff515 	stw	r2,-44(fp)
	unsigned int qo = ((unsigned int)x>>13) & 3u;
    9488:	e0bff417 	ldw	r2,-48(fp)
    948c:	1004d37a 	srli	r2,r2,13
    9490:	108000cc 	andi	r2,r2,3
    9494:	e0bff015 	stw	r2,-64(fp)
	unsigned int y = x & ((1u<<13)-1);
    9498:	e0bff417 	ldw	r2,-48(fp)
    949c:	1087ffcc 	andi	r2,r2,8191
    94a0:	e0bff115 	stw	r2,-60(fp)
	if (qo & 1) //if octant is odd we need to reverse argument
    94a4:	e0bff017 	ldw	r2,-64(fp)
    94a8:	1080004c 	andi	r2,r2,1
    94ac:	10000426 	beq	r2,zero,94c0 <fast_cossin+0x74>
		y = ((1u<<13)-1) - y;
    94b0:	00c7ffc4 	movi	r3,8191
    94b4:	e0bff117 	ldw	r2,-60(fp)
    94b8:	1885c83a 	sub	r2,r3,r2
    94bc:	e0bff115 	stw	r2,-60(fp)
	unsigned int t = y>>7;
    94c0:	e0bff117 	ldw	r2,-60(fp)
    94c4:	1004d1fa 	srli	r2,r2,7
    94c8:	e0bff615 	stw	r2,-40(fp)
	unsigned int h = y & ((1u<<7)-1);
    94cc:	e0bff117 	ldw	r2,-60(fp)
    94d0:	10801fcc 	andi	r2,r2,127
    94d4:	e0bff715 	stw	r2,-36(fp)

	//Solve sin and cos in 1st octant.
	//Lookup
	float cos_pit = cospi_table[t];
    94d8:	00c00074 	movhi	r3,1
    94dc:	18eabd04 	addi	r3,r3,-21772
    94e0:	e0bff617 	ldw	r2,-40(fp)
    94e4:	1085883a 	add	r2,r2,r2
    94e8:	1085883a 	add	r2,r2,r2
    94ec:	1885883a 	add	r2,r3,r2
    94f0:	10800017 	ldw	r2,0(r2)
    94f4:	e0bff815 	stw	r2,-32(fp)
	float sin_pit = sinpi_table[t];
    94f8:	00c00074 	movhi	r3,1
    94fc:	18eafd04 	addi	r3,r3,-21516
    9500:	e0bff617 	ldw	r2,-40(fp)
    9504:	1085883a 	add	r2,r2,r2
    9508:	1085883a 	add	r2,r2,r2
    950c:	1885883a 	add	r2,r3,r2
    9510:	10800017 	ldw	r2,0(r2)
    9514:	e0bff915 	stw	r2,-28(fp)

	//1st order interpolation
	float hf = (PI_F/((float)(1<<15))) * (float)h;
    9518:	e0bff717 	ldw	r2,-36(fp)
    951c:	10000316 	blt	r2,zero,952c <fast_cossin+0xe0>
    9520:	e0bff717 	ldw	r2,-36(fp)
    9524:	1005feb2 	custom	250,r2,r2,zero
    9528:	00000706 	br	9548 <fast_cossin+0xfc>
    952c:	e0bff717 	ldw	r2,-36(fp)
    9530:	1080004c 	andi	r2,r2,1
    9534:	e0fff717 	ldw	r3,-36(fp)
    9538:	1806d07a 	srli	r3,r3,1
    953c:	10c4b03a 	or	r2,r2,r3
    9540:	1005feb2 	custom	250,r2,r2,zero
    9544:	1085ff72 	custom	253,r2,r2,r2
    9548:	00ce3274 	movhi	r3,14537
    954c:	18c3f6c4 	addi	r3,r3,4059
    9550:	10c5ff32 	custom	252,r2,r2,r3
    9554:	e0bffa15 	stw	r2,-24(fp)
	float sinxh = sin_pit + hf*cos_pit;
    9558:	e0fffa17 	ldw	r3,-24(fp)
    955c:	e0bff817 	ldw	r2,-32(fp)
    9560:	1887ff32 	custom	252,r3,r3,r2
    9564:	e0bff917 	ldw	r2,-28(fp)
    9568:	1885ff72 	custom	253,r2,r3,r2
    956c:	e0bffb15 	stw	r2,-20(fp)
	float cosxh = cos_pit - hf*sin_pit;
    9570:	e0fffa17 	ldw	r3,-24(fp)
    9574:	e0bff917 	ldw	r2,-28(fp)
    9578:	1885ff32 	custom	252,r2,r3,r2
    957c:	e0fff817 	ldw	r3,-32(fp)
    9580:	1885ffb2 	custom	254,r2,r3,r2
    9584:	e0bffc15 	stw	r2,-16(fp)

	//Reconstruct actual sin and cos in full circle
	if (s)
    9588:	e0bff517 	ldw	r2,-44(fp)
    958c:	10000426 	beq	r2,zero,95a0 <fast_cossin+0x154>
		qo = (~qo) & 3u;
    9590:	e0bff017 	ldw	r2,-64(fp)
    9594:	0084303a 	nor	r2,zero,r2
    9598:	108000cc 	andi	r2,r2,3
    959c:	e0bff015 	stw	r2,-64(fp)
	float tempcosout;
	float tempsinout;
	switch (qo)
    95a0:	e0bff017 	ldw	r2,-64(fp)
    95a4:	10c00060 	cmpeqi	r3,r2,1
    95a8:	18000b1e 	bne	r3,zero,95d8 <fast_cossin+0x18c>
    95ac:	0080052e 	bgeu	zero,r2,95c4 <fast_cossin+0x178>
    95b0:	10c000a0 	cmpeqi	r3,r2,2
    95b4:	18000d1e 	bne	r3,zero,95ec <fast_cossin+0x1a0>
    95b8:	108000e0 	cmpeqi	r2,r2,3
    95bc:	1000111e 	bne	r2,zero,9604 <fast_cossin+0x1b8>
    95c0:	00001606 	br	961c <fast_cossin+0x1d0>
	{
		case 0:
			tempsinout = sinxh;
    95c4:	e0bffb17 	ldw	r2,-20(fp)
    95c8:	e0bff315 	stw	r2,-52(fp)
			tempcosout = cosxh;
    95cc:	e0bffc17 	ldw	r2,-16(fp)
    95d0:	e0bff215 	stw	r2,-56(fp)
			break;
    95d4:	00001106 	br	961c <fast_cossin+0x1d0>
		
		case 1:
			tempsinout = cosxh;
    95d8:	e0bffc17 	ldw	r2,-16(fp)
    95dc:	e0bff315 	stw	r2,-52(fp)
			tempcosout = sinxh;
    95e0:	e0bffb17 	ldw	r2,-20(fp)
    95e4:	e0bff215 	stw	r2,-56(fp)
			break;
    95e8:	00000c06 	br	961c <fast_cossin+0x1d0>
		
		case 2:
			tempsinout = cosxh;
    95ec:	e0bffc17 	ldw	r2,-16(fp)
    95f0:	e0bff315 	stw	r2,-52(fp)
			tempcosout = -sinxh;
    95f4:	e0bffb17 	ldw	r2,-20(fp)
    95f8:	1005f872 	custom	225,r2,r2,zero
    95fc:	e0bff215 	stw	r2,-56(fp)
			break;
    9600:	00000606 	br	961c <fast_cossin+0x1d0>
		
		case 3:
			tempsinout = sinxh;
    9604:	e0bffb17 	ldw	r2,-20(fp)
    9608:	e0bff315 	stw	r2,-52(fp)
			tempcosout = -cosxh;
    960c:	e0bffc17 	ldw	r2,-16(fp)
    9610:	1005f872 	custom	225,r2,r2,zero
    9614:	e0bff215 	stw	r2,-56(fp)
			break;
    9618:	0001883a 	nop
	}
	if (s)
    961c:	e0bff517 	ldw	r2,-44(fp)
    9620:	10000326 	beq	r2,zero,9630 <fast_cossin+0x1e4>
		tempsinout = -tempsinout;
    9624:	e0bff317 	ldw	r2,-52(fp)
    9628:	1005f872 	custom	225,r2,r2,zero
    962c:	e0bff315 	stw	r2,-52(fp)

	*cosout = tempcosout;
    9630:	e0bffe17 	ldw	r2,-8(fp)
    9634:	e0fff217 	ldw	r3,-56(fp)
    9638:	10c00015 	stw	r3,0(r2)
	*sinout = tempsinout;
    963c:	e0bfff17 	ldw	r2,-4(fp)
    9640:	e0fff317 	ldw	r3,-52(fp)
    9644:	10c00015 	stw	r3,0(r2)

}
    9648:	e037883a 	mov	sp,fp
    964c:	df000017 	ldw	fp,0(sp)
    9650:	dec00104 	addi	sp,sp,4
    9654:	f800283a 	ret

00009658 <Q_rsqrt>:

//Fast inverse square root, from http://en.wikipedia.org/wiki/Fast_inverse_square_root#Overview_of_the_code
float Q_rsqrt( float number )
{
    9658:	defffa04 	addi	sp,sp,-24
    965c:	df000515 	stw	fp,20(sp)
    9660:	df000504 	addi	fp,sp,20
    9664:	e13fff15 	stw	r4,-4(fp)
	int i;
	float x2, y;
	const float threehalfs = 1.5F;
    9668:	008ff034 	movhi	r2,16320
    966c:	e0bffb15 	stw	r2,-20(fp)

	x2 = number * 0.5F;
    9670:	e0ffff17 	ldw	r3,-4(fp)
    9674:	008fc034 	movhi	r2,16128
    9678:	1885ff32 	custom	252,r2,r3,r2
    967c:	e0bffc15 	stw	r2,-16(fp)
	y  = number;
    9680:	e0bfff17 	ldw	r2,-4(fp)
    9684:	e0bffe15 	stw	r2,-8(fp)
	i  = * ( int * ) &y;                       // evil floating point bit level hacking
    9688:	e0bffe04 	addi	r2,fp,-8
    968c:	10800017 	ldw	r2,0(r2)
    9690:	e0bffd15 	stw	r2,-12(fp)
	i  = 0x5f3759df - ( i >> 1 );               // what the fuck?
    9694:	e0bffd17 	ldw	r2,-12(fp)
    9698:	1005d07a 	srai	r2,r2,1
    969c:	00d7cdf4 	movhi	r3,24375
    96a0:	18d677c4 	addi	r3,r3,23007
    96a4:	1885c83a 	sub	r2,r3,r2
    96a8:	e0bffd15 	stw	r2,-12(fp)
	y  = * ( float * ) &i;
    96ac:	e0fffd04 	addi	r3,fp,-12
    96b0:	18800017 	ldw	r2,0(r3)
    96b4:	e0bffe15 	stw	r2,-8(fp)
	y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration
    96b8:	e0fffe17 	ldw	r3,-8(fp)
    96bc:	e0bffc17 	ldw	r2,-16(fp)
    96c0:	1887ff32 	custom	252,r3,r3,r2
    96c4:	e0bffe17 	ldw	r2,-8(fp)
    96c8:	1885ff32 	custom	252,r2,r3,r2
    96cc:	e0fffb17 	ldw	r3,-20(fp)
    96d0:	1887ffb2 	custom	254,r3,r3,r2
    96d4:	e0bffe17 	ldw	r2,-8(fp)
    96d8:	1885ff32 	custom	252,r2,r3,r2
    96dc:	e0bffe15 	stw	r2,-8(fp)
//      y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed

	return y;
    96e0:	e0fffe17 	ldw	r3,-8(fp)
    96e4:	1805883a 	mov	r2,r3
}
    96e8:	e037883a 	mov	sp,fp
    96ec:	df000017 	ldw	fp,0(sp)
    96f0:	dec00104 	addi	sp,sp,4
    96f4:	f800283a 	ret

000096f8 <udivmodsi4>:
    96f8:	2900182e 	bgeu	r5,r4,975c <udivmodsi4+0x64>
    96fc:	28001716 	blt	r5,zero,975c <udivmodsi4+0x64>
    9700:	00800804 	movi	r2,32
    9704:	00c00044 	movi	r3,1
    9708:	00000206 	br	9714 <udivmodsi4+0x1c>
    970c:	10001126 	beq	r2,zero,9754 <udivmodsi4+0x5c>
    9710:	28000516 	blt	r5,zero,9728 <udivmodsi4+0x30>
    9714:	294b883a 	add	r5,r5,r5
    9718:	10bfffc4 	addi	r2,r2,-1
    971c:	18c7883a 	add	r3,r3,r3
    9720:	293ffa36 	bltu	r5,r4,970c <_gp+0xffff63e8>
    9724:	18000b26 	beq	r3,zero,9754 <udivmodsi4+0x5c>
    9728:	0005883a 	mov	r2,zero
    972c:	21400236 	bltu	r4,r5,9738 <udivmodsi4+0x40>
    9730:	2149c83a 	sub	r4,r4,r5
    9734:	10c4b03a 	or	r2,r2,r3
    9738:	1806d07a 	srli	r3,r3,1
    973c:	280ad07a 	srli	r5,r5,1
    9740:	183ffa1e 	bne	r3,zero,972c <_gp+0xffff6408>
    9744:	3000011e 	bne	r6,zero,974c <udivmodsi4+0x54>
    9748:	f800283a 	ret
    974c:	2005883a 	mov	r2,r4
    9750:	f800283a 	ret
    9754:	0005883a 	mov	r2,zero
    9758:	003ffa06 	br	9744 <_gp+0xffff6420>
    975c:	00c00044 	movi	r3,1
    9760:	0005883a 	mov	r2,zero
    9764:	003ff106 	br	972c <_gp+0xffff6408>

00009768 <__divsi3>:
    9768:	deffff04 	addi	sp,sp,-4
    976c:	dfc00015 	stw	ra,0(sp)
    9770:	20000916 	blt	r4,zero,9798 <__divsi3+0x30>
    9774:	000f883a 	mov	r7,zero
    9778:	28000a16 	blt	r5,zero,97a4 <__divsi3+0x3c>
    977c:	000d883a 	mov	r6,zero
    9780:	00096f80 	call	96f8 <udivmodsi4>
    9784:	38000126 	beq	r7,zero,978c <__divsi3+0x24>
    9788:	0085c83a 	sub	r2,zero,r2
    978c:	dfc00017 	ldw	ra,0(sp)
    9790:	dec00104 	addi	sp,sp,4
    9794:	f800283a 	ret
    9798:	0109c83a 	sub	r4,zero,r4
    979c:	01c00044 	movi	r7,1
    97a0:	283ff60e 	bge	r5,zero,977c <_gp+0xffff6458>
    97a4:	014bc83a 	sub	r5,zero,r5
    97a8:	39c0005c 	xori	r7,r7,1
    97ac:	003ff306 	br	977c <_gp+0xffff6458>

000097b0 <__modsi3>:
    97b0:	20000316 	blt	r4,zero,97c0 <__modsi3+0x10>
    97b4:	28000c16 	blt	r5,zero,97e8 <__modsi3+0x38>
    97b8:	01800044 	movi	r6,1
    97bc:	00096f81 	jmpi	96f8 <udivmodsi4>
    97c0:	deffff04 	addi	sp,sp,-4
    97c4:	dfc00015 	stw	ra,0(sp)
    97c8:	0109c83a 	sub	r4,zero,r4
    97cc:	28000916 	blt	r5,zero,97f4 <__modsi3+0x44>
    97d0:	01800044 	movi	r6,1
    97d4:	00096f80 	call	96f8 <udivmodsi4>
    97d8:	0085c83a 	sub	r2,zero,r2
    97dc:	dfc00017 	ldw	ra,0(sp)
    97e0:	dec00104 	addi	sp,sp,4
    97e4:	f800283a 	ret
    97e8:	014bc83a 	sub	r5,zero,r5
    97ec:	01800044 	movi	r6,1
    97f0:	00096f81 	jmpi	96f8 <udivmodsi4>
    97f4:	014bc83a 	sub	r5,zero,r5
    97f8:	003ff506 	br	97d0 <_gp+0xffff64ac>

000097fc <__udivsi3>:
    97fc:	000d883a 	mov	r6,zero
    9800:	00096f81 	jmpi	96f8 <udivmodsi4>

00009804 <__umodsi3>:
    9804:	01800044 	movi	r6,1
    9808:	00096f81 	jmpi	96f8 <udivmodsi4>

0000980c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    980c:	defffc04 	addi	sp,sp,-16
    9810:	df000315 	stw	fp,12(sp)
    9814:	df000304 	addi	fp,sp,12
    9818:	e13ffd15 	stw	r4,-12(fp)
    981c:	e17ffe15 	stw	r5,-8(fp)
    9820:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9824:	e0fffe17 	ldw	r3,-8(fp)
    9828:	e0bffd17 	ldw	r2,-12(fp)
    982c:	18800c26 	beq	r3,r2,9860 <alt_load_section+0x54>
  {
    while( to != end )
    9830:	00000806 	br	9854 <alt_load_section+0x48>
    {
      *to++ = *from++;
    9834:	e0bffe17 	ldw	r2,-8(fp)
    9838:	10c00104 	addi	r3,r2,4
    983c:	e0fffe15 	stw	r3,-8(fp)
    9840:	e0fffd17 	ldw	r3,-12(fp)
    9844:	19000104 	addi	r4,r3,4
    9848:	e13ffd15 	stw	r4,-12(fp)
    984c:	18c00017 	ldw	r3,0(r3)
    9850:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9854:	e0fffe17 	ldw	r3,-8(fp)
    9858:	e0bfff17 	ldw	r2,-4(fp)
    985c:	18bff51e 	bne	r3,r2,9834 <_gp+0xffff6510>
    {
      *to++ = *from++;
    }
  }
}
    9860:	e037883a 	mov	sp,fp
    9864:	df000017 	ldw	fp,0(sp)
    9868:	dec00104 	addi	sp,sp,4
    986c:	f800283a 	ret

00009870 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9870:	defffe04 	addi	sp,sp,-8
    9874:	dfc00115 	stw	ra,4(sp)
    9878:	df000015 	stw	fp,0(sp)
    987c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9880:	01000074 	movhi	r4,1
    9884:	212ce704 	addi	r4,r4,-19556
    9888:	01400074 	movhi	r5,1
    988c:	296b4b04 	addi	r5,r5,-21204
    9890:	01800074 	movhi	r6,1
    9894:	31ace704 	addi	r6,r6,-19556
    9898:	000980c0 	call	980c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    989c:	01000074 	movhi	r4,1
    98a0:	21200804 	addi	r4,r4,-32736
    98a4:	01400074 	movhi	r5,1
    98a8:	29600804 	addi	r5,r5,-32736
    98ac:	01800074 	movhi	r6,1
    98b0:	31a00804 	addi	r6,r6,-32736
    98b4:	000980c0 	call	980c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    98b8:	01000074 	movhi	r4,1
    98bc:	212abd04 	addi	r4,r4,-21772
    98c0:	01400074 	movhi	r5,1
    98c4:	296abd04 	addi	r5,r5,-21772
    98c8:	01800074 	movhi	r6,1
    98cc:	31ab4b04 	addi	r6,r6,-21204
    98d0:	000980c0 	call	980c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    98d4:	0009d580 	call	9d58 <alt_dcache_flush_all>
  alt_icache_flush_all();
    98d8:	0009f700 	call	9f70 <alt_icache_flush_all>
}
    98dc:	e037883a 	mov	sp,fp
    98e0:	dfc00117 	ldw	ra,4(sp)
    98e4:	df000017 	ldw	fp,0(sp)
    98e8:	dec00204 	addi	sp,sp,8
    98ec:	f800283a 	ret

000098f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    98f0:	defffd04 	addi	sp,sp,-12
    98f4:	dfc00215 	stw	ra,8(sp)
    98f8:	df000115 	stw	fp,4(sp)
    98fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9900:	0009883a 	mov	r4,zero
    9904:	00099a00 	call	99a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9908:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    990c:	00099d40 	call	99d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9910:	01000074 	movhi	r4,1
    9914:	212b3d04 	addi	r4,r4,-21260
    9918:	01400074 	movhi	r5,1
    991c:	296b3d04 	addi	r5,r5,-21260
    9920:	01800074 	movhi	r6,1
    9924:	31ab3d04 	addi	r6,r6,-21260
    9928:	000a0600 	call	a060 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    992c:	0009eb80 	call	9eb8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9930:	01000074 	movhi	r4,1
    9934:	2127c504 	addi	r4,r4,-24812
    9938:	000a6ac0 	call	a6ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    993c:	d121c117 	ldw	r4,-30972(gp)
    9940:	d0e1c217 	ldw	r3,-30968(gp)
    9944:	d0a1c317 	ldw	r2,-30964(gp)
    9948:	180b883a 	mov	r5,r3
    994c:	100d883a 	mov	r6,r2
    9950:	0008b880 	call	8b88 <main>
    9954:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9958:	01000044 	movi	r4,1
    995c:	0009c900 	call	9c90 <close>
  exit (result);
    9960:	e13fff17 	ldw	r4,-4(fp)
    9964:	000a6c00 	call	a6c0 <exit>

00009968 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9968:	defffd04 	addi	sp,sp,-12
    996c:	dfc00215 	stw	ra,8(sp)
    9970:	df000115 	stw	fp,4(sp)
    9974:	df000104 	addi	fp,sp,4
    9978:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    997c:	e13fff17 	ldw	r4,-4(fp)
    9980:	01400074 	movhi	r5,1
    9984:	296ce104 	addi	r5,r5,-19580
    9988:	0009e180 	call	9e18 <alt_dev_llist_insert>
}
    998c:	e037883a 	mov	sp,fp
    9990:	dfc00117 	ldw	ra,4(sp)
    9994:	df000017 	ldw	fp,0(sp)
    9998:	dec00204 	addi	sp,sp,8
    999c:	f800283a 	ret

000099a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    99a0:	defffd04 	addi	sp,sp,-12
    99a4:	dfc00215 	stw	ra,8(sp)
    99a8:	df000115 	stw	fp,4(sp)
    99ac:	df000104 	addi	fp,sp,4
    99b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    99b4:	000a3a80 	call	a3a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    99b8:	00800044 	movi	r2,1
    99bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    99c0:	e037883a 	mov	sp,fp
    99c4:	dfc00117 	ldw	ra,4(sp)
    99c8:	df000017 	ldw	fp,0(sp)
    99cc:	dec00204 	addi	sp,sp,8
    99d0:	f800283a 	ret

000099d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    99d4:	defffe04 	addi	sp,sp,-8
    99d8:	dfc00115 	stw	ra,4(sp)
    99dc:	df000015 	stw	fp,0(sp)
    99e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    99e4:	01000074 	movhi	r4,1
    99e8:	212b4b04 	addi	r4,r4,-21204
    99ec:	00099680 	call	9968 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    99f0:	0001883a 	nop
}
    99f4:	e037883a 	mov	sp,fp
    99f8:	dfc00117 	ldw	ra,4(sp)
    99fc:	df000017 	ldw	fp,0(sp)
    9a00:	dec00204 	addi	sp,sp,8
    9a04:	f800283a 	ret

00009a08 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9a08:	defffa04 	addi	sp,sp,-24
    9a0c:	dfc00515 	stw	ra,20(sp)
    9a10:	df000415 	stw	fp,16(sp)
    9a14:	df000404 	addi	fp,sp,16
    9a18:	e13ffd15 	stw	r4,-12(fp)
    9a1c:	e17ffe15 	stw	r5,-8(fp)
    9a20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9a24:	e0bffd17 	ldw	r2,-12(fp)
    9a28:	10800017 	ldw	r2,0(r2)
    9a2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9a30:	e0bffc17 	ldw	r2,-16(fp)
    9a34:	10c00a04 	addi	r3,r2,40
    9a38:	e0bffd17 	ldw	r2,-12(fp)
    9a3c:	10800217 	ldw	r2,8(r2)
    9a40:	1809883a 	mov	r4,r3
    9a44:	e17ffe17 	ldw	r5,-8(fp)
    9a48:	e1bfff17 	ldw	r6,-4(fp)
    9a4c:	100f883a 	mov	r7,r2
    9a50:	0009ac80 	call	9ac8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9a54:	e037883a 	mov	sp,fp
    9a58:	dfc00117 	ldw	ra,4(sp)
    9a5c:	df000017 	ldw	fp,0(sp)
    9a60:	dec00204 	addi	sp,sp,8
    9a64:	f800283a 	ret

00009a68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9a68:	defffa04 	addi	sp,sp,-24
    9a6c:	dfc00515 	stw	ra,20(sp)
    9a70:	df000415 	stw	fp,16(sp)
    9a74:	df000404 	addi	fp,sp,16
    9a78:	e13ffd15 	stw	r4,-12(fp)
    9a7c:	e17ffe15 	stw	r5,-8(fp)
    9a80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9a84:	e0bffd17 	ldw	r2,-12(fp)
    9a88:	10800017 	ldw	r2,0(r2)
    9a8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9a90:	e0bffc17 	ldw	r2,-16(fp)
    9a94:	10c00a04 	addi	r3,r2,40
    9a98:	e0bffd17 	ldw	r2,-12(fp)
    9a9c:	10800217 	ldw	r2,8(r2)
    9aa0:	1809883a 	mov	r4,r3
    9aa4:	e17ffe17 	ldw	r5,-8(fp)
    9aa8:	e1bfff17 	ldw	r6,-4(fp)
    9aac:	100f883a 	mov	r7,r2
    9ab0:	0009bac0 	call	9bac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9ab4:	e037883a 	mov	sp,fp
    9ab8:	dfc00117 	ldw	ra,4(sp)
    9abc:	df000017 	ldw	fp,0(sp)
    9ac0:	dec00204 	addi	sp,sp,8
    9ac4:	f800283a 	ret

00009ac8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9ac8:	defff704 	addi	sp,sp,-36
    9acc:	df000815 	stw	fp,32(sp)
    9ad0:	df000804 	addi	fp,sp,32
    9ad4:	e13ffc15 	stw	r4,-16(fp)
    9ad8:	e17ffd15 	stw	r5,-12(fp)
    9adc:	e1bffe15 	stw	r6,-8(fp)
    9ae0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9ae4:	e0bffc17 	ldw	r2,-16(fp)
    9ae8:	10800017 	ldw	r2,0(r2)
    9aec:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9af0:	e0bffd17 	ldw	r2,-12(fp)
    9af4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9af8:	e0bffe17 	ldw	r2,-8(fp)
    9afc:	e0fffd17 	ldw	r3,-12(fp)
    9b00:	1885883a 	add	r2,r3,r2
    9b04:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9b08:	00001406 	br	9b5c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9b0c:	e0bff917 	ldw	r2,-28(fp)
    9b10:	10800037 	ldwio	r2,0(r2)
    9b14:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9b18:	e0bffb17 	ldw	r2,-20(fp)
    9b1c:	10a0000c 	andi	r2,r2,32768
    9b20:	10000626 	beq	r2,zero,9b3c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9b24:	e0bff817 	ldw	r2,-32(fp)
    9b28:	10c00044 	addi	r3,r2,1
    9b2c:	e0fff815 	stw	r3,-32(fp)
    9b30:	e0fffb17 	ldw	r3,-20(fp)
    9b34:	10c00005 	stb	r3,0(r2)
    9b38:	00000806 	br	9b5c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    9b3c:	e0fff817 	ldw	r3,-32(fp)
    9b40:	e0bffd17 	ldw	r2,-12(fp)
    9b44:	18800126 	beq	r3,r2,9b4c <altera_avalon_jtag_uart_read+0x84>
      break;
    9b48:	00000706 	br	9b68 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    9b4c:	e0bfff17 	ldw	r2,-4(fp)
    9b50:	1090000c 	andi	r2,r2,16384
    9b54:	10000126 	beq	r2,zero,9b5c <altera_avalon_jtag_uart_read+0x94>
      break;   
    9b58:	00000306 	br	9b68 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9b5c:	e0fff817 	ldw	r3,-32(fp)
    9b60:	e0bffa17 	ldw	r2,-24(fp)
    9b64:	18bfe936 	bltu	r3,r2,9b0c <_gp+0xffff67e8>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    9b68:	e0fff817 	ldw	r3,-32(fp)
    9b6c:	e0bffd17 	ldw	r2,-12(fp)
    9b70:	18800426 	beq	r3,r2,9b84 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    9b74:	e0fff817 	ldw	r3,-32(fp)
    9b78:	e0bffd17 	ldw	r2,-12(fp)
    9b7c:	1885c83a 	sub	r2,r3,r2
    9b80:	00000606 	br	9b9c <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    9b84:	e0bfff17 	ldw	r2,-4(fp)
    9b88:	1090000c 	andi	r2,r2,16384
    9b8c:	10000226 	beq	r2,zero,9b98 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    9b90:	00bffd44 	movi	r2,-11
    9b94:	00000106 	br	9b9c <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    9b98:	00bffec4 	movi	r2,-5
}
    9b9c:	e037883a 	mov	sp,fp
    9ba0:	df000017 	ldw	fp,0(sp)
    9ba4:	dec00104 	addi	sp,sp,4
    9ba8:	f800283a 	ret

00009bac <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9bac:	defff904 	addi	sp,sp,-28
    9bb0:	df000615 	stw	fp,24(sp)
    9bb4:	df000604 	addi	fp,sp,24
    9bb8:	e13ffc15 	stw	r4,-16(fp)
    9bbc:	e17ffd15 	stw	r5,-12(fp)
    9bc0:	e1bffe15 	stw	r6,-8(fp)
    9bc4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9bc8:	e0bffc17 	ldw	r2,-16(fp)
    9bcc:	10800017 	ldw	r2,0(r2)
    9bd0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9bd4:	e0bffe17 	ldw	r2,-8(fp)
    9bd8:	e0fffd17 	ldw	r3,-12(fp)
    9bdc:	1885883a 	add	r2,r3,r2
    9be0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9be4:	00000e06 	br	9c20 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9be8:	e0bffa17 	ldw	r2,-24(fp)
    9bec:	10800104 	addi	r2,r2,4
    9bf0:	10800037 	ldwio	r2,0(r2)
    9bf4:	10bfffec 	andhi	r2,r2,65535
    9bf8:	10000926 	beq	r2,zero,9c20 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9bfc:	e0fffa17 	ldw	r3,-24(fp)
    9c00:	e0bffd17 	ldw	r2,-12(fp)
    9c04:	11000044 	addi	r4,r2,1
    9c08:	e13ffd15 	stw	r4,-12(fp)
    9c0c:	10800003 	ldbu	r2,0(r2)
    9c10:	10803fcc 	andi	r2,r2,255
    9c14:	1080201c 	xori	r2,r2,128
    9c18:	10bfe004 	addi	r2,r2,-128
    9c1c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9c20:	e0fffd17 	ldw	r3,-12(fp)
    9c24:	e0bffb17 	ldw	r2,-20(fp)
    9c28:	18bfef36 	bltu	r3,r2,9be8 <_gp+0xffff68c4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9c2c:	e0bffe17 	ldw	r2,-8(fp)
}
    9c30:	e037883a 	mov	sp,fp
    9c34:	df000017 	ldw	fp,0(sp)
    9c38:	dec00104 	addi	sp,sp,4
    9c3c:	f800283a 	ret

00009c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9c40:	defffe04 	addi	sp,sp,-8
    9c44:	dfc00115 	stw	ra,4(sp)
    9c48:	df000015 	stw	fp,0(sp)
    9c4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9c50:	00800074 	movhi	r2,1
    9c54:	10ace404 	addi	r2,r2,-19568
    9c58:	10800017 	ldw	r2,0(r2)
    9c5c:	10000526 	beq	r2,zero,9c74 <alt_get_errno+0x34>
    9c60:	00800074 	movhi	r2,1
    9c64:	10ace404 	addi	r2,r2,-19568
    9c68:	10800017 	ldw	r2,0(r2)
    9c6c:	103ee83a 	callr	r2
    9c70:	00000206 	br	9c7c <alt_get_errno+0x3c>
    9c74:	00800074 	movhi	r2,1
    9c78:	10ae8d04 	addi	r2,r2,-17868
}
    9c7c:	e037883a 	mov	sp,fp
    9c80:	dfc00117 	ldw	ra,4(sp)
    9c84:	df000017 	ldw	fp,0(sp)
    9c88:	dec00204 	addi	sp,sp,8
    9c8c:	f800283a 	ret

00009c90 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9c90:	defffb04 	addi	sp,sp,-20
    9c94:	dfc00415 	stw	ra,16(sp)
    9c98:	df000315 	stw	fp,12(sp)
    9c9c:	df000304 	addi	fp,sp,12
    9ca0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9ca4:	e0bfff17 	ldw	r2,-4(fp)
    9ca8:	10000616 	blt	r2,zero,9cc4 <close+0x34>
    9cac:	e0bfff17 	ldw	r2,-4(fp)
    9cb0:	10c00324 	muli	r3,r2,12
    9cb4:	00800074 	movhi	r2,1
    9cb8:	10ab6004 	addi	r2,r2,-21120
    9cbc:	1885883a 	add	r2,r3,r2
    9cc0:	00000106 	br	9cc8 <close+0x38>
    9cc4:	0005883a 	mov	r2,zero
    9cc8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9ccc:	e0bffd17 	ldw	r2,-12(fp)
    9cd0:	10001826 	beq	r2,zero,9d34 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9cd4:	e0bffd17 	ldw	r2,-12(fp)
    9cd8:	10800017 	ldw	r2,0(r2)
    9cdc:	10800417 	ldw	r2,16(r2)
    9ce0:	10000626 	beq	r2,zero,9cfc <close+0x6c>
    9ce4:	e0bffd17 	ldw	r2,-12(fp)
    9ce8:	10800017 	ldw	r2,0(r2)
    9cec:	10800417 	ldw	r2,16(r2)
    9cf0:	e13ffd17 	ldw	r4,-12(fp)
    9cf4:	103ee83a 	callr	r2
    9cf8:	00000106 	br	9d00 <close+0x70>
    9cfc:	0005883a 	mov	r2,zero
    9d00:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9d04:	e13fff17 	ldw	r4,-4(fp)
    9d08:	000a3480 	call	a348 <alt_release_fd>
    if (rval < 0)
    9d0c:	e0bffe17 	ldw	r2,-8(fp)
    9d10:	1000060e 	bge	r2,zero,9d2c <close+0x9c>
    {
      ALT_ERRNO = -rval;
    9d14:	0009c400 	call	9c40 <alt_get_errno>
    9d18:	e0fffe17 	ldw	r3,-8(fp)
    9d1c:	00c7c83a 	sub	r3,zero,r3
    9d20:	10c00015 	stw	r3,0(r2)
      return -1;
    9d24:	00bfffc4 	movi	r2,-1
    9d28:	00000606 	br	9d44 <close+0xb4>
    }
    return 0;
    9d2c:	0005883a 	mov	r2,zero
    9d30:	00000406 	br	9d44 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9d34:	0009c400 	call	9c40 <alt_get_errno>
    9d38:	00c01444 	movi	r3,81
    9d3c:	10c00015 	stw	r3,0(r2)
    return -1;
    9d40:	00bfffc4 	movi	r2,-1
  }
}
    9d44:	e037883a 	mov	sp,fp
    9d48:	dfc00117 	ldw	ra,4(sp)
    9d4c:	df000017 	ldw	fp,0(sp)
    9d50:	dec00204 	addi	sp,sp,8
    9d54:	f800283a 	ret

00009d58 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9d58:	defffe04 	addi	sp,sp,-8
    9d5c:	df000115 	stw	fp,4(sp)
    9d60:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9d64:	e03fff15 	stw	zero,-4(fp)
    9d68:	00000506 	br	9d80 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    9d6c:	e0bfff17 	ldw	r2,-4(fp)
    9d70:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9d74:	e0bfff17 	ldw	r2,-4(fp)
    9d78:	10800804 	addi	r2,r2,32
    9d7c:	e0bfff15 	stw	r2,-4(fp)
    9d80:	e0bfff17 	ldw	r2,-4(fp)
    9d84:	10810030 	cmpltui	r2,r2,1024
    9d88:	103ff81e 	bne	r2,zero,9d6c <_gp+0xffff6a48>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9d8c:	e037883a 	mov	sp,fp
    9d90:	df000017 	ldw	fp,0(sp)
    9d94:	dec00104 	addi	sp,sp,4
    9d98:	f800283a 	ret

00009d9c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9d9c:	defffc04 	addi	sp,sp,-16
    9da0:	df000315 	stw	fp,12(sp)
    9da4:	df000304 	addi	fp,sp,12
    9da8:	e13ffd15 	stw	r4,-12(fp)
    9dac:	e17ffe15 	stw	r5,-8(fp)
    9db0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9db4:	e0bfff17 	ldw	r2,-4(fp)
}
    9db8:	e037883a 	mov	sp,fp
    9dbc:	df000017 	ldw	fp,0(sp)
    9dc0:	dec00104 	addi	sp,sp,4
    9dc4:	f800283a 	ret

00009dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9dc8:	defffe04 	addi	sp,sp,-8
    9dcc:	dfc00115 	stw	ra,4(sp)
    9dd0:	df000015 	stw	fp,0(sp)
    9dd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9dd8:	00800074 	movhi	r2,1
    9ddc:	10ace404 	addi	r2,r2,-19568
    9de0:	10800017 	ldw	r2,0(r2)
    9de4:	10000526 	beq	r2,zero,9dfc <alt_get_errno+0x34>
    9de8:	00800074 	movhi	r2,1
    9dec:	10ace404 	addi	r2,r2,-19568
    9df0:	10800017 	ldw	r2,0(r2)
    9df4:	103ee83a 	callr	r2
    9df8:	00000206 	br	9e04 <alt_get_errno+0x3c>
    9dfc:	00800074 	movhi	r2,1
    9e00:	10ae8d04 	addi	r2,r2,-17868
}
    9e04:	e037883a 	mov	sp,fp
    9e08:	dfc00117 	ldw	ra,4(sp)
    9e0c:	df000017 	ldw	fp,0(sp)
    9e10:	dec00204 	addi	sp,sp,8
    9e14:	f800283a 	ret

00009e18 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9e18:	defffa04 	addi	sp,sp,-24
    9e1c:	dfc00515 	stw	ra,20(sp)
    9e20:	df000415 	stw	fp,16(sp)
    9e24:	df000404 	addi	fp,sp,16
    9e28:	e13ffe15 	stw	r4,-8(fp)
    9e2c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9e30:	e0bffe17 	ldw	r2,-8(fp)
    9e34:	10000326 	beq	r2,zero,9e44 <alt_dev_llist_insert+0x2c>
    9e38:	e0bffe17 	ldw	r2,-8(fp)
    9e3c:	10800217 	ldw	r2,8(r2)
    9e40:	1000051e 	bne	r2,zero,9e58 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    9e44:	0009dc80 	call	9dc8 <alt_get_errno>
    9e48:	00c00584 	movi	r3,22
    9e4c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9e50:	00bffa84 	movi	r2,-22
    9e54:	00001306 	br	9ea4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9e58:	e0bffe17 	ldw	r2,-8(fp)
    9e5c:	e0ffff17 	ldw	r3,-4(fp)
    9e60:	e0fffc15 	stw	r3,-16(fp)
    9e64:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9e68:	e0bffd17 	ldw	r2,-12(fp)
    9e6c:	e0fffc17 	ldw	r3,-16(fp)
    9e70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9e74:	e0bffc17 	ldw	r2,-16(fp)
    9e78:	10c00017 	ldw	r3,0(r2)
    9e7c:	e0bffd17 	ldw	r2,-12(fp)
    9e80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9e84:	e0bffc17 	ldw	r2,-16(fp)
    9e88:	10800017 	ldw	r2,0(r2)
    9e8c:	e0fffd17 	ldw	r3,-12(fp)
    9e90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9e94:	e0bffc17 	ldw	r2,-16(fp)
    9e98:	e0fffd17 	ldw	r3,-12(fp)
    9e9c:	10c00015 	stw	r3,0(r2)

  return 0;  
    9ea0:	0005883a 	mov	r2,zero
}
    9ea4:	e037883a 	mov	sp,fp
    9ea8:	dfc00117 	ldw	ra,4(sp)
    9eac:	df000017 	ldw	fp,0(sp)
    9eb0:	dec00204 	addi	sp,sp,8
    9eb4:	f800283a 	ret

00009eb8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9eb8:	defffd04 	addi	sp,sp,-12
    9ebc:	dfc00215 	stw	ra,8(sp)
    9ec0:	df000115 	stw	fp,4(sp)
    9ec4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9ec8:	00800074 	movhi	r2,1
    9ecc:	10aabc04 	addi	r2,r2,-21776
    9ed0:	e0bfff15 	stw	r2,-4(fp)
    9ed4:	00000606 	br	9ef0 <_do_ctors+0x38>
        (*ctor) (); 
    9ed8:	e0bfff17 	ldw	r2,-4(fp)
    9edc:	10800017 	ldw	r2,0(r2)
    9ee0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9ee4:	e0bfff17 	ldw	r2,-4(fp)
    9ee8:	10bfff04 	addi	r2,r2,-4
    9eec:	e0bfff15 	stw	r2,-4(fp)
    9ef0:	e0ffff17 	ldw	r3,-4(fp)
    9ef4:	00800074 	movhi	r2,1
    9ef8:	10aabd04 	addi	r2,r2,-21772
    9efc:	18bff62e 	bgeu	r3,r2,9ed8 <_gp+0xffff6bb4>
        (*ctor) (); 
}
    9f00:	e037883a 	mov	sp,fp
    9f04:	dfc00117 	ldw	ra,4(sp)
    9f08:	df000017 	ldw	fp,0(sp)
    9f0c:	dec00204 	addi	sp,sp,8
    9f10:	f800283a 	ret

00009f14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9f14:	defffd04 	addi	sp,sp,-12
    9f18:	dfc00215 	stw	ra,8(sp)
    9f1c:	df000115 	stw	fp,4(sp)
    9f20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9f24:	00800074 	movhi	r2,1
    9f28:	10aabc04 	addi	r2,r2,-21776
    9f2c:	e0bfff15 	stw	r2,-4(fp)
    9f30:	00000606 	br	9f4c <_do_dtors+0x38>
        (*dtor) (); 
    9f34:	e0bfff17 	ldw	r2,-4(fp)
    9f38:	10800017 	ldw	r2,0(r2)
    9f3c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9f40:	e0bfff17 	ldw	r2,-4(fp)
    9f44:	10bfff04 	addi	r2,r2,-4
    9f48:	e0bfff15 	stw	r2,-4(fp)
    9f4c:	e0ffff17 	ldw	r3,-4(fp)
    9f50:	00800074 	movhi	r2,1
    9f54:	10aabd04 	addi	r2,r2,-21772
    9f58:	18bff62e 	bgeu	r3,r2,9f34 <_gp+0xffff6c10>
        (*dtor) (); 
}
    9f5c:	e037883a 	mov	sp,fp
    9f60:	dfc00117 	ldw	ra,4(sp)
    9f64:	df000017 	ldw	fp,0(sp)
    9f68:	dec00204 	addi	sp,sp,8
    9f6c:	f800283a 	ret

00009f70 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9f70:	defffe04 	addi	sp,sp,-8
    9f74:	dfc00115 	stw	ra,4(sp)
    9f78:	df000015 	stw	fp,0(sp)
    9f7c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9f80:	0009883a 	mov	r4,zero
    9f84:	01440004 	movi	r5,4096
    9f88:	000a6200 	call	a620 <alt_icache_flush>
#endif
}
    9f8c:	e037883a 	mov	sp,fp
    9f90:	dfc00117 	ldw	ra,4(sp)
    9f94:	df000017 	ldw	fp,0(sp)
    9f98:	dec00204 	addi	sp,sp,8
    9f9c:	f800283a 	ret

00009fa0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9fa0:	defff904 	addi	sp,sp,-28
    9fa4:	dfc00615 	stw	ra,24(sp)
    9fa8:	df000515 	stw	fp,20(sp)
    9fac:	df000504 	addi	fp,sp,20
    9fb0:	e13ffc15 	stw	r4,-16(fp)
    9fb4:	e17ffd15 	stw	r5,-12(fp)
    9fb8:	e1bffe15 	stw	r6,-8(fp)
    9fbc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9fc0:	e13ffd17 	ldw	r4,-12(fp)
    9fc4:	e17ffe17 	ldw	r5,-8(fp)
    9fc8:	e1bfff17 	ldw	r6,-4(fp)
    9fcc:	000a1f40 	call	a1f4 <open>
    9fd0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9fd4:	e0bffb17 	ldw	r2,-20(fp)
    9fd8:	10001c16 	blt	r2,zero,a04c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    9fdc:	00c00074 	movhi	r3,1
    9fe0:	18eb6004 	addi	r3,r3,-21120
    9fe4:	e0bffb17 	ldw	r2,-20(fp)
    9fe8:	10800324 	muli	r2,r2,12
    9fec:	1885883a 	add	r2,r3,r2
    9ff0:	10c00017 	ldw	r3,0(r2)
    9ff4:	e0bffc17 	ldw	r2,-16(fp)
    9ff8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9ffc:	00c00074 	movhi	r3,1
    a000:	18eb6004 	addi	r3,r3,-21120
    a004:	e0bffb17 	ldw	r2,-20(fp)
    a008:	10800324 	muli	r2,r2,12
    a00c:	1885883a 	add	r2,r3,r2
    a010:	10800104 	addi	r2,r2,4
    a014:	10c00017 	ldw	r3,0(r2)
    a018:	e0bffc17 	ldw	r2,-16(fp)
    a01c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a020:	00c00074 	movhi	r3,1
    a024:	18eb6004 	addi	r3,r3,-21120
    a028:	e0bffb17 	ldw	r2,-20(fp)
    a02c:	10800324 	muli	r2,r2,12
    a030:	1885883a 	add	r2,r3,r2
    a034:	10800204 	addi	r2,r2,8
    a038:	10c00017 	ldw	r3,0(r2)
    a03c:	e0bffc17 	ldw	r2,-16(fp)
    a040:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a044:	e13ffb17 	ldw	r4,-20(fp)
    a048:	000a3480 	call	a348 <alt_release_fd>
  }
} 
    a04c:	e037883a 	mov	sp,fp
    a050:	dfc00117 	ldw	ra,4(sp)
    a054:	df000017 	ldw	fp,0(sp)
    a058:	dec00204 	addi	sp,sp,8
    a05c:	f800283a 	ret

0000a060 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a060:	defffb04 	addi	sp,sp,-20
    a064:	dfc00415 	stw	ra,16(sp)
    a068:	df000315 	stw	fp,12(sp)
    a06c:	df000304 	addi	fp,sp,12
    a070:	e13ffd15 	stw	r4,-12(fp)
    a074:	e17ffe15 	stw	r5,-8(fp)
    a078:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a07c:	01000074 	movhi	r4,1
    a080:	212b6304 	addi	r4,r4,-21108
    a084:	e17ffd17 	ldw	r5,-12(fp)
    a088:	01800044 	movi	r6,1
    a08c:	01c07fc4 	movi	r7,511
    a090:	0009fa00 	call	9fa0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a094:	01000074 	movhi	r4,1
    a098:	212b6004 	addi	r4,r4,-21120
    a09c:	e17ffe17 	ldw	r5,-8(fp)
    a0a0:	000d883a 	mov	r6,zero
    a0a4:	01c07fc4 	movi	r7,511
    a0a8:	0009fa00 	call	9fa0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a0ac:	01000074 	movhi	r4,1
    a0b0:	212b6604 	addi	r4,r4,-21096
    a0b4:	e17fff17 	ldw	r5,-4(fp)
    a0b8:	01800044 	movi	r6,1
    a0bc:	01c07fc4 	movi	r7,511
    a0c0:	0009fa00 	call	9fa0 <alt_open_fd>
}  
    a0c4:	e037883a 	mov	sp,fp
    a0c8:	dfc00117 	ldw	ra,4(sp)
    a0cc:	df000017 	ldw	fp,0(sp)
    a0d0:	dec00204 	addi	sp,sp,8
    a0d4:	f800283a 	ret

0000a0d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a0d8:	defffe04 	addi	sp,sp,-8
    a0dc:	dfc00115 	stw	ra,4(sp)
    a0e0:	df000015 	stw	fp,0(sp)
    a0e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a0e8:	00800074 	movhi	r2,1
    a0ec:	10ace404 	addi	r2,r2,-19568
    a0f0:	10800017 	ldw	r2,0(r2)
    a0f4:	10000526 	beq	r2,zero,a10c <alt_get_errno+0x34>
    a0f8:	00800074 	movhi	r2,1
    a0fc:	10ace404 	addi	r2,r2,-19568
    a100:	10800017 	ldw	r2,0(r2)
    a104:	103ee83a 	callr	r2
    a108:	00000206 	br	a114 <alt_get_errno+0x3c>
    a10c:	00800074 	movhi	r2,1
    a110:	10ae8d04 	addi	r2,r2,-17868
}
    a114:	e037883a 	mov	sp,fp
    a118:	dfc00117 	ldw	ra,4(sp)
    a11c:	df000017 	ldw	fp,0(sp)
    a120:	dec00204 	addi	sp,sp,8
    a124:	f800283a 	ret

0000a128 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a128:	defffd04 	addi	sp,sp,-12
    a12c:	df000215 	stw	fp,8(sp)
    a130:	df000204 	addi	fp,sp,8
    a134:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a138:	e0bfff17 	ldw	r2,-4(fp)
    a13c:	10800217 	ldw	r2,8(r2)
    a140:	10d00034 	orhi	r3,r2,16384
    a144:	e0bfff17 	ldw	r2,-4(fp)
    a148:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a14c:	e03ffe15 	stw	zero,-8(fp)
    a150:	00001d06 	br	a1c8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a154:	00c00074 	movhi	r3,1
    a158:	18eb6004 	addi	r3,r3,-21120
    a15c:	e0bffe17 	ldw	r2,-8(fp)
    a160:	10800324 	muli	r2,r2,12
    a164:	1885883a 	add	r2,r3,r2
    a168:	10c00017 	ldw	r3,0(r2)
    a16c:	e0bfff17 	ldw	r2,-4(fp)
    a170:	10800017 	ldw	r2,0(r2)
    a174:	1880111e 	bne	r3,r2,a1bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a178:	00c00074 	movhi	r3,1
    a17c:	18eb6004 	addi	r3,r3,-21120
    a180:	e0bffe17 	ldw	r2,-8(fp)
    a184:	10800324 	muli	r2,r2,12
    a188:	1885883a 	add	r2,r3,r2
    a18c:	10800204 	addi	r2,r2,8
    a190:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a194:	1000090e 	bge	r2,zero,a1bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a198:	e0bffe17 	ldw	r2,-8(fp)
    a19c:	10c00324 	muli	r3,r2,12
    a1a0:	00800074 	movhi	r2,1
    a1a4:	10ab6004 	addi	r2,r2,-21120
    a1a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a1ac:	e0bfff17 	ldw	r2,-4(fp)
    a1b0:	18800226 	beq	r3,r2,a1bc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a1b4:	00bffcc4 	movi	r2,-13
    a1b8:	00000a06 	br	a1e4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a1bc:	e0bffe17 	ldw	r2,-8(fp)
    a1c0:	10800044 	addi	r2,r2,1
    a1c4:	e0bffe15 	stw	r2,-8(fp)
    a1c8:	00800074 	movhi	r2,1
    a1cc:	10ace304 	addi	r2,r2,-19572
    a1d0:	10800017 	ldw	r2,0(r2)
    a1d4:	1007883a 	mov	r3,r2
    a1d8:	e0bffe17 	ldw	r2,-8(fp)
    a1dc:	18bfdd2e 	bgeu	r3,r2,a154 <_gp+0xffff6e30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a1e0:	0005883a 	mov	r2,zero
}
    a1e4:	e037883a 	mov	sp,fp
    a1e8:	df000017 	ldw	fp,0(sp)
    a1ec:	dec00104 	addi	sp,sp,4
    a1f0:	f800283a 	ret

0000a1f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a1f4:	defff604 	addi	sp,sp,-40
    a1f8:	dfc00915 	stw	ra,36(sp)
    a1fc:	df000815 	stw	fp,32(sp)
    a200:	df000804 	addi	fp,sp,32
    a204:	e13ffd15 	stw	r4,-12(fp)
    a208:	e17ffe15 	stw	r5,-8(fp)
    a20c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a210:	00bfffc4 	movi	r2,-1
    a214:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a218:	00bffb44 	movi	r2,-19
    a21c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a220:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a224:	e13ffd17 	ldw	r4,-12(fp)
    a228:	01400074 	movhi	r5,1
    a22c:	296ce104 	addi	r5,r5,-19580
    a230:	000a3c80 	call	a3c8 <alt_find_dev>
    a234:	e0bff815 	stw	r2,-32(fp)
    a238:	e0bff817 	ldw	r2,-32(fp)
    a23c:	1000051e 	bne	r2,zero,a254 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a240:	e13ffd17 	ldw	r4,-12(fp)
    a244:	000a4580 	call	a458 <alt_find_file>
    a248:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a24c:	00800044 	movi	r2,1
    a250:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a254:	e0bff817 	ldw	r2,-32(fp)
    a258:	10002926 	beq	r2,zero,a300 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a25c:	e13ff817 	ldw	r4,-32(fp)
    a260:	000a56c0 	call	a56c <alt_get_fd>
    a264:	e0bff915 	stw	r2,-28(fp)
    a268:	e0bff917 	ldw	r2,-28(fp)
    a26c:	1000030e 	bge	r2,zero,a27c <open+0x88>
    {
      status = index;
    a270:	e0bff917 	ldw	r2,-28(fp)
    a274:	e0bffa15 	stw	r2,-24(fp)
    a278:	00002306 	br	a308 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    a27c:	e0bff917 	ldw	r2,-28(fp)
    a280:	10c00324 	muli	r3,r2,12
    a284:	00800074 	movhi	r2,1
    a288:	10ab6004 	addi	r2,r2,-21120
    a28c:	1885883a 	add	r2,r3,r2
    a290:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a294:	e0fffe17 	ldw	r3,-8(fp)
    a298:	00900034 	movhi	r2,16384
    a29c:	10bfffc4 	addi	r2,r2,-1
    a2a0:	1886703a 	and	r3,r3,r2
    a2a4:	e0bffc17 	ldw	r2,-16(fp)
    a2a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a2ac:	e0bffb17 	ldw	r2,-20(fp)
    a2b0:	1000051e 	bne	r2,zero,a2c8 <open+0xd4>
    a2b4:	e13ffc17 	ldw	r4,-16(fp)
    a2b8:	000a1280 	call	a128 <alt_file_locked>
    a2bc:	e0bffa15 	stw	r2,-24(fp)
    a2c0:	e0bffa17 	ldw	r2,-24(fp)
    a2c4:	10001016 	blt	r2,zero,a308 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a2c8:	e0bff817 	ldw	r2,-32(fp)
    a2cc:	10800317 	ldw	r2,12(r2)
    a2d0:	10000826 	beq	r2,zero,a2f4 <open+0x100>
    a2d4:	e0bff817 	ldw	r2,-32(fp)
    a2d8:	10800317 	ldw	r2,12(r2)
    a2dc:	e13ffc17 	ldw	r4,-16(fp)
    a2e0:	e17ffd17 	ldw	r5,-12(fp)
    a2e4:	e1bffe17 	ldw	r6,-8(fp)
    a2e8:	e1ffff17 	ldw	r7,-4(fp)
    a2ec:	103ee83a 	callr	r2
    a2f0:	00000106 	br	a2f8 <open+0x104>
    a2f4:	0005883a 	mov	r2,zero
    a2f8:	e0bffa15 	stw	r2,-24(fp)
    a2fc:	00000206 	br	a308 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a300:	00bffb44 	movi	r2,-19
    a304:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a308:	e0bffa17 	ldw	r2,-24(fp)
    a30c:	1000080e 	bge	r2,zero,a330 <open+0x13c>
  {
    alt_release_fd (index);  
    a310:	e13ff917 	ldw	r4,-28(fp)
    a314:	000a3480 	call	a348 <alt_release_fd>
    ALT_ERRNO = -status;
    a318:	000a0d80 	call	a0d8 <alt_get_errno>
    a31c:	e0fffa17 	ldw	r3,-24(fp)
    a320:	00c7c83a 	sub	r3,zero,r3
    a324:	10c00015 	stw	r3,0(r2)
    return -1;
    a328:	00bfffc4 	movi	r2,-1
    a32c:	00000106 	br	a334 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    a330:	e0bff917 	ldw	r2,-28(fp)
}
    a334:	e037883a 	mov	sp,fp
    a338:	dfc00117 	ldw	ra,4(sp)
    a33c:	df000017 	ldw	fp,0(sp)
    a340:	dec00204 	addi	sp,sp,8
    a344:	f800283a 	ret

0000a348 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a348:	defffe04 	addi	sp,sp,-8
    a34c:	df000115 	stw	fp,4(sp)
    a350:	df000104 	addi	fp,sp,4
    a354:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a358:	e0bfff17 	ldw	r2,-4(fp)
    a35c:	108000d0 	cmplti	r2,r2,3
    a360:	10000d1e 	bne	r2,zero,a398 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a364:	00c00074 	movhi	r3,1
    a368:	18eb6004 	addi	r3,r3,-21120
    a36c:	e0bfff17 	ldw	r2,-4(fp)
    a370:	10800324 	muli	r2,r2,12
    a374:	1885883a 	add	r2,r3,r2
    a378:	10800204 	addi	r2,r2,8
    a37c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a380:	00c00074 	movhi	r3,1
    a384:	18eb6004 	addi	r3,r3,-21120
    a388:	e0bfff17 	ldw	r2,-4(fp)
    a38c:	10800324 	muli	r2,r2,12
    a390:	1885883a 	add	r2,r3,r2
    a394:	10000015 	stw	zero,0(r2)
  }
}
    a398:	e037883a 	mov	sp,fp
    a39c:	df000017 	ldw	fp,0(sp)
    a3a0:	dec00104 	addi	sp,sp,4
    a3a4:	f800283a 	ret

0000a3a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a3a8:	deffff04 	addi	sp,sp,-4
    a3ac:	df000015 	stw	fp,0(sp)
    a3b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a3b4:	000170fa 	wrctl	ienable,zero
}
    a3b8:	e037883a 	mov	sp,fp
    a3bc:	df000017 	ldw	fp,0(sp)
    a3c0:	dec00104 	addi	sp,sp,4
    a3c4:	f800283a 	ret

0000a3c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a3c8:	defffa04 	addi	sp,sp,-24
    a3cc:	dfc00515 	stw	ra,20(sp)
    a3d0:	df000415 	stw	fp,16(sp)
    a3d4:	df000404 	addi	fp,sp,16
    a3d8:	e13ffe15 	stw	r4,-8(fp)
    a3dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a3e0:	e0bfff17 	ldw	r2,-4(fp)
    a3e4:	10800017 	ldw	r2,0(r2)
    a3e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a3ec:	e13ffe17 	ldw	r4,-8(fp)
    a3f0:	000a7740 	call	a774 <strlen>
    a3f4:	10800044 	addi	r2,r2,1
    a3f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a3fc:	00000d06 	br	a434 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a400:	e0bffc17 	ldw	r2,-16(fp)
    a404:	10c00217 	ldw	r3,8(r2)
    a408:	e0bffd17 	ldw	r2,-12(fp)
    a40c:	1809883a 	mov	r4,r3
    a410:	e17ffe17 	ldw	r5,-8(fp)
    a414:	100d883a 	mov	r6,r2
    a418:	000a6f80 	call	a6f8 <memcmp>
    a41c:	1000021e 	bne	r2,zero,a428 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a420:	e0bffc17 	ldw	r2,-16(fp)
    a424:	00000706 	br	a444 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a428:	e0bffc17 	ldw	r2,-16(fp)
    a42c:	10800017 	ldw	r2,0(r2)
    a430:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a434:	e0fffc17 	ldw	r3,-16(fp)
    a438:	e0bfff17 	ldw	r2,-4(fp)
    a43c:	18bff01e 	bne	r3,r2,a400 <_gp+0xffff70dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a440:	0005883a 	mov	r2,zero
}
    a444:	e037883a 	mov	sp,fp
    a448:	dfc00117 	ldw	ra,4(sp)
    a44c:	df000017 	ldw	fp,0(sp)
    a450:	dec00204 	addi	sp,sp,8
    a454:	f800283a 	ret

0000a458 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a458:	defffb04 	addi	sp,sp,-20
    a45c:	dfc00415 	stw	ra,16(sp)
    a460:	df000315 	stw	fp,12(sp)
    a464:	df000304 	addi	fp,sp,12
    a468:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a46c:	00800074 	movhi	r2,1
    a470:	10acdf04 	addi	r2,r2,-19588
    a474:	10800017 	ldw	r2,0(r2)
    a478:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a47c:	00003106 	br	a544 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    a480:	e0bffd17 	ldw	r2,-12(fp)
    a484:	10800217 	ldw	r2,8(r2)
    a488:	1009883a 	mov	r4,r2
    a48c:	000a7740 	call	a774 <strlen>
    a490:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a494:	e0bffd17 	ldw	r2,-12(fp)
    a498:	10c00217 	ldw	r3,8(r2)
    a49c:	e0bffe17 	ldw	r2,-8(fp)
    a4a0:	10bfffc4 	addi	r2,r2,-1
    a4a4:	1885883a 	add	r2,r3,r2
    a4a8:	10800003 	ldbu	r2,0(r2)
    a4ac:	10803fcc 	andi	r2,r2,255
    a4b0:	1080201c 	xori	r2,r2,128
    a4b4:	10bfe004 	addi	r2,r2,-128
    a4b8:	10800bd8 	cmpnei	r2,r2,47
    a4bc:	1000031e 	bne	r2,zero,a4cc <alt_find_file+0x74>
    {
      len -= 1;
    a4c0:	e0bffe17 	ldw	r2,-8(fp)
    a4c4:	10bfffc4 	addi	r2,r2,-1
    a4c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a4cc:	e0bffe17 	ldw	r2,-8(fp)
    a4d0:	e0ffff17 	ldw	r3,-4(fp)
    a4d4:	1885883a 	add	r2,r3,r2
    a4d8:	10800003 	ldbu	r2,0(r2)
    a4dc:	10803fcc 	andi	r2,r2,255
    a4e0:	1080201c 	xori	r2,r2,128
    a4e4:	10bfe004 	addi	r2,r2,-128
    a4e8:	10800be0 	cmpeqi	r2,r2,47
    a4ec:	1000081e 	bne	r2,zero,a510 <alt_find_file+0xb8>
    a4f0:	e0bffe17 	ldw	r2,-8(fp)
    a4f4:	e0ffff17 	ldw	r3,-4(fp)
    a4f8:	1885883a 	add	r2,r3,r2
    a4fc:	10800003 	ldbu	r2,0(r2)
    a500:	10803fcc 	andi	r2,r2,255
    a504:	1080201c 	xori	r2,r2,128
    a508:	10bfe004 	addi	r2,r2,-128
    a50c:	10000a1e 	bne	r2,zero,a538 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    a510:	e0bffd17 	ldw	r2,-12(fp)
    a514:	10c00217 	ldw	r3,8(r2)
    a518:	e0bffe17 	ldw	r2,-8(fp)
    a51c:	1809883a 	mov	r4,r3
    a520:	e17fff17 	ldw	r5,-4(fp)
    a524:	100d883a 	mov	r6,r2
    a528:	000a6f80 	call	a6f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a52c:	1000021e 	bne	r2,zero,a538 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a530:	e0bffd17 	ldw	r2,-12(fp)
    a534:	00000806 	br	a558 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    a538:	e0bffd17 	ldw	r2,-12(fp)
    a53c:	10800017 	ldw	r2,0(r2)
    a540:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a544:	e0fffd17 	ldw	r3,-12(fp)
    a548:	00800074 	movhi	r2,1
    a54c:	10acdf04 	addi	r2,r2,-19588
    a550:	18bfcb1e 	bne	r3,r2,a480 <_gp+0xffff715c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a554:	0005883a 	mov	r2,zero
}
    a558:	e037883a 	mov	sp,fp
    a55c:	dfc00117 	ldw	ra,4(sp)
    a560:	df000017 	ldw	fp,0(sp)
    a564:	dec00204 	addi	sp,sp,8
    a568:	f800283a 	ret

0000a56c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a56c:	defffc04 	addi	sp,sp,-16
    a570:	df000315 	stw	fp,12(sp)
    a574:	df000304 	addi	fp,sp,12
    a578:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a57c:	00bffa04 	movi	r2,-24
    a580:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a584:	e03ffd15 	stw	zero,-12(fp)
    a588:	00001d06 	br	a600 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    a58c:	00c00074 	movhi	r3,1
    a590:	18eb6004 	addi	r3,r3,-21120
    a594:	e0bffd17 	ldw	r2,-12(fp)
    a598:	10800324 	muli	r2,r2,12
    a59c:	1885883a 	add	r2,r3,r2
    a5a0:	10800017 	ldw	r2,0(r2)
    a5a4:	1000131e 	bne	r2,zero,a5f4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    a5a8:	00c00074 	movhi	r3,1
    a5ac:	18eb6004 	addi	r3,r3,-21120
    a5b0:	e0bffd17 	ldw	r2,-12(fp)
    a5b4:	10800324 	muli	r2,r2,12
    a5b8:	1885883a 	add	r2,r3,r2
    a5bc:	e0ffff17 	ldw	r3,-4(fp)
    a5c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a5c4:	00800074 	movhi	r2,1
    a5c8:	10ace304 	addi	r2,r2,-19572
    a5cc:	10c00017 	ldw	r3,0(r2)
    a5d0:	e0bffd17 	ldw	r2,-12(fp)
    a5d4:	1880040e 	bge	r3,r2,a5e8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    a5d8:	00800074 	movhi	r2,1
    a5dc:	10ace304 	addi	r2,r2,-19572
    a5e0:	e0fffd17 	ldw	r3,-12(fp)
    a5e4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    a5e8:	e0bffd17 	ldw	r2,-12(fp)
    a5ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a5f0:	00000606 	br	a60c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a5f4:	e0bffd17 	ldw	r2,-12(fp)
    a5f8:	10800044 	addi	r2,r2,1
    a5fc:	e0bffd15 	stw	r2,-12(fp)
    a600:	e0bffd17 	ldw	r2,-12(fp)
    a604:	10800810 	cmplti	r2,r2,32
    a608:	103fe01e 	bne	r2,zero,a58c <_gp+0xffff7268>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a60c:	e0bffe17 	ldw	r2,-8(fp)
}
    a610:	e037883a 	mov	sp,fp
    a614:	df000017 	ldw	fp,0(sp)
    a618:	dec00104 	addi	sp,sp,4
    a61c:	f800283a 	ret

0000a620 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a620:	defffb04 	addi	sp,sp,-20
    a624:	df000415 	stw	fp,16(sp)
    a628:	df000404 	addi	fp,sp,16
    a62c:	e13ffe15 	stw	r4,-8(fp)
    a630:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a634:	e0bfff17 	ldw	r2,-4(fp)
    a638:	10840070 	cmpltui	r2,r2,4097
    a63c:	1000021e 	bne	r2,zero,a648 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a640:	00840004 	movi	r2,4096
    a644:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a648:	e0fffe17 	ldw	r3,-8(fp)
    a64c:	e0bfff17 	ldw	r2,-4(fp)
    a650:	1885883a 	add	r2,r3,r2
    a654:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a658:	e0bffe17 	ldw	r2,-8(fp)
    a65c:	e0bffc15 	stw	r2,-16(fp)
    a660:	00000506 	br	a678 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a664:	e0bffc17 	ldw	r2,-16(fp)
    a668:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a66c:	e0bffc17 	ldw	r2,-16(fp)
    a670:	10800804 	addi	r2,r2,32
    a674:	e0bffc15 	stw	r2,-16(fp)
    a678:	e0fffc17 	ldw	r3,-16(fp)
    a67c:	e0bffd17 	ldw	r2,-12(fp)
    a680:	18bff836 	bltu	r3,r2,a664 <_gp+0xffff7340>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a684:	e0bffe17 	ldw	r2,-8(fp)
    a688:	108007cc 	andi	r2,r2,31
    a68c:	10000226 	beq	r2,zero,a698 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a690:	e0bffc17 	ldw	r2,-16(fp)
    a694:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a698:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a69c:	e037883a 	mov	sp,fp
    a6a0:	df000017 	ldw	fp,0(sp)
    a6a4:	dec00104 	addi	sp,sp,4
    a6a8:	f800283a 	ret

0000a6ac <atexit>:
    a6ac:	200b883a 	mov	r5,r4
    a6b0:	000d883a 	mov	r6,zero
    a6b4:	0009883a 	mov	r4,zero
    a6b8:	000f883a 	mov	r7,zero
    a6bc:	000a8001 	jmpi	a800 <__register_exitproc>

0000a6c0 <exit>:
    a6c0:	defffe04 	addi	sp,sp,-8
    a6c4:	000b883a 	mov	r5,zero
    a6c8:	dc000015 	stw	r16,0(sp)
    a6cc:	dfc00115 	stw	ra,4(sp)
    a6d0:	2021883a 	mov	r16,r4
    a6d4:	000a91c0 	call	a91c <__call_exitprocs>
    a6d8:	00800074 	movhi	r2,1
    a6dc:	10ace504 	addi	r2,r2,-19564
    a6e0:	11000017 	ldw	r4,0(r2)
    a6e4:	20800f17 	ldw	r2,60(r4)
    a6e8:	10000126 	beq	r2,zero,a6f0 <exit+0x30>
    a6ec:	103ee83a 	callr	r2
    a6f0:	8009883a 	mov	r4,r16
    a6f4:	000aac00 	call	aac0 <_exit>

0000a6f8 <memcmp>:
    a6f8:	01c000c4 	movi	r7,3
    a6fc:	3980192e 	bgeu	r7,r6,a764 <memcmp+0x6c>
    a700:	2144b03a 	or	r2,r4,r5
    a704:	11c4703a 	and	r2,r2,r7
    a708:	10000f26 	beq	r2,zero,a748 <memcmp+0x50>
    a70c:	21c00003 	ldbu	r7,0(r4)
    a710:	28800003 	ldbu	r2,0(r5)
    a714:	3880151e 	bne	r7,r2,a76c <memcmp+0x74>
    a718:	30ffff84 	addi	r3,r6,-2
    a71c:	01bfffc4 	movi	r6,-1
    a720:	00000406 	br	a734 <memcmp+0x3c>
    a724:	21c00003 	ldbu	r7,0(r4)
    a728:	28800003 	ldbu	r2,0(r5)
    a72c:	18ffffc4 	addi	r3,r3,-1
    a730:	38800e1e 	bne	r7,r2,a76c <memcmp+0x74>
    a734:	21000044 	addi	r4,r4,1
    a738:	29400044 	addi	r5,r5,1
    a73c:	19bff91e 	bne	r3,r6,a724 <_gp+0xffff7400>
    a740:	0005883a 	mov	r2,zero
    a744:	f800283a 	ret
    a748:	20c00017 	ldw	r3,0(r4)
    a74c:	28800017 	ldw	r2,0(r5)
    a750:	1880041e 	bne	r3,r2,a764 <memcmp+0x6c>
    a754:	31bfff04 	addi	r6,r6,-4
    a758:	21000104 	addi	r4,r4,4
    a75c:	29400104 	addi	r5,r5,4
    a760:	39bff936 	bltu	r7,r6,a748 <_gp+0xffff7424>
    a764:	303fe91e 	bne	r6,zero,a70c <_gp+0xffff73e8>
    a768:	003ff506 	br	a740 <_gp+0xffff741c>
    a76c:	3885c83a 	sub	r2,r7,r2
    a770:	f800283a 	ret

0000a774 <strlen>:
    a774:	208000cc 	andi	r2,r4,3
    a778:	10001d26 	beq	r2,zero,a7f0 <strlen+0x7c>
    a77c:	20800007 	ldb	r2,0(r4)
    a780:	10001d26 	beq	r2,zero,a7f8 <strlen+0x84>
    a784:	2005883a 	mov	r2,r4
    a788:	00000206 	br	a794 <strlen+0x20>
    a78c:	10c00007 	ldb	r3,0(r2)
    a790:	18001526 	beq	r3,zero,a7e8 <strlen+0x74>
    a794:	10800044 	addi	r2,r2,1
    a798:	10c000cc 	andi	r3,r2,3
    a79c:	183ffb1e 	bne	r3,zero,a78c <_gp+0xffff7468>
    a7a0:	10c00017 	ldw	r3,0(r2)
    a7a4:	01ffbff4 	movhi	r7,65279
    a7a8:	39ffbfc4 	addi	r7,r7,-257
    a7ac:	01a02074 	movhi	r6,32897
    a7b0:	31a02004 	addi	r6,r6,-32640
    a7b4:	00000206 	br	a7c0 <strlen+0x4c>
    a7b8:	10800104 	addi	r2,r2,4
    a7bc:	10c00017 	ldw	r3,0(r2)
    a7c0:	19cb883a 	add	r5,r3,r7
    a7c4:	00c6303a 	nor	r3,zero,r3
    a7c8:	28c6703a 	and	r3,r5,r3
    a7cc:	1986703a 	and	r3,r3,r6
    a7d0:	183ff926 	beq	r3,zero,a7b8 <_gp+0xffff7494>
    a7d4:	10c00007 	ldb	r3,0(r2)
    a7d8:	18000326 	beq	r3,zero,a7e8 <strlen+0x74>
    a7dc:	10800044 	addi	r2,r2,1
    a7e0:	10c00007 	ldb	r3,0(r2)
    a7e4:	183ffd1e 	bne	r3,zero,a7dc <_gp+0xffff74b8>
    a7e8:	1105c83a 	sub	r2,r2,r4
    a7ec:	f800283a 	ret
    a7f0:	2005883a 	mov	r2,r4
    a7f4:	003fea06 	br	a7a0 <_gp+0xffff747c>
    a7f8:	0005883a 	mov	r2,zero
    a7fc:	f800283a 	ret

0000a800 <__register_exitproc>:
    a800:	defffa04 	addi	sp,sp,-24
    a804:	00800074 	movhi	r2,1
    a808:	10ace504 	addi	r2,r2,-19564
    a80c:	dc000315 	stw	r16,12(sp)
    a810:	14000017 	ldw	r16,0(r2)
    a814:	dc400415 	stw	r17,16(sp)
    a818:	dfc00515 	stw	ra,20(sp)
    a81c:	80805217 	ldw	r2,328(r16)
    a820:	2023883a 	mov	r17,r4
    a824:	10003a26 	beq	r2,zero,a910 <__register_exitproc+0x110>
    a828:	10c00117 	ldw	r3,4(r2)
    a82c:	020007c4 	movi	r8,31
    a830:	40c0190e 	bge	r8,r3,a898 <__register_exitproc+0x98>
    a834:	00800034 	movhi	r2,0
    a838:	10800004 	addi	r2,r2,0
    a83c:	1000061e 	bne	r2,zero,a858 <__register_exitproc+0x58>
    a840:	00bfffc4 	movi	r2,-1
    a844:	dfc00517 	ldw	ra,20(sp)
    a848:	dc400417 	ldw	r17,16(sp)
    a84c:	dc000317 	ldw	r16,12(sp)
    a850:	dec00604 	addi	sp,sp,24
    a854:	f800283a 	ret
    a858:	01006404 	movi	r4,400
    a85c:	d9400015 	stw	r5,0(sp)
    a860:	d9800115 	stw	r6,4(sp)
    a864:	d9c00215 	stw	r7,8(sp)
    a868:	00000000 	call	0 <__reset-0x8000>
    a86c:	d9400017 	ldw	r5,0(sp)
    a870:	d9800117 	ldw	r6,4(sp)
    a874:	d9c00217 	ldw	r7,8(sp)
    a878:	103ff126 	beq	r2,zero,a840 <_gp+0xffff751c>
    a87c:	81005217 	ldw	r4,328(r16)
    a880:	10000115 	stw	zero,4(r2)
    a884:	0007883a 	mov	r3,zero
    a888:	11000015 	stw	r4,0(r2)
    a88c:	80805215 	stw	r2,328(r16)
    a890:	10006215 	stw	zero,392(r2)
    a894:	10006315 	stw	zero,396(r2)
    a898:	88000d1e 	bne	r17,zero,a8d0 <__register_exitproc+0xd0>
    a89c:	19000084 	addi	r4,r3,2
    a8a0:	2109883a 	add	r4,r4,r4
    a8a4:	18c00044 	addi	r3,r3,1
    a8a8:	2109883a 	add	r4,r4,r4
    a8ac:	10c00115 	stw	r3,4(r2)
    a8b0:	1105883a 	add	r2,r2,r4
    a8b4:	11400015 	stw	r5,0(r2)
    a8b8:	0005883a 	mov	r2,zero
    a8bc:	dfc00517 	ldw	ra,20(sp)
    a8c0:	dc400417 	ldw	r17,16(sp)
    a8c4:	dc000317 	ldw	r16,12(sp)
    a8c8:	dec00604 	addi	sp,sp,24
    a8cc:	f800283a 	ret
    a8d0:	18c9883a 	add	r4,r3,r3
    a8d4:	2109883a 	add	r4,r4,r4
    a8d8:	1109883a 	add	r4,r2,r4
    a8dc:	21802215 	stw	r6,136(r4)
    a8e0:	01800044 	movi	r6,1
    a8e4:	12006217 	ldw	r8,392(r2)
    a8e8:	30cc983a 	sll	r6,r6,r3
    a8ec:	4190b03a 	or	r8,r8,r6
    a8f0:	12006215 	stw	r8,392(r2)
    a8f4:	21c04215 	stw	r7,264(r4)
    a8f8:	01000084 	movi	r4,2
    a8fc:	893fe71e 	bne	r17,r4,a89c <_gp+0xffff7578>
    a900:	11006317 	ldw	r4,396(r2)
    a904:	218cb03a 	or	r6,r4,r6
    a908:	11806315 	stw	r6,396(r2)
    a90c:	003fe306 	br	a89c <_gp+0xffff7578>
    a910:	80805304 	addi	r2,r16,332
    a914:	80805215 	stw	r2,328(r16)
    a918:	003fc306 	br	a828 <_gp+0xffff7504>

0000a91c <__call_exitprocs>:
    a91c:	00800074 	movhi	r2,1
    a920:	10ace504 	addi	r2,r2,-19564
    a924:	10800017 	ldw	r2,0(r2)
    a928:	defff304 	addi	sp,sp,-52
    a92c:	df000b15 	stw	fp,44(sp)
    a930:	d8800015 	stw	r2,0(sp)
    a934:	10805204 	addi	r2,r2,328
    a938:	dd400815 	stw	r21,32(sp)
    a93c:	dfc00c15 	stw	ra,48(sp)
    a940:	ddc00a15 	stw	r23,40(sp)
    a944:	dd800915 	stw	r22,36(sp)
    a948:	dd000715 	stw	r20,28(sp)
    a94c:	dcc00615 	stw	r19,24(sp)
    a950:	dc800515 	stw	r18,20(sp)
    a954:	dc400415 	stw	r17,16(sp)
    a958:	dc000315 	stw	r16,12(sp)
    a95c:	d9000115 	stw	r4,4(sp)
    a960:	2839883a 	mov	fp,r5
    a964:	d8800215 	stw	r2,8(sp)
    a968:	057fffc4 	movi	r21,-1
    a96c:	d8800017 	ldw	r2,0(sp)
    a970:	14805217 	ldw	r18,328(r2)
    a974:	90001826 	beq	r18,zero,a9d8 <__call_exitprocs+0xbc>
    a978:	ddc00217 	ldw	r23,8(sp)
    a97c:	90c00117 	ldw	r3,4(r18)
    a980:	1c3fffc4 	addi	r16,r3,-1
    a984:	80001116 	blt	r16,zero,a9cc <__call_exitprocs+0xb0>
    a988:	18c00044 	addi	r3,r3,1
    a98c:	8427883a 	add	r19,r16,r16
    a990:	18c7883a 	add	r3,r3,r3
    a994:	95802204 	addi	r22,r18,136
    a998:	9ce7883a 	add	r19,r19,r19
    a99c:	18c7883a 	add	r3,r3,r3
    a9a0:	b4e7883a 	add	r19,r22,r19
    a9a4:	90e3883a 	add	r17,r18,r3
    a9a8:	e0001726 	beq	fp,zero,aa08 <__call_exitprocs+0xec>
    a9ac:	8c87c83a 	sub	r3,r17,r18
    a9b0:	b0c7883a 	add	r3,r22,r3
    a9b4:	18c01e17 	ldw	r3,120(r3)
    a9b8:	1f001326 	beq	r3,fp,aa08 <__call_exitprocs+0xec>
    a9bc:	843fffc4 	addi	r16,r16,-1
    a9c0:	9cffff04 	addi	r19,r19,-4
    a9c4:	8c7fff04 	addi	r17,r17,-4
    a9c8:	857ff71e 	bne	r16,r21,a9a8 <_gp+0xffff7684>
    a9cc:	00800034 	movhi	r2,0
    a9d0:	10800004 	addi	r2,r2,0
    a9d4:	10002a1e 	bne	r2,zero,aa80 <__call_exitprocs+0x164>
    a9d8:	dfc00c17 	ldw	ra,48(sp)
    a9dc:	df000b17 	ldw	fp,44(sp)
    a9e0:	ddc00a17 	ldw	r23,40(sp)
    a9e4:	dd800917 	ldw	r22,36(sp)
    a9e8:	dd400817 	ldw	r21,32(sp)
    a9ec:	dd000717 	ldw	r20,28(sp)
    a9f0:	dcc00617 	ldw	r19,24(sp)
    a9f4:	dc800517 	ldw	r18,20(sp)
    a9f8:	dc400417 	ldw	r17,16(sp)
    a9fc:	dc000317 	ldw	r16,12(sp)
    aa00:	dec00d04 	addi	sp,sp,52
    aa04:	f800283a 	ret
    aa08:	91000117 	ldw	r4,4(r18)
    aa0c:	88c00017 	ldw	r3,0(r17)
    aa10:	213fffc4 	addi	r4,r4,-1
    aa14:	24001526 	beq	r4,r16,aa6c <__call_exitprocs+0x150>
    aa18:	88000015 	stw	zero,0(r17)
    aa1c:	183fe726 	beq	r3,zero,a9bc <_gp+0xffff7698>
    aa20:	00800044 	movi	r2,1
    aa24:	1408983a 	sll	r4,r2,r16
    aa28:	91406217 	ldw	r5,392(r18)
    aa2c:	95000117 	ldw	r20,4(r18)
    aa30:	214a703a 	and	r5,r4,r5
    aa34:	28000b26 	beq	r5,zero,aa64 <__call_exitprocs+0x148>
    aa38:	91406317 	ldw	r5,396(r18)
    aa3c:	2148703a 	and	r4,r4,r5
    aa40:	20000c1e 	bne	r4,zero,aa74 <__call_exitprocs+0x158>
    aa44:	99400017 	ldw	r5,0(r19)
    aa48:	d9000117 	ldw	r4,4(sp)
    aa4c:	183ee83a 	callr	r3
    aa50:	90c00117 	ldw	r3,4(r18)
    aa54:	1d3fc51e 	bne	r3,r20,a96c <_gp+0xffff7648>
    aa58:	b8c00017 	ldw	r3,0(r23)
    aa5c:	1cbfd726 	beq	r3,r18,a9bc <_gp+0xffff7698>
    aa60:	003fc206 	br	a96c <_gp+0xffff7648>
    aa64:	183ee83a 	callr	r3
    aa68:	003ff906 	br	aa50 <_gp+0xffff772c>
    aa6c:	94000115 	stw	r16,4(r18)
    aa70:	003fea06 	br	aa1c <_gp+0xffff76f8>
    aa74:	99000017 	ldw	r4,0(r19)
    aa78:	183ee83a 	callr	r3
    aa7c:	003ff406 	br	aa50 <_gp+0xffff772c>
    aa80:	90c00117 	ldw	r3,4(r18)
    aa84:	1800081e 	bne	r3,zero,aaa8 <__call_exitprocs+0x18c>
    aa88:	90c00017 	ldw	r3,0(r18)
    aa8c:	18000a26 	beq	r3,zero,aab8 <__call_exitprocs+0x19c>
    aa90:	9009883a 	mov	r4,r18
    aa94:	b8c00015 	stw	r3,0(r23)
    aa98:	00000000 	call	0 <__reset-0x8000>
    aa9c:	bc800017 	ldw	r18,0(r23)
    aaa0:	903fb61e 	bne	r18,zero,a97c <_gp+0xffff7658>
    aaa4:	003fcc06 	br	a9d8 <_gp+0xffff76b4>
    aaa8:	90c00017 	ldw	r3,0(r18)
    aaac:	902f883a 	mov	r23,r18
    aab0:	1825883a 	mov	r18,r3
    aab4:	003ffa06 	br	aaa0 <_gp+0xffff777c>
    aab8:	0007883a 	mov	r3,zero
    aabc:	003ffb06 	br	aaac <_gp+0xffff7788>

0000aac0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    aac0:	defffd04 	addi	sp,sp,-12
    aac4:	df000215 	stw	fp,8(sp)
    aac8:	df000204 	addi	fp,sp,8
    aacc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    aad0:	0001883a 	nop
    aad4:	e0bfff17 	ldw	r2,-4(fp)
    aad8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    aadc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    aae0:	10000226 	beq	r2,zero,aaec <_exit+0x2c>
    ALT_SIM_FAIL();
    aae4:	002af070 	cmpltui	zero,zero,43969
    aae8:	00000106 	br	aaf0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    aaec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    aaf0:	003fff06 	br	aaf0 <_gp+0xffff77cc>
