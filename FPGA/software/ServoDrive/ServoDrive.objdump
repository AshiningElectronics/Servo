
ServoDrive.elf:     file format elf32-littlenios2
ServoDrive.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00003d18 memsz 0x00003d18 flags r-x
    LOAD off    0x00004d38 vaddr 0x00013d38 paddr 0x00014370 align 2**12
         filesz 0x00000638 memsz 0x00000638 flags rw-
    LOAD off    0x000059a8 vaddr 0x000149a8 paddr 0x000149a8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00005370  2**0
                  CONTENTS
  2 .text         00003be0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  00013c00  00013c00  00004c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000638  00013d38  00014370  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000149a8  000149a8  000059a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000149b8  000149b8  00005370  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005e8  00000000  00000000  000053b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000781e  00000000  00000000  00005998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029e1  00000000  00000000  0000d1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c40  00000000  00000000  0000fb97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ac0  00000000  00000000  000127d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001889  00000000  00000000  00013298  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000411a  00000000  00000000  00014b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00018c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000728  00000000  00000000  00018c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ada6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001ada9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001adb5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001adb6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001adb7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001adbb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001adbf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001adc3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001adce  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001add9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  0001ade4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  0001adeb  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00078665  00000000  00000000  0001ae0e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00013c00 l    d  .rodata	00000000 .rodata
00013d38 l    d  .rwdata	00000000 .rwdata
000149a8 l    d  .bss	00000000 .bss
000149b8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ServoDrive_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Servo.c
00014330 l     O .rwdata	00000004 tFallFET
00014334 l     O .rwdata	00000004 tFallDriver
00014338 l     O .rwdata	00000004 tDelayMatchDriver
0001433c l     O .rwdata	00000004 tSafety
00014340 l     O .rwdata	00000004 deadtimeint
00014344 l     O .rwdata	00000004 PWMHalfPeriod
00014348 l     O .rwdata	00000004 two_by_sqrt3.2310
0001434c l     O .rwdata	00000004 one_by_sqrt3.2309
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
000126b0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001283c l     F .text	00000038 alt_dev_reg
00013d38 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00012c68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012da4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012dd0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012f94 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000130ec l     F .text	00000050 alt_get_errno
0001313c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00013f0c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00013ab8 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00012794 g     F .text	00000078 alt_main
00014370 g       *ABS*	00000000 __flash_rwdata_start
0001005c g     F .text	000007cc SVM
00011970 g     F .text	00000070 .hidden __fixsfsi
0001340c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000149b4 g     O .bss	00000004 errno
000149ac g     O .bss	00000004 alt_argv
0001c330 g       *ABS*	00000000 _gp
0001280c g     F .text	00000030 usleep
000114a8 g     F .text	000004c8 .hidden __subsf3
00013d8c g     O .rwdata	00000180 alt_fd_list
0001342c g     F .text	00000090 alt_find_dev
00012350 g     F .text	000000d0 .hidden __floatsidf
00013074 g     F .text	00000078 alt_io_redirect
00013c00 g       *ABS*	00000000 __DTOR_END__
0001299c g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00013bbc g     F .text	00000008 .hidden __udivsi3
00014360 g     O .rwdata	00000004 alt_max_fd
00014368 g     O .rwdata	00000004 _global_impure_ptr
000149b8 g       *ABS*	00000000 __bss_end
00013d64 g     O .rwdata	00000028 alt_dev_null
00012d88 g     F .text	0000001c alt_dcache_flush_all
00014370 g       *ABS*	00000000 __ram_rwdata_end
00014358 g     O .rwdata	00000008 alt_dev_list
00010f98 g     F .text	000000b4 .hidden __gtsf2
00013d38 g       *ABS*	00000000 __ram_rodata_end
00013bc4 g     F .text	00000008 .hidden __umodsi3
000149b8 g       *ABS*	00000000 end
00013c00 g       *ABS*	00000000 __CTOR_LIST__
00016000 g       *ABS*	00000000 __alt_stack_pointer
000125dc g     F .text	000000ac .hidden __clzsi2
00012a80 g     F .text	00000094 altera_avalon_jtag_uart_write
00013914 g     F .text	000001a4 __call_exitprocs
00010020 g     F .text	0000003c _start
000128a8 g     F .text	00000034 alt_sys_init
000119e0 g     F .text	00000170 .hidden __floatsisf
000137f8 g     F .text	0000011c __register_exitproc
00012688 g     F .text	00000028 .hidden __mulsi3
00013d38 g       *ABS*	00000000 __ram_rwdata_start
00013c00 g       *ABS*	00000000 __ram_rodata_start
000128dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000135d0 g     F .text	000000d4 alt_get_fd
00012b14 g     F .text	00000154 alt_busy_sleep
000136f0 g     F .text	0000007c memcmp
000149b8 g       *ABS*	00000000 __alt_stack_base
00011b50 g     F .text	00000800 .hidden __muldf3
000134bc g     F .text	00000114 alt_find_file
00012e20 g     F .text	000000a0 alt_dev_llist_insert
000149a8 g       *ABS*	00000000 __bss_start
00010828 g     F .text	00000248 main
000149b0 g     O .bss	00000004 alt_envp
0001293c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012420 g     F .text	000001bc .hidden __truncdfsf2
00014364 g     O .rwdata	00000004 alt_errno
00013b28 g     F .text	00000048 .hidden __divsi3
00013c00 g       *ABS*	00000000 __CTOR_END__
0001104c g     F .text	0000045c .hidden __mulsf3
00013c00 g       *ABS*	00000000 __flash_rodata_start
00013c00 g       *ABS*	00000000 __DTOR_LIST__
00012874 g     F .text	00000034 alt_irq_init
0001338c g     F .text	00000080 alt_release_fd
00013c00 g     O .rodata	00000100 .hidden __clz_tab
000136a4 g     F .text	00000014 atexit
00010f98 g     F .text	000000b4 .hidden __gesf2
0001436c g     O .rwdata	00000004 _impure_ptr
000149a8 g     O .bss	00000004 alt_argc
00012f1c g     F .text	0000005c _do_dtors
00014350 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014370 g       *ABS*	00000000 _edata
000149b8 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000136b8 g     F .text	00000038 exit
00013b70 g     F .text	0000004c .hidden __modsi3
00016000 g       *ABS*	00000000 __alt_data_end
00010a70 g     F .text	00000070 .hidden __fixunssfsi
00013bcc g     F .text	00000034 _exit
0001376c g     F .text	0000008c strlen
00013230 g     F .text	0000015c open
00012f78 g     F .text	0000001c alt_icache_flush_all
00012ec0 g     F .text	0000005c _do_ctors
00012cb8 g     F .text	000000d0 close
00010ae0 g     F .text	000004b8 .hidden __addsf3
00012714 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	ded80014 	ori	sp,sp,24576
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6b0cc14 	ori	gp,gp,49968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10926a14 	ori	r2,r2,18856

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18d26e14 	ori	r3,r3,18872

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xffff3d14>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00127140 	call	12714 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00127940 	call	12794 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xffff3d28>

0001005c <SVM>:
static const int deadtimeint = (float)ALT_CPU_CPU_FREQ * deadtime_ns * 1e-9f;

static const int PWMHalfPeriod = ALT_CPU_CPU_FREQ/16000;

// Magnitude must not be larger than sqrt(3)/2, or 0.866
void SVM(float alpha, float beta, uint32_t* tAout, uint32_t* tBout, uint32_t* tCout){
   1005c:	deffe904 	addi	sp,sp,-92
   10060:	dfc01615 	stw	ra,88(sp)
   10064:	df001515 	stw	fp,84(sp)
   10068:	dc001415 	stw	r16,80(sp)
   1006c:	df001504 	addi	fp,sp,84
   10070:	e13ffb15 	stw	r4,-20(fp)
   10074:	e17ffc15 	stw	r5,-16(fp)
   10078:	e1bffd15 	stw	r6,-12(fp)
   1007c:	e1fffe15 	stw	r7,-8(fp)
	static const float one_by_sqrt3 = 0.57735026919f;
	static const float two_by_sqrt3 = 1.15470053838f;

	uint32_t Sextant;

	if (beta >= 0.0f)
   10080:	e13ffc17 	ldw	r4,-16(fp)
   10084:	000b883a 	mov	r5,zero
   10088:	0010f980 	call	10f98 <__gesf2>
   1008c:	10002716 	blt	r2,zero,1012c <SVM+0xd0>
	{
		if (alpha >= 0.0f)
   10090:	e13ffb17 	ldw	r4,-20(fp)
   10094:	000b883a 	mov	r5,zero
   10098:	0010f980 	call	10f98 <__gesf2>
   1009c:	10001116 	blt	r2,zero,100e4 <SVM+0x88>
		{
			//quadrant I
			if (one_by_sqrt3 * beta > alpha)
   100a0:	008fc534 	movhi	r2,16148
   100a4:	10b34e84 	addi	r2,r2,-12998
   100a8:	1009883a 	mov	r4,r2
   100ac:	e17ffc17 	ldw	r5,-16(fp)
   100b0:	001104c0 	call	1104c <__mulsf3>
   100b4:	1007883a 	mov	r3,r2
   100b8:	1805883a 	mov	r2,r3
   100bc:	1009883a 	mov	r4,r2
   100c0:	e17ffb17 	ldw	r5,-20(fp)
   100c4:	0010f980 	call	10f98 <__gesf2>
   100c8:	0080030e 	bge	zero,r2,100d8 <SVM+0x7c>
				Sextant = 2;
   100cc:	00800084 	movi	r2,2
   100d0:	e0bfeb15 	stw	r2,-84(fp)
   100d4:	00003b06 	br	101c4 <SVM+0x168>
			else
				Sextant = 1;
   100d8:	00800044 	movi	r2,1
   100dc:	e0bfeb15 	stw	r2,-84(fp)
   100e0:	00003806 	br	101c4 <SVM+0x168>

		} else {
			//quadrant II
			if (-one_by_sqrt3 * beta > alpha)
   100e4:	008fc534 	movhi	r2,16148
   100e8:	10b34e84 	addi	r2,r2,-12998
   100ec:	10a0003c 	xorhi	r2,r2,32768
   100f0:	1009883a 	mov	r4,r2
   100f4:	e17ffc17 	ldw	r5,-16(fp)
   100f8:	001104c0 	call	1104c <__mulsf3>
   100fc:	1007883a 	mov	r3,r2
   10100:	1805883a 	mov	r2,r3
   10104:	1009883a 	mov	r4,r2
   10108:	e17ffb17 	ldw	r5,-20(fp)
   1010c:	0010f980 	call	10f98 <__gesf2>
   10110:	0080030e 	bge	zero,r2,10120 <SVM+0xc4>
				Sextant = 3;
   10114:	008000c4 	movi	r2,3
   10118:	e0bfeb15 	stw	r2,-84(fp)
   1011c:	00002906 	br	101c4 <SVM+0x168>
			else
				Sextant = 2;
   10120:	00800084 	movi	r2,2
   10124:	e0bfeb15 	stw	r2,-84(fp)
   10128:	00002606 	br	101c4 <SVM+0x168>
		}
	} else {
		if (alpha >= 0.0f)
   1012c:	e13ffb17 	ldw	r4,-20(fp)
   10130:	000b883a 	mov	r5,zero
   10134:	0010f980 	call	10f98 <__gesf2>
   10138:	10001216 	blt	r2,zero,10184 <SVM+0x128>
		{
			//quadrant IV
			if (-one_by_sqrt3 * beta > alpha)
   1013c:	008fc534 	movhi	r2,16148
   10140:	10b34e84 	addi	r2,r2,-12998
   10144:	10a0003c 	xorhi	r2,r2,32768
   10148:	1009883a 	mov	r4,r2
   1014c:	e17ffc17 	ldw	r5,-16(fp)
   10150:	001104c0 	call	1104c <__mulsf3>
   10154:	1007883a 	mov	r3,r2
   10158:	1805883a 	mov	r2,r3
   1015c:	1009883a 	mov	r4,r2
   10160:	e17ffb17 	ldw	r5,-20(fp)
   10164:	0010f980 	call	10f98 <__gesf2>
   10168:	0080030e 	bge	zero,r2,10178 <SVM+0x11c>
				Sextant = 5;
   1016c:	00800144 	movi	r2,5
   10170:	e0bfeb15 	stw	r2,-84(fp)
   10174:	00001306 	br	101c4 <SVM+0x168>
			else
				Sextant = 6;
   10178:	00800184 	movi	r2,6
   1017c:	e0bfeb15 	stw	r2,-84(fp)
   10180:	00001006 	br	101c4 <SVM+0x168>
		} else {
			//quadrant III
			if (one_by_sqrt3 * beta > alpha)
   10184:	008fc534 	movhi	r2,16148
   10188:	10b34e84 	addi	r2,r2,-12998
   1018c:	1009883a 	mov	r4,r2
   10190:	e17ffc17 	ldw	r5,-16(fp)
   10194:	001104c0 	call	1104c <__mulsf3>
   10198:	1007883a 	mov	r3,r2
   1019c:	1805883a 	mov	r2,r3
   101a0:	1009883a 	mov	r4,r2
   101a4:	e17ffb17 	ldw	r5,-20(fp)
   101a8:	0010f980 	call	10f98 <__gesf2>
   101ac:	0080030e 	bge	zero,r2,101bc <SVM+0x160>
				Sextant = 4;
   101b0:	00800104 	movi	r2,4
   101b4:	e0bfeb15 	stw	r2,-84(fp)
   101b8:	00000206 	br	101c4 <SVM+0x168>
			else
				Sextant = 5;
   101bc:	00800144 	movi	r2,5
   101c0:	e0bfeb15 	stw	r2,-84(fp)
	}

	// PWM timings
	uint32_t tA, tB, tC;

	switch (Sextant) {
   101c4:	e0bfeb17 	ldw	r2,-84(fp)
   101c8:	108001e8 	cmpgeui	r2,r2,7
   101cc:	1001871e 	bne	r2,zero,107ec <SVM+0x790>
   101d0:	e0bfeb17 	ldw	r2,-84(fp)
   101d4:	1085883a 	add	r2,r2,r2
   101d8:	1087883a 	add	r3,r2,r2
   101dc:	00800074 	movhi	r2,1
   101e0:	10807c04 	addi	r2,r2,496
   101e4:	1885883a 	add	r2,r3,r2
   101e8:	10800017 	ldw	r2,0(r2)
   101ec:	1000683a 	jmp	r2
   101f0:	000107ec 	andhi	zero,zero,1055
   101f4:	0001020c 	andi	zero,zero,1032
   101f8:	000102fc 	xorhi	zero,zero,1035
   101fc:	00010400 	call	1040 <__reset-0xefc0>
   10200:	000104f8 	rdprs	zero,zero,1043
   10204:	000105ec 	andhi	zero,zero,1047
   10208:	000106f8 	rdprs	zero,zero,1051

		// sextant 1-2
		case 1:
		{
			// Vector on-times
			uint32_t t1 = (alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
   1020c:	008fc534 	movhi	r2,16148
   10210:	10b34e84 	addi	r2,r2,-12998
   10214:	1009883a 	mov	r4,r2
   10218:	e17ffc17 	ldw	r5,-16(fp)
   1021c:	001104c0 	call	1104c <__mulsf3>
   10220:	1007883a 	mov	r3,r2
   10224:	1805883a 	mov	r2,r3
   10228:	e13ffb17 	ldw	r4,-20(fp)
   1022c:	100b883a 	mov	r5,r2
   10230:	00114a80 	call	114a8 <__subsf3>
   10234:	1007883a 	mov	r3,r2
   10238:	1821883a 	mov	r16,r3
   1023c:	00871484 	movi	r2,7250
   10240:	1009883a 	mov	r4,r2
   10244:	00119e00 	call	119e0 <__floatsisf>
   10248:	1007883a 	mov	r3,r2
   1024c:	8009883a 	mov	r4,r16
   10250:	180b883a 	mov	r5,r3
   10254:	001104c0 	call	1104c <__mulsf3>
   10258:	1007883a 	mov	r3,r2
   1025c:	1805883a 	mov	r2,r3
   10260:	1009883a 	mov	r4,r2
   10264:	0010a700 	call	10a70 <__fixunssfsi>
   10268:	e0bfef15 	stw	r2,-68(fp)
			uint32_t t2 = (two_by_sqrt3 * beta) * PWMHalfPeriod;
   1026c:	008fe534 	movhi	r2,16276
   10270:	10b34e84 	addi	r2,r2,-12998
   10274:	1009883a 	mov	r4,r2
   10278:	e17ffc17 	ldw	r5,-16(fp)
   1027c:	001104c0 	call	1104c <__mulsf3>
   10280:	1007883a 	mov	r3,r2
   10284:	1821883a 	mov	r16,r3
   10288:	00871484 	movi	r2,7250
   1028c:	1009883a 	mov	r4,r2
   10290:	00119e00 	call	119e0 <__floatsisf>
   10294:	1007883a 	mov	r3,r2
   10298:	8009883a 	mov	r4,r16
   1029c:	180b883a 	mov	r5,r3
   102a0:	001104c0 	call	1104c <__mulsf3>
   102a4:	1007883a 	mov	r3,r2
   102a8:	1805883a 	mov	r2,r3
   102ac:	1009883a 	mov	r4,r2
   102b0:	0010a700 	call	10a70 <__fixunssfsi>
   102b4:	e0bff015 	stw	r2,-64(fp)

			// PWM timings
			tA = (PWMHalfPeriod - t1 - t2) / 2;
   102b8:	00871484 	movi	r2,7250
   102bc:	1007883a 	mov	r3,r2
   102c0:	e0bfef17 	ldw	r2,-68(fp)
   102c4:	1887c83a 	sub	r3,r3,r2
   102c8:	e0bff017 	ldw	r2,-64(fp)
   102cc:	1885c83a 	sub	r2,r3,r2
   102d0:	1004d07a 	srli	r2,r2,1
   102d4:	e0bfec15 	stw	r2,-80(fp)
			tB = tA + t1;
   102d8:	e0ffec17 	ldw	r3,-80(fp)
   102dc:	e0bfef17 	ldw	r2,-68(fp)
   102e0:	1885883a 	add	r2,r3,r2
   102e4:	e0bfed15 	stw	r2,-76(fp)
			tC = tB + t2;
   102e8:	e0ffed17 	ldw	r3,-76(fp)
   102ec:	e0bff017 	ldw	r2,-64(fp)
   102f0:	1885883a 	add	r2,r3,r2
   102f4:	e0bfee15 	stw	r2,-72(fp)

			break;
   102f8:	00013c06 	br	107ec <SVM+0x790>

		// sextant 2-3
		case 2:
		{
			// Vector on-times
			uint32_t t2 = (alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
   102fc:	008fc534 	movhi	r2,16148
   10300:	10b34e84 	addi	r2,r2,-12998
   10304:	1009883a 	mov	r4,r2
   10308:	e17ffc17 	ldw	r5,-16(fp)
   1030c:	001104c0 	call	1104c <__mulsf3>
   10310:	1007883a 	mov	r3,r2
   10314:	1805883a 	mov	r2,r3
   10318:	1009883a 	mov	r4,r2
   1031c:	e17ffb17 	ldw	r5,-20(fp)
   10320:	0010ae00 	call	10ae0 <__addsf3>
   10324:	1007883a 	mov	r3,r2
   10328:	1821883a 	mov	r16,r3
   1032c:	00871484 	movi	r2,7250
   10330:	1009883a 	mov	r4,r2
   10334:	00119e00 	call	119e0 <__floatsisf>
   10338:	1007883a 	mov	r3,r2
   1033c:	8009883a 	mov	r4,r16
   10340:	180b883a 	mov	r5,r3
   10344:	001104c0 	call	1104c <__mulsf3>
   10348:	1007883a 	mov	r3,r2
   1034c:	1805883a 	mov	r2,r3
   10350:	1009883a 	mov	r4,r2
   10354:	0010a700 	call	10a70 <__fixunssfsi>
   10358:	e0bff115 	stw	r2,-60(fp)
			uint32_t t3 = (-alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
   1035c:	008fc534 	movhi	r2,16148
   10360:	10b34e84 	addi	r2,r2,-12998
   10364:	1009883a 	mov	r4,r2
   10368:	e17ffc17 	ldw	r5,-16(fp)
   1036c:	001104c0 	call	1104c <__mulsf3>
   10370:	1007883a 	mov	r3,r2
   10374:	1805883a 	mov	r2,r3
   10378:	1009883a 	mov	r4,r2
   1037c:	e17ffb17 	ldw	r5,-20(fp)
   10380:	00114a80 	call	114a8 <__subsf3>
   10384:	1007883a 	mov	r3,r2
   10388:	1821883a 	mov	r16,r3
   1038c:	00871484 	movi	r2,7250
   10390:	1009883a 	mov	r4,r2
   10394:	00119e00 	call	119e0 <__floatsisf>
   10398:	1007883a 	mov	r3,r2
   1039c:	8009883a 	mov	r4,r16
   103a0:	180b883a 	mov	r5,r3
   103a4:	001104c0 	call	1104c <__mulsf3>
   103a8:	1007883a 	mov	r3,r2
   103ac:	1805883a 	mov	r2,r3
   103b0:	1009883a 	mov	r4,r2
   103b4:	0010a700 	call	10a70 <__fixunssfsi>
   103b8:	e0bff215 	stw	r2,-56(fp)

			// PWM timings
			tB = (PWMHalfPeriod - t2 - t3) / 2;
   103bc:	00871484 	movi	r2,7250
   103c0:	1007883a 	mov	r3,r2
   103c4:	e0bff117 	ldw	r2,-60(fp)
   103c8:	1887c83a 	sub	r3,r3,r2
   103cc:	e0bff217 	ldw	r2,-56(fp)
   103d0:	1885c83a 	sub	r2,r3,r2
   103d4:	1004d07a 	srli	r2,r2,1
   103d8:	e0bfed15 	stw	r2,-76(fp)
			tA = tB + t3;
   103dc:	e0ffed17 	ldw	r3,-76(fp)
   103e0:	e0bff217 	ldw	r2,-56(fp)
   103e4:	1885883a 	add	r2,r3,r2
   103e8:	e0bfec15 	stw	r2,-80(fp)
			tC = tA + t2;
   103ec:	e0ffec17 	ldw	r3,-80(fp)
   103f0:	e0bff117 	ldw	r2,-60(fp)
   103f4:	1885883a 	add	r2,r3,r2
   103f8:	e0bfee15 	stw	r2,-72(fp)

			break;
   103fc:	0000fb06 	br	107ec <SVM+0x790>

		// sextant 3-4
		case 3:
		{
			// Vector on-times
			uint32_t t3 = (two_by_sqrt3 * beta) * PWMHalfPeriod;
   10400:	008fe534 	movhi	r2,16276
   10404:	10b34e84 	addi	r2,r2,-12998
   10408:	1009883a 	mov	r4,r2
   1040c:	e17ffc17 	ldw	r5,-16(fp)
   10410:	001104c0 	call	1104c <__mulsf3>
   10414:	1007883a 	mov	r3,r2
   10418:	1821883a 	mov	r16,r3
   1041c:	00871484 	movi	r2,7250
   10420:	1009883a 	mov	r4,r2
   10424:	00119e00 	call	119e0 <__floatsisf>
   10428:	1007883a 	mov	r3,r2
   1042c:	8009883a 	mov	r4,r16
   10430:	180b883a 	mov	r5,r3
   10434:	001104c0 	call	1104c <__mulsf3>
   10438:	1007883a 	mov	r3,r2
   1043c:	1805883a 	mov	r2,r3
   10440:	1009883a 	mov	r4,r2
   10444:	0010a700 	call	10a70 <__fixunssfsi>
   10448:	e0bff315 	stw	r2,-52(fp)
			uint32_t t4 = (-alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
   1044c:	e0bffb17 	ldw	r2,-20(fp)
   10450:	1420003c 	xorhi	r16,r2,32768
   10454:	008fc534 	movhi	r2,16148
   10458:	10b34e84 	addi	r2,r2,-12998
   1045c:	1009883a 	mov	r4,r2
   10460:	e17ffc17 	ldw	r5,-16(fp)
   10464:	001104c0 	call	1104c <__mulsf3>
   10468:	1007883a 	mov	r3,r2
   1046c:	1805883a 	mov	r2,r3
   10470:	8009883a 	mov	r4,r16
   10474:	100b883a 	mov	r5,r2
   10478:	00114a80 	call	114a8 <__subsf3>
   1047c:	1007883a 	mov	r3,r2
   10480:	1821883a 	mov	r16,r3
   10484:	00871484 	movi	r2,7250
   10488:	1009883a 	mov	r4,r2
   1048c:	00119e00 	call	119e0 <__floatsisf>
   10490:	1007883a 	mov	r3,r2
   10494:	8009883a 	mov	r4,r16
   10498:	180b883a 	mov	r5,r3
   1049c:	001104c0 	call	1104c <__mulsf3>
   104a0:	1007883a 	mov	r3,r2
   104a4:	1805883a 	mov	r2,r3
   104a8:	1009883a 	mov	r4,r2
   104ac:	0010a700 	call	10a70 <__fixunssfsi>
   104b0:	e0bff415 	stw	r2,-48(fp)

			// PWM timings
			tB = (PWMHalfPeriod - t3 - t4) / 2;
   104b4:	00871484 	movi	r2,7250
   104b8:	1007883a 	mov	r3,r2
   104bc:	e0bff317 	ldw	r2,-52(fp)
   104c0:	1887c83a 	sub	r3,r3,r2
   104c4:	e0bff417 	ldw	r2,-48(fp)
   104c8:	1885c83a 	sub	r2,r3,r2
   104cc:	1004d07a 	srli	r2,r2,1
   104d0:	e0bfed15 	stw	r2,-76(fp)
			tC = tB + t3;
   104d4:	e0ffed17 	ldw	r3,-76(fp)
   104d8:	e0bff317 	ldw	r2,-52(fp)
   104dc:	1885883a 	add	r2,r3,r2
   104e0:	e0bfee15 	stw	r2,-72(fp)
			tA = tC + t4;
   104e4:	e0ffee17 	ldw	r3,-72(fp)
   104e8:	e0bff417 	ldw	r2,-48(fp)
   104ec:	1885883a 	add	r2,r3,r2
   104f0:	e0bfec15 	stw	r2,-80(fp)

			break;
   104f4:	0000bd06 	br	107ec <SVM+0x790>

		// sextant 4-5
		case 4:
		{
			// Vector on-times
			uint32_t t4 = (-alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
   104f8:	008fc534 	movhi	r2,16148
   104fc:	10b34e84 	addi	r2,r2,-12998
   10500:	1009883a 	mov	r4,r2
   10504:	e17ffc17 	ldw	r5,-16(fp)
   10508:	001104c0 	call	1104c <__mulsf3>
   1050c:	1007883a 	mov	r3,r2
   10510:	1805883a 	mov	r2,r3
   10514:	1009883a 	mov	r4,r2
   10518:	e17ffb17 	ldw	r5,-20(fp)
   1051c:	00114a80 	call	114a8 <__subsf3>
   10520:	1007883a 	mov	r3,r2
   10524:	1821883a 	mov	r16,r3
   10528:	00871484 	movi	r2,7250
   1052c:	1009883a 	mov	r4,r2
   10530:	00119e00 	call	119e0 <__floatsisf>
   10534:	1007883a 	mov	r3,r2
   10538:	8009883a 	mov	r4,r16
   1053c:	180b883a 	mov	r5,r3
   10540:	001104c0 	call	1104c <__mulsf3>
   10544:	1007883a 	mov	r3,r2
   10548:	1805883a 	mov	r2,r3
   1054c:	1009883a 	mov	r4,r2
   10550:	0010a700 	call	10a70 <__fixunssfsi>
   10554:	e0bff515 	stw	r2,-44(fp)
			uint32_t t5 = (-two_by_sqrt3 * beta) * PWMHalfPeriod;
   10558:	008fe534 	movhi	r2,16276
   1055c:	10b34e84 	addi	r2,r2,-12998
   10560:	10a0003c 	xorhi	r2,r2,32768
   10564:	1009883a 	mov	r4,r2
   10568:	e17ffc17 	ldw	r5,-16(fp)
   1056c:	001104c0 	call	1104c <__mulsf3>
   10570:	1007883a 	mov	r3,r2
   10574:	1821883a 	mov	r16,r3
   10578:	00871484 	movi	r2,7250
   1057c:	1009883a 	mov	r4,r2
   10580:	00119e00 	call	119e0 <__floatsisf>
   10584:	1007883a 	mov	r3,r2
   10588:	8009883a 	mov	r4,r16
   1058c:	180b883a 	mov	r5,r3
   10590:	001104c0 	call	1104c <__mulsf3>
   10594:	1007883a 	mov	r3,r2
   10598:	1805883a 	mov	r2,r3
   1059c:	1009883a 	mov	r4,r2
   105a0:	0010a700 	call	10a70 <__fixunssfsi>
   105a4:	e0bff615 	stw	r2,-40(fp)

			// PWM timings
			tC = (PWMHalfPeriod - t4 - t5) / 2;
   105a8:	00871484 	movi	r2,7250
   105ac:	1007883a 	mov	r3,r2
   105b0:	e0bff517 	ldw	r2,-44(fp)
   105b4:	1887c83a 	sub	r3,r3,r2
   105b8:	e0bff617 	ldw	r2,-40(fp)
   105bc:	1885c83a 	sub	r2,r3,r2
   105c0:	1004d07a 	srli	r2,r2,1
   105c4:	e0bfee15 	stw	r2,-72(fp)
			tB = tC + t5;
   105c8:	e0ffee17 	ldw	r3,-72(fp)
   105cc:	e0bff617 	ldw	r2,-40(fp)
   105d0:	1885883a 	add	r2,r3,r2
   105d4:	e0bfed15 	stw	r2,-76(fp)
			tA = tB + t4;
   105d8:	e0ffed17 	ldw	r3,-76(fp)
   105dc:	e0bff517 	ldw	r2,-44(fp)
   105e0:	1885883a 	add	r2,r3,r2
   105e4:	e0bfec15 	stw	r2,-80(fp)

			break;
   105e8:	00008006 	br	107ec <SVM+0x790>

		// sextant 5-6
		case 5:
		{
			// Vector on-times
			uint32_t t5 = (-alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
   105ec:	e0bffb17 	ldw	r2,-20(fp)
   105f0:	1420003c 	xorhi	r16,r2,32768
   105f4:	008fc534 	movhi	r2,16148
   105f8:	10b34e84 	addi	r2,r2,-12998
   105fc:	1009883a 	mov	r4,r2
   10600:	e17ffc17 	ldw	r5,-16(fp)
   10604:	001104c0 	call	1104c <__mulsf3>
   10608:	1007883a 	mov	r3,r2
   1060c:	1805883a 	mov	r2,r3
   10610:	8009883a 	mov	r4,r16
   10614:	100b883a 	mov	r5,r2
   10618:	00114a80 	call	114a8 <__subsf3>
   1061c:	1007883a 	mov	r3,r2
   10620:	1821883a 	mov	r16,r3
   10624:	00871484 	movi	r2,7250
   10628:	1009883a 	mov	r4,r2
   1062c:	00119e00 	call	119e0 <__floatsisf>
   10630:	1007883a 	mov	r3,r2
   10634:	8009883a 	mov	r4,r16
   10638:	180b883a 	mov	r5,r3
   1063c:	001104c0 	call	1104c <__mulsf3>
   10640:	1007883a 	mov	r3,r2
   10644:	1805883a 	mov	r2,r3
   10648:	1009883a 	mov	r4,r2
   1064c:	0010a700 	call	10a70 <__fixunssfsi>
   10650:	e0bff715 	stw	r2,-36(fp)
			uint32_t t6 = (alpha - one_by_sqrt3 * beta) * PWMHalfPeriod;
   10654:	008fc534 	movhi	r2,16148
   10658:	10b34e84 	addi	r2,r2,-12998
   1065c:	1009883a 	mov	r4,r2
   10660:	e17ffc17 	ldw	r5,-16(fp)
   10664:	001104c0 	call	1104c <__mulsf3>
   10668:	1007883a 	mov	r3,r2
   1066c:	1805883a 	mov	r2,r3
   10670:	e13ffb17 	ldw	r4,-20(fp)
   10674:	100b883a 	mov	r5,r2
   10678:	00114a80 	call	114a8 <__subsf3>
   1067c:	1007883a 	mov	r3,r2
   10680:	1821883a 	mov	r16,r3
   10684:	00871484 	movi	r2,7250
   10688:	1009883a 	mov	r4,r2
   1068c:	00119e00 	call	119e0 <__floatsisf>
   10690:	1007883a 	mov	r3,r2
   10694:	8009883a 	mov	r4,r16
   10698:	180b883a 	mov	r5,r3
   1069c:	001104c0 	call	1104c <__mulsf3>
   106a0:	1007883a 	mov	r3,r2
   106a4:	1805883a 	mov	r2,r3
   106a8:	1009883a 	mov	r4,r2
   106ac:	0010a700 	call	10a70 <__fixunssfsi>
   106b0:	e0bff815 	stw	r2,-32(fp)

			// PWM timings
			tC = (PWMHalfPeriod - t5 - t6) / 2;
   106b4:	00871484 	movi	r2,7250
   106b8:	1007883a 	mov	r3,r2
   106bc:	e0bff717 	ldw	r2,-36(fp)
   106c0:	1887c83a 	sub	r3,r3,r2
   106c4:	e0bff817 	ldw	r2,-32(fp)
   106c8:	1885c83a 	sub	r2,r3,r2
   106cc:	1004d07a 	srli	r2,r2,1
   106d0:	e0bfee15 	stw	r2,-72(fp)
			tA = tC + t5;
   106d4:	e0ffee17 	ldw	r3,-72(fp)
   106d8:	e0bff717 	ldw	r2,-36(fp)
   106dc:	1885883a 	add	r2,r3,r2
   106e0:	e0bfec15 	stw	r2,-80(fp)
			tB = tA + t6;
   106e4:	e0ffec17 	ldw	r3,-80(fp)
   106e8:	e0bff817 	ldw	r2,-32(fp)
   106ec:	1885883a 	add	r2,r3,r2
   106f0:	e0bfed15 	stw	r2,-76(fp)

			break;
   106f4:	00003d06 	br	107ec <SVM+0x790>

		// sextant 6-1
		case 6:
		{
			// Vector on-times
			uint32_t t6 = (-two_by_sqrt3 * beta) * PWMHalfPeriod;
   106f8:	008fe534 	movhi	r2,16276
   106fc:	10b34e84 	addi	r2,r2,-12998
   10700:	10a0003c 	xorhi	r2,r2,32768
   10704:	1009883a 	mov	r4,r2
   10708:	e17ffc17 	ldw	r5,-16(fp)
   1070c:	001104c0 	call	1104c <__mulsf3>
   10710:	1007883a 	mov	r3,r2
   10714:	1821883a 	mov	r16,r3
   10718:	00871484 	movi	r2,7250
   1071c:	1009883a 	mov	r4,r2
   10720:	00119e00 	call	119e0 <__floatsisf>
   10724:	1007883a 	mov	r3,r2
   10728:	8009883a 	mov	r4,r16
   1072c:	180b883a 	mov	r5,r3
   10730:	001104c0 	call	1104c <__mulsf3>
   10734:	1007883a 	mov	r3,r2
   10738:	1805883a 	mov	r2,r3
   1073c:	1009883a 	mov	r4,r2
   10740:	0010a700 	call	10a70 <__fixunssfsi>
   10744:	e0bff915 	stw	r2,-28(fp)
			uint32_t t1 = (alpha + one_by_sqrt3 * beta) * PWMHalfPeriod;
   10748:	008fc534 	movhi	r2,16148
   1074c:	10b34e84 	addi	r2,r2,-12998
   10750:	1009883a 	mov	r4,r2
   10754:	e17ffc17 	ldw	r5,-16(fp)
   10758:	001104c0 	call	1104c <__mulsf3>
   1075c:	1007883a 	mov	r3,r2
   10760:	1805883a 	mov	r2,r3
   10764:	1009883a 	mov	r4,r2
   10768:	e17ffb17 	ldw	r5,-20(fp)
   1076c:	0010ae00 	call	10ae0 <__addsf3>
   10770:	1007883a 	mov	r3,r2
   10774:	1821883a 	mov	r16,r3
   10778:	00871484 	movi	r2,7250
   1077c:	1009883a 	mov	r4,r2
   10780:	00119e00 	call	119e0 <__floatsisf>
   10784:	1007883a 	mov	r3,r2
   10788:	8009883a 	mov	r4,r16
   1078c:	180b883a 	mov	r5,r3
   10790:	001104c0 	call	1104c <__mulsf3>
   10794:	1007883a 	mov	r3,r2
   10798:	1805883a 	mov	r2,r3
   1079c:	1009883a 	mov	r4,r2
   107a0:	0010a700 	call	10a70 <__fixunssfsi>
   107a4:	e0bffa15 	stw	r2,-24(fp)

			// PWM timings
			tA = (PWMHalfPeriod - t6 - t1) / 2;
   107a8:	00871484 	movi	r2,7250
   107ac:	1007883a 	mov	r3,r2
   107b0:	e0bff917 	ldw	r2,-28(fp)
   107b4:	1887c83a 	sub	r3,r3,r2
   107b8:	e0bffa17 	ldw	r2,-24(fp)
   107bc:	1885c83a 	sub	r2,r3,r2
   107c0:	1004d07a 	srli	r2,r2,1
   107c4:	e0bfec15 	stw	r2,-80(fp)
			tC = tA + t1;
   107c8:	e0ffec17 	ldw	r3,-80(fp)
   107cc:	e0bffa17 	ldw	r2,-24(fp)
   107d0:	1885883a 	add	r2,r3,r2
   107d4:	e0bfee15 	stw	r2,-72(fp)
			tB = tC + t6;
   107d8:	e0ffee17 	ldw	r3,-72(fp)
   107dc:	e0bff917 	ldw	r2,-28(fp)
   107e0:	1885883a 	add	r2,r3,r2
   107e4:	e0bfed15 	stw	r2,-76(fp)

			break;
   107e8:	0001883a 	nop
		}

	} //switch

	*tAout = tA;
   107ec:	e0bffd17 	ldw	r2,-12(fp)
   107f0:	e0ffec17 	ldw	r3,-80(fp)
   107f4:	10c00015 	stw	r3,0(r2)
	*tBout = tB;
   107f8:	e0bffe17 	ldw	r2,-8(fp)
   107fc:	e0ffed17 	ldw	r3,-76(fp)
   10800:	10c00015 	stw	r3,0(r2)
	*tCout = tC;
   10804:	e0800217 	ldw	r2,8(fp)
   10808:	e0ffee17 	ldw	r3,-72(fp)
   1080c:	10c00015 	stw	r3,0(r2)

}
   10810:	e6ffff04 	addi	sp,fp,-4
   10814:	dfc00217 	ldw	ra,8(sp)
   10818:	df000117 	ldw	fp,4(sp)
   1081c:	dc000017 	ldw	r16,0(sp)
   10820:	dec00304 	addi	sp,sp,12
   10824:	f800283a 	ret

00010828 <main>:

int main()
{
   10828:	defff604 	addi	sp,sp,-40
   1082c:	dfc00915 	stw	ra,36(sp)
   10830:	df000815 	stw	fp,32(sp)
   10834:	df000804 	addi	fp,sp,32
	//printf("Hello from Nios II!\n");

	IOWR(PWM_0_BASE, PWM_REG_UPDATEON_Z, 1);
   10838:	00c00044 	movi	r3,1
   1083c:	008000b4 	movhi	r2,2
   10840:	10842a04 	addi	r2,r2,4264
   10844:	10c00035 	stwio	r3,0(r2)
	IOWR(PWM_0_BASE, PWM_REG_TRIGON_Z, 1);
   10848:	00c00044 	movi	r3,1
   1084c:	008000b4 	movhi	r2,2
   10850:	10842c04 	addi	r2,r2,4272
   10854:	10c00035 	stwio	r3,0(r2)
	IOWR(PWM_0_BASE, PWM_REG_MAXCTR, PWMHalfPeriod);
   10858:	00c71484 	movi	r3,7250
   1085c:	008000b4 	movhi	r2,2
   10860:	10842804 	addi	r2,r2,4256
   10864:	10c00035 	stwio	r3,0(r2)

	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_MAXSEQ, 1);
   10868:	00c00044 	movi	r3,1
   1086c:	008000b4 	movhi	r2,2
   10870:	10840204 	addi	r2,r2,4104
   10874:	10c00035 	stwio	r3,0(r2)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_CH_MAP + 0, 7);
   10878:	00c001c4 	movi	r3,7
   1087c:	008000b4 	movhi	r2,2
   10880:	10841004 	addi	r2,r2,4160
   10884:	10c00035 	stwio	r3,0(r2)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_CH_MAP + 1, 6),
   10888:	00c00184 	movi	r3,6
   1088c:	008000b4 	movhi	r2,2
   10890:	10841104 	addi	r2,r2,4164
   10894:	10c00035 	stwio	r3,0(r2)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
   10898:	0007883a 	mov	r3,zero
   1089c:	008000b4 	movhi	r2,2
   108a0:	10840104 	addi	r2,r2,4100
   108a4:	10c00035 	stwio	r3,0(r2)
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_EN, 1);
   108a8:	00c00044 	movi	r3,1
   108ac:	008000b4 	movhi	r2,2
   108b0:	10840004 	addi	r2,r2,4096
   108b4:	10c00035 	stwio	r3,0(r2)

	for (int ud = 0; 1; ud ^= 1)
   108b8:	e03ff915 	stw	zero,-28(fp)
	{
		float Ia, Ib;
		if (IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG))
   108bc:	008000b4 	movhi	r2,2
   108c0:	10840104 	addi	r2,r2,4100
   108c4:	10800037 	ldwio	r2,0(r2)
   108c8:	10001226 	beq	r2,zero,10914 <main+0xec>
		{
			IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
   108cc:	0007883a 	mov	r3,zero
   108d0:	008000b4 	movhi	r2,2
   108d4:	10840104 	addi	r2,r2,4100
   108d8:	10c00035 	stwio	r3,0(r2)
			Ia = IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_SAMPSTORE + 0);
   108dc:	008000b4 	movhi	r2,2
   108e0:	10841804 	addi	r2,r2,4192
   108e4:	10800037 	ldwio	r2,0(r2)
   108e8:	1009883a 	mov	r4,r2
   108ec:	00119e00 	call	119e0 <__floatsisf>
   108f0:	1007883a 	mov	r3,r2
   108f4:	e0fffb15 	stw	r3,-20(fp)
			Ib = IORD(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_SAMPSTORE + 1);
   108f8:	008000b4 	movhi	r2,2
   108fc:	10841904 	addi	r2,r2,4196
   10900:	10800037 	ldwio	r2,0(r2)
   10904:	1009883a 	mov	r4,r2
   10908:	00119e00 	call	119e0 <__floatsisf>
   1090c:	1007883a 	mov	r3,r2
   10910:	e0fffc15 	stw	r3,-16(fp)
		}
		
		uint32_t tABC[3];
		SVM(ud*0.01,0,&tABC[0],&tABC[1],&tABC[2]);
   10914:	e13ff917 	ldw	r4,-28(fp)
   10918:	00123500 	call	12350 <__floatsidf>
   1091c:	100b883a 	mov	r5,r2
   10920:	180d883a 	mov	r6,r3
   10924:	2809883a 	mov	r4,r5
   10928:	300b883a 	mov	r5,r6
   1092c:	0191ebb4 	movhi	r6,18350
   10930:	31851ec4 	addi	r6,r6,5243
   10934:	01cfe134 	movhi	r7,16260
   10938:	39deb844 	addi	r7,r7,31457
   1093c:	0011b500 	call	11b50 <__muldf3>
   10940:	1009883a 	mov	r4,r2
   10944:	180b883a 	mov	r5,r3
   10948:	2005883a 	mov	r2,r4
   1094c:	2807883a 	mov	r3,r5
   10950:	1009883a 	mov	r4,r2
   10954:	180b883a 	mov	r5,r3
   10958:	00124200 	call	12420 <__truncdfsf2>
   1095c:	1009883a 	mov	r4,r2
   10960:	e0fffd04 	addi	r3,fp,-12
   10964:	e0bffd04 	addi	r2,fp,-12
   10968:	10800104 	addi	r2,r2,4
   1096c:	e17ffd04 	addi	r5,fp,-12
   10970:	29400204 	addi	r5,r5,8
   10974:	d9400015 	stw	r5,0(sp)
   10978:	000b883a 	mov	r5,zero
   1097c:	180d883a 	mov	r6,r3
   10980:	100f883a 	mov	r7,r2
   10984:	001005c0 	call	1005c <SVM>

		for (int i = 0; i < 3; ++i)
   10988:	e03ffa15 	stw	zero,-24(fp)
   1098c:	00002a06 	br	10a38 <main+0x210>
		{
			IOWR(PWM_0_BASE, 2*i, tABC[i] - deadtimeint/2);//MAX((int)tABC[i] - deadtimeint/2, 0));
   10990:	e0bffa17 	ldw	r2,-24(fp)
   10994:	100490fa 	slli	r2,r2,3
   10998:	1007883a 	mov	r3,r2
   1099c:	008000b4 	movhi	r2,2
   109a0:	10842004 	addi	r2,r2,4224
   109a4:	1887883a 	add	r3,r3,r2
   109a8:	e0bffa17 	ldw	r2,-24(fp)
   109ac:	1085883a 	add	r2,r2,r2
   109b0:	1085883a 	add	r2,r2,r2
   109b4:	e13ff904 	addi	r4,fp,-28
   109b8:	2085883a 	add	r2,r4,r2
   109bc:	10800404 	addi	r2,r2,16
   109c0:	11000017 	ldw	r4,0(r2)
   109c4:	008005c4 	movi	r2,23
   109c8:	100ad7fa 	srli	r5,r2,31
   109cc:	2885883a 	add	r2,r5,r2
   109d0:	1005d07a 	srai	r2,r2,1
   109d4:	2085c83a 	sub	r2,r4,r2
   109d8:	18800035 	stwio	r2,0(r3)
			IOWR(PWM_0_BASE, 2*i + 1, tABC[i] + deadtimeint/2);
   109dc:	e0bffa17 	ldw	r2,-24(fp)
   109e0:	100490fa 	slli	r2,r2,3
   109e4:	10800104 	addi	r2,r2,4
   109e8:	1007883a 	mov	r3,r2
   109ec:	008000b4 	movhi	r2,2
   109f0:	10842004 	addi	r2,r2,4224
   109f4:	1887883a 	add	r3,r3,r2
   109f8:	e0bffa17 	ldw	r2,-24(fp)
   109fc:	1085883a 	add	r2,r2,r2
   10a00:	1085883a 	add	r2,r2,r2
   10a04:	e13ff904 	addi	r4,fp,-28
   10a08:	2085883a 	add	r2,r4,r2
   10a0c:	10800404 	addi	r2,r2,16
   10a10:	11000017 	ldw	r4,0(r2)
   10a14:	008005c4 	movi	r2,23
   10a18:	100ad7fa 	srli	r5,r2,31
   10a1c:	2885883a 	add	r2,r5,r2
   10a20:	1005d07a 	srai	r2,r2,1
   10a24:	2085883a 	add	r2,r4,r2
   10a28:	18800035 	stwio	r2,0(r3)
		}
		
		uint32_t tABC[3];
		SVM(ud*0.01,0,&tABC[0],&tABC[1],&tABC[2]);

		for (int i = 0; i < 3; ++i)
   10a2c:	e0bffa17 	ldw	r2,-24(fp)
   10a30:	10800044 	addi	r2,r2,1
   10a34:	e0bffa15 	stw	r2,-24(fp)
   10a38:	e0bffa17 	ldw	r2,-24(fp)
   10a3c:	108000d0 	cmplti	r2,r2,3
   10a40:	103fd31e 	bne	r2,zero,10990 <_gp+0xffff4660>
		{
			IOWR(PWM_0_BASE, 2*i, tABC[i] - deadtimeint/2);//MAX((int)tABC[i] - deadtimeint/2, 0));
			IOWR(PWM_0_BASE, 2*i + 1, tABC[i] + deadtimeint/2);
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);
   10a44:	00c00044 	movi	r3,1
   10a48:	008000b4 	movhi	r2,2
   10a4c:	10842f04 	addi	r2,r2,4284
   10a50:	10c00035 	stwio	r3,0(r2)

		usleep(500000);
   10a54:	01000234 	movhi	r4,8
   10a58:	21284804 	addi	r4,r4,-24288
   10a5c:	001280c0 	call	1280c <usleep>
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_CH_MAP + 0, 7);
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_OFFSET_CH_MAP + 1, 6),
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_IRQFLAG, 0);
	IOWR(TRIGGERED_ADC_SEQUENCER_0_BASE, TADCS_REG_EN, 1);

	for (int ud = 0; 1; ud ^= 1)
   10a60:	e0bff917 	ldw	r2,-28(fp)
   10a64:	1080005c 	xori	r2,r2,1
   10a68:	e0bff915 	stw	r2,-28(fp)
		}

		IOWR(PWM_0_BASE, PWM_REG_UPDATE, 1);

		usleep(500000);
	}
   10a6c:	003f9306 	br	108bc <_gp+0xffff458c>

00010a70 <__fixunssfsi>:
   10a70:	defffd04 	addi	sp,sp,-12
   10a74:	dc000015 	stw	r16,0(sp)
   10a78:	0413c034 	movhi	r16,20224
   10a7c:	800b883a 	mov	r5,r16
   10a80:	dc400115 	stw	r17,4(sp)
   10a84:	dfc00215 	stw	ra,8(sp)
   10a88:	2023883a 	mov	r17,r4
   10a8c:	0010f980 	call	10f98 <__gesf2>
   10a90:	1000070e 	bge	r2,zero,10ab0 <__fixunssfsi+0x40>
   10a94:	8809883a 	mov	r4,r17
   10a98:	00119700 	call	11970 <__fixsfsi>
   10a9c:	dfc00217 	ldw	ra,8(sp)
   10aa0:	dc400117 	ldw	r17,4(sp)
   10aa4:	dc000017 	ldw	r16,0(sp)
   10aa8:	dec00304 	addi	sp,sp,12
   10aac:	f800283a 	ret
   10ab0:	800b883a 	mov	r5,r16
   10ab4:	8809883a 	mov	r4,r17
   10ab8:	00114a80 	call	114a8 <__subsf3>
   10abc:	1009883a 	mov	r4,r2
   10ac0:	00119700 	call	11970 <__fixsfsi>
   10ac4:	00e00034 	movhi	r3,32768
   10ac8:	10c5883a 	add	r2,r2,r3
   10acc:	dfc00217 	ldw	ra,8(sp)
   10ad0:	dc400117 	ldw	r17,4(sp)
   10ad4:	dc000017 	ldw	r16,0(sp)
   10ad8:	dec00304 	addi	sp,sp,12
   10adc:	f800283a 	ret

00010ae0 <__addsf3>:
   10ae0:	defffc04 	addi	sp,sp,-16
   10ae4:	2004d7fa 	srli	r2,r4,31
   10ae8:	2810d5fa 	srli	r8,r5,23
   10aec:	dc000015 	stw	r16,0(sp)
   10af0:	280ed7fa 	srli	r7,r5,31
   10af4:	2020d5fa 	srli	r16,r4,23
   10af8:	01802034 	movhi	r6,128
   10afc:	31bfffc4 	addi	r6,r6,-1
   10b00:	3106703a 	and	r3,r6,r4
   10b04:	dc400115 	stw	r17,4(sp)
   10b08:	314a703a 	and	r5,r6,r5
   10b0c:	dfc00315 	stw	ra,12(sp)
   10b10:	dc800215 	stw	r18,8(sp)
   10b14:	14403fcc 	andi	r17,r2,255
   10b18:	84003fcc 	andi	r16,r16,255
   10b1c:	180690fa 	slli	r3,r3,3
   10b20:	41003fcc 	andi	r4,r8,255
   10b24:	280a90fa 	slli	r5,r5,3
   10b28:	89c03b26 	beq	r17,r7,10c18 <__addsf3+0x138>
   10b2c:	8105c83a 	sub	r2,r16,r4
   10b30:	0080710e 	bge	zero,r2,10cf8 <__addsf3+0x218>
   10b34:	20001e1e 	bne	r4,zero,10bb0 <__addsf3+0xd0>
   10b38:	2800521e 	bne	r5,zero,10c84 <__addsf3+0x1a4>
   10b3c:	188001cc 	andi	r2,r3,7
   10b40:	10000426 	beq	r2,zero,10b54 <__addsf3+0x74>
   10b44:	190003cc 	andi	r4,r3,15
   10b48:	00800104 	movi	r2,4
   10b4c:	20800126 	beq	r4,r2,10b54 <__addsf3+0x74>
   10b50:	18c00104 	addi	r3,r3,4
   10b54:	1901002c 	andhi	r4,r3,1024
   10b58:	8805883a 	mov	r2,r17
   10b5c:	20002526 	beq	r4,zero,10bf4 <__addsf3+0x114>
   10b60:	84000044 	addi	r16,r16,1
   10b64:	01003fc4 	movi	r4,255
   10b68:	81006e26 	beq	r16,r4,10d24 <__addsf3+0x244>
   10b6c:	180691ba 	slli	r3,r3,6
   10b70:	1806d27a 	srli	r3,r3,9
   10b74:	84003fcc 	andi	r16,r16,255
   10b78:	802095fa 	slli	r16,r16,23
   10b7c:	10803fcc 	andi	r2,r2,255
   10b80:	100897fa 	slli	r4,r2,31
   10b84:	00802034 	movhi	r2,128
   10b88:	10bfffc4 	addi	r2,r2,-1
   10b8c:	1884703a 	and	r2,r3,r2
   10b90:	1404b03a 	or	r2,r2,r16
   10b94:	1104b03a 	or	r2,r2,r4
   10b98:	dfc00317 	ldw	ra,12(sp)
   10b9c:	dc800217 	ldw	r18,8(sp)
   10ba0:	dc400117 	ldw	r17,4(sp)
   10ba4:	dc000017 	ldw	r16,0(sp)
   10ba8:	dec00404 	addi	sp,sp,16
   10bac:	f800283a 	ret
   10bb0:	01003fc4 	movi	r4,255
   10bb4:	813fe126 	beq	r16,r4,10b3c <_gp+0xffff480c>
   10bb8:	29410034 	orhi	r5,r5,1024
   10bbc:	010006c4 	movi	r4,27
   10bc0:	2080f016 	blt	r4,r2,10f84 <__addsf3+0x4a4>
   10bc4:	01000804 	movi	r4,32
   10bc8:	2089c83a 	sub	r4,r4,r2
   10bcc:	2908983a 	sll	r4,r5,r4
   10bd0:	288ad83a 	srl	r5,r5,r2
   10bd4:	2004c03a 	cmpne	r2,r4,zero
   10bd8:	1144b03a 	or	r2,r2,r5
   10bdc:	1887c83a 	sub	r3,r3,r2
   10be0:	00002b06 	br	10c90 <__addsf3+0x1b0>
   10be4:	0005883a 	mov	r2,zero
   10be8:	00c10034 	movhi	r3,1024
   10bec:	18fffe04 	addi	r3,r3,-8
   10bf0:	04003fc4 	movi	r16,255
   10bf4:	01003fc4 	movi	r4,255
   10bf8:	1806d0fa 	srli	r3,r3,3
   10bfc:	8100021e 	bne	r16,r4,10c08 <__addsf3+0x128>
   10c00:	18004826 	beq	r3,zero,10d24 <__addsf3+0x244>
   10c04:	18c01034 	orhi	r3,r3,64
   10c08:	01002034 	movhi	r4,128
   10c0c:	213fffc4 	addi	r4,r4,-1
   10c10:	1906703a 	and	r3,r3,r4
   10c14:	003fd706 	br	10b74 <_gp+0xffff4844>
   10c18:	810dc83a 	sub	r6,r16,r4
   10c1c:	0180480e 	bge	zero,r6,10d40 <__addsf3+0x260>
   10c20:	20002f26 	beq	r4,zero,10ce0 <__addsf3+0x200>
   10c24:	01003fc4 	movi	r4,255
   10c28:	813fc426 	beq	r16,r4,10b3c <_gp+0xffff480c>
   10c2c:	29410034 	orhi	r5,r5,1024
   10c30:	010006c4 	movi	r4,27
   10c34:	2180d616 	blt	r4,r6,10f90 <__addsf3+0x4b0>
   10c38:	01000804 	movi	r4,32
   10c3c:	2189c83a 	sub	r4,r4,r6
   10c40:	2908983a 	sll	r4,r5,r4
   10c44:	298cd83a 	srl	r6,r5,r6
   10c48:	200ac03a 	cmpne	r5,r4,zero
   10c4c:	298ab03a 	or	r5,r5,r6
   10c50:	1947883a 	add	r3,r3,r5
   10c54:	1901002c 	andhi	r4,r3,1024
   10c58:	203fb826 	beq	r4,zero,10b3c <_gp+0xffff480c>
   10c5c:	84000044 	addi	r16,r16,1
   10c60:	01003fc4 	movi	r4,255
   10c64:	81005f26 	beq	r16,r4,10de4 <__addsf3+0x304>
   10c68:	00bf0034 	movhi	r2,64512
   10c6c:	10bfffc4 	addi	r2,r2,-1
   10c70:	1884703a 	and	r2,r3,r2
   10c74:	1004d07a 	srli	r2,r2,1
   10c78:	18c0004c 	andi	r3,r3,1
   10c7c:	10c6b03a 	or	r3,r2,r3
   10c80:	003fae06 	br	10b3c <_gp+0xffff480c>
   10c84:	10bfffc4 	addi	r2,r2,-1
   10c88:	1000381e 	bne	r2,zero,10d6c <__addsf3+0x28c>
   10c8c:	1947c83a 	sub	r3,r3,r5
   10c90:	1881002c 	andhi	r2,r3,1024
   10c94:	103fa926 	beq	r2,zero,10b3c <_gp+0xffff480c>
   10c98:	04810034 	movhi	r18,1024
   10c9c:	94bfffc4 	addi	r18,r18,-1
   10ca0:	1ca4703a 	and	r18,r3,r18
   10ca4:	9009883a 	mov	r4,r18
   10ca8:	00125dc0 	call	125dc <__clzsi2>
   10cac:	10bffec4 	addi	r2,r2,-5
   10cb0:	90a4983a 	sll	r18,r18,r2
   10cb4:	14001d16 	blt	r2,r16,10d2c <__addsf3+0x24c>
   10cb8:	1421c83a 	sub	r16,r2,r16
   10cbc:	00c007c4 	movi	r3,31
   10cc0:	1c07c83a 	sub	r3,r3,r16
   10cc4:	90c6983a 	sll	r3,r18,r3
   10cc8:	84000044 	addi	r16,r16,1
   10ccc:	9424d83a 	srl	r18,r18,r16
   10cd0:	1806c03a 	cmpne	r3,r3,zero
   10cd4:	0021883a 	mov	r16,zero
   10cd8:	1c86b03a 	or	r3,r3,r18
   10cdc:	003f9706 	br	10b3c <_gp+0xffff480c>
   10ce0:	283f9626 	beq	r5,zero,10b3c <_gp+0xffff480c>
   10ce4:	31bfffc4 	addi	r6,r6,-1
   10ce8:	303fd926 	beq	r6,zero,10c50 <_gp+0xffff4920>
   10cec:	01003fc4 	movi	r4,255
   10cf0:	813fcf1e 	bne	r16,r4,10c30 <_gp+0xffff4900>
   10cf4:	003f9106 	br	10b3c <_gp+0xffff480c>
   10cf8:	10001f1e 	bne	r2,zero,10d78 <__addsf3+0x298>
   10cfc:	80800044 	addi	r2,r16,1
   10d00:	10803fcc 	andi	r2,r2,255
   10d04:	01000044 	movi	r4,1
   10d08:	2080430e 	bge	r4,r2,10e18 <__addsf3+0x338>
   10d0c:	1965c83a 	sub	r18,r3,r5
   10d10:	9081002c 	andhi	r2,r18,1024
   10d14:	10002426 	beq	r2,zero,10da8 <__addsf3+0x2c8>
   10d18:	28e5c83a 	sub	r18,r5,r3
   10d1c:	3823883a 	mov	r17,r7
   10d20:	003fe006 	br	10ca4 <_gp+0xffff4974>
   10d24:	0007883a 	mov	r3,zero
   10d28:	003f9206 	br	10b74 <_gp+0xffff4844>
   10d2c:	00ff0034 	movhi	r3,64512
   10d30:	18ffffc4 	addi	r3,r3,-1
   10d34:	80a1c83a 	sub	r16,r16,r2
   10d38:	90c6703a 	and	r3,r18,r3
   10d3c:	003f7f06 	br	10b3c <_gp+0xffff480c>
   10d40:	30003b1e 	bne	r6,zero,10e30 <__addsf3+0x350>
   10d44:	81000044 	addi	r4,r16,1
   10d48:	21c03fcc 	andi	r7,r4,255
   10d4c:	01800044 	movi	r6,1
   10d50:	31c0260e 	bge	r6,r7,10dec <__addsf3+0x30c>
   10d54:	01803fc4 	movi	r6,255
   10d58:	21802126 	beq	r4,r6,10de0 <__addsf3+0x300>
   10d5c:	28c7883a 	add	r3,r5,r3
   10d60:	1806d07a 	srli	r3,r3,1
   10d64:	2021883a 	mov	r16,r4
   10d68:	003f7406 	br	10b3c <_gp+0xffff480c>
   10d6c:	01003fc4 	movi	r4,255
   10d70:	813f921e 	bne	r16,r4,10bbc <_gp+0xffff488c>
   10d74:	003f7106 	br	10b3c <_gp+0xffff480c>
   10d78:	80001026 	beq	r16,zero,10dbc <__addsf3+0x2dc>
   10d7c:	01803fc4 	movi	r6,255
   10d80:	21801326 	beq	r4,r6,10dd0 <__addsf3+0x2f0>
   10d84:	0085c83a 	sub	r2,zero,r2
   10d88:	18c10034 	orhi	r3,r3,1024
   10d8c:	018006c4 	movi	r6,27
   10d90:	3080390e 	bge	r6,r2,10e78 <__addsf3+0x398>
   10d94:	00c00044 	movi	r3,1
   10d98:	28c7c83a 	sub	r3,r5,r3
   10d9c:	2021883a 	mov	r16,r4
   10da0:	3823883a 	mov	r17,r7
   10da4:	003fba06 	br	10c90 <_gp+0xffff4960>
   10da8:	903fbe1e 	bne	r18,zero,10ca4 <_gp+0xffff4974>
   10dac:	0007883a 	mov	r3,zero
   10db0:	0005883a 	mov	r2,zero
   10db4:	0021883a 	mov	r16,zero
   10db8:	003f8e06 	br	10bf4 <_gp+0xffff48c4>
   10dbc:	18000426 	beq	r3,zero,10dd0 <__addsf3+0x2f0>
   10dc0:	0084303a 	nor	r2,zero,r2
   10dc4:	103ff426 	beq	r2,zero,10d98 <_gp+0xffff4a68>
   10dc8:	01803fc4 	movi	r6,255
   10dcc:	21bfef1e 	bne	r4,r6,10d8c <_gp+0xffff4a5c>
   10dd0:	2807883a 	mov	r3,r5
   10dd4:	2021883a 	mov	r16,r4
   10dd8:	3823883a 	mov	r17,r7
   10ddc:	003f5706 	br	10b3c <_gp+0xffff480c>
   10de0:	2021883a 	mov	r16,r4
   10de4:	0007883a 	mov	r3,zero
   10de8:	003f8206 	br	10bf4 <_gp+0xffff48c4>
   10dec:	8000441e 	bne	r16,zero,10f00 <__addsf3+0x420>
   10df0:	18005926 	beq	r3,zero,10f58 <__addsf3+0x478>
   10df4:	283f5126 	beq	r5,zero,10b3c <_gp+0xffff480c>
   10df8:	1947883a 	add	r3,r3,r5
   10dfc:	1881002c 	andhi	r2,r3,1024
   10e00:	103f4e26 	beq	r2,zero,10b3c <_gp+0xffff480c>
   10e04:	00bf0034 	movhi	r2,64512
   10e08:	10bfffc4 	addi	r2,r2,-1
   10e0c:	1886703a 	and	r3,r3,r2
   10e10:	3021883a 	mov	r16,r6
   10e14:	003f4906 	br	10b3c <_gp+0xffff480c>
   10e18:	8000111e 	bne	r16,zero,10e60 <__addsf3+0x380>
   10e1c:	1800221e 	bne	r3,zero,10ea8 <__addsf3+0x3c8>
   10e20:	28004326 	beq	r5,zero,10f30 <__addsf3+0x450>
   10e24:	2807883a 	mov	r3,r5
   10e28:	3823883a 	mov	r17,r7
   10e2c:	003f4306 	br	10b3c <_gp+0xffff480c>
   10e30:	8000181e 	bne	r16,zero,10e94 <__addsf3+0x3b4>
   10e34:	18002f26 	beq	r3,zero,10ef4 <__addsf3+0x414>
   10e38:	018c303a 	nor	r6,zero,r6
   10e3c:	30000526 	beq	r6,zero,10e54 <__addsf3+0x374>
   10e40:	01c03fc4 	movi	r7,255
   10e44:	21c02b26 	beq	r4,r7,10ef4 <__addsf3+0x414>
   10e48:	01c006c4 	movi	r7,27
   10e4c:	39803b0e 	bge	r7,r6,10f3c <__addsf3+0x45c>
   10e50:	00c00044 	movi	r3,1
   10e54:	1947883a 	add	r3,r3,r5
   10e58:	2021883a 	mov	r16,r4
   10e5c:	003f7d06 	br	10c54 <_gp+0xffff4924>
   10e60:	1800181e 	bne	r3,zero,10ec4 <__addsf3+0x3e4>
   10e64:	283f5f26 	beq	r5,zero,10be4 <_gp+0xffff48b4>
   10e68:	2807883a 	mov	r3,r5
   10e6c:	3823883a 	mov	r17,r7
   10e70:	04003fc4 	movi	r16,255
   10e74:	003f3106 	br	10b3c <_gp+0xffff480c>
   10e78:	01800804 	movi	r6,32
   10e7c:	308dc83a 	sub	r6,r6,r2
   10e80:	198c983a 	sll	r6,r3,r6
   10e84:	1884d83a 	srl	r2,r3,r2
   10e88:	3006c03a 	cmpne	r3,r6,zero
   10e8c:	1886b03a 	or	r3,r3,r2
   10e90:	003fc106 	br	10d98 <_gp+0xffff4a68>
   10e94:	01c03fc4 	movi	r7,255
   10e98:	21c01626 	beq	r4,r7,10ef4 <__addsf3+0x414>
   10e9c:	018dc83a 	sub	r6,zero,r6
   10ea0:	18c10034 	orhi	r3,r3,1024
   10ea4:	003fe806 	br	10e48 <_gp+0xffff4b18>
   10ea8:	283f2426 	beq	r5,zero,10b3c <_gp+0xffff480c>
   10eac:	1945c83a 	sub	r2,r3,r5
   10eb0:	1101002c 	andhi	r4,r2,1024
   10eb4:	20002d26 	beq	r4,zero,10f6c <__addsf3+0x48c>
   10eb8:	28c7c83a 	sub	r3,r5,r3
   10ebc:	3823883a 	mov	r17,r7
   10ec0:	003f1e06 	br	10b3c <_gp+0xffff480c>
   10ec4:	28001826 	beq	r5,zero,10f28 <__addsf3+0x448>
   10ec8:	1806d0fa 	srli	r3,r3,3
   10ecc:	1880102c 	andhi	r2,r3,64
   10ed0:	10000526 	beq	r2,zero,10ee8 <__addsf3+0x408>
   10ed4:	280ad0fa 	srli	r5,r5,3
   10ed8:	2880102c 	andhi	r2,r5,64
   10edc:	1000021e 	bne	r2,zero,10ee8 <__addsf3+0x408>
   10ee0:	2807883a 	mov	r3,r5
   10ee4:	3823883a 	mov	r17,r7
   10ee8:	180690fa 	slli	r3,r3,3
   10eec:	04003fc4 	movi	r16,255
   10ef0:	003f1206 	br	10b3c <_gp+0xffff480c>
   10ef4:	2807883a 	mov	r3,r5
   10ef8:	2021883a 	mov	r16,r4
   10efc:	003f0f06 	br	10b3c <_gp+0xffff480c>
   10f00:	18001726 	beq	r3,zero,10f60 <__addsf3+0x480>
   10f04:	28000826 	beq	r5,zero,10f28 <__addsf3+0x448>
   10f08:	1806d0fa 	srli	r3,r3,3
   10f0c:	1880102c 	andhi	r2,r3,64
   10f10:	103ff526 	beq	r2,zero,10ee8 <_gp+0xffff4bb8>
   10f14:	280ad0fa 	srli	r5,r5,3
   10f18:	2880102c 	andhi	r2,r5,64
   10f1c:	103ff21e 	bne	r2,zero,10ee8 <_gp+0xffff4bb8>
   10f20:	2807883a 	mov	r3,r5
   10f24:	003ff006 	br	10ee8 <_gp+0xffff4bb8>
   10f28:	04003fc4 	movi	r16,255
   10f2c:	003f0306 	br	10b3c <_gp+0xffff480c>
   10f30:	8007883a 	mov	r3,r16
   10f34:	0005883a 	mov	r2,zero
   10f38:	003f2e06 	br	10bf4 <_gp+0xffff48c4>
   10f3c:	01c00804 	movi	r7,32
   10f40:	398fc83a 	sub	r7,r7,r6
   10f44:	19ce983a 	sll	r7,r3,r7
   10f48:	1986d83a 	srl	r3,r3,r6
   10f4c:	380cc03a 	cmpne	r6,r7,zero
   10f50:	30c6b03a 	or	r3,r6,r3
   10f54:	003fbf06 	br	10e54 <_gp+0xffff4b24>
   10f58:	2807883a 	mov	r3,r5
   10f5c:	003ef706 	br	10b3c <_gp+0xffff480c>
   10f60:	2807883a 	mov	r3,r5
   10f64:	04003fc4 	movi	r16,255
   10f68:	003ef406 	br	10b3c <_gp+0xffff480c>
   10f6c:	10000226 	beq	r2,zero,10f78 <__addsf3+0x498>
   10f70:	1007883a 	mov	r3,r2
   10f74:	003ef106 	br	10b3c <_gp+0xffff480c>
   10f78:	0007883a 	mov	r3,zero
   10f7c:	0005883a 	mov	r2,zero
   10f80:	003f1c06 	br	10bf4 <_gp+0xffff48c4>
   10f84:	00800044 	movi	r2,1
   10f88:	1887c83a 	sub	r3,r3,r2
   10f8c:	003f4006 	br	10c90 <_gp+0xffff4960>
   10f90:	01400044 	movi	r5,1
   10f94:	003f2e06 	br	10c50 <_gp+0xffff4920>

00010f98 <__gesf2>:
   10f98:	2004d5fa 	srli	r2,r4,23
   10f9c:	280cd5fa 	srli	r6,r5,23
   10fa0:	00c02034 	movhi	r3,128
   10fa4:	18ffffc4 	addi	r3,r3,-1
   10fa8:	10803fcc 	andi	r2,r2,255
   10fac:	01c03fc4 	movi	r7,255
   10fb0:	1910703a 	and	r8,r3,r4
   10fb4:	31803fcc 	andi	r6,r6,255
   10fb8:	1946703a 	and	r3,r3,r5
   10fbc:	2008d7fa 	srli	r4,r4,31
   10fc0:	280ad7fa 	srli	r5,r5,31
   10fc4:	11c01826 	beq	r2,r7,11028 <__gesf2+0x90>
   10fc8:	01c03fc4 	movi	r7,255
   10fcc:	31c00826 	beq	r6,r7,10ff0 <__gesf2+0x58>
   10fd0:	10000a1e 	bne	r2,zero,10ffc <__gesf2+0x64>
   10fd4:	400f003a 	cmpeq	r7,r8,zero
   10fd8:	3813883a 	mov	r9,r7
   10fdc:	30000926 	beq	r6,zero,11004 <__gesf2+0x6c>
   10fe0:	38001326 	beq	r7,zero,11030 <__gesf2+0x98>
   10fe4:	28000b1e 	bne	r5,zero,11014 <__gesf2+0x7c>
   10fe8:	00bfffc4 	movi	r2,-1
   10fec:	f800283a 	ret
   10ff0:	183ff726 	beq	r3,zero,10fd0 <_gp+0xffff4ca0>
   10ff4:	00bfff84 	movi	r2,-2
   10ff8:	f800283a 	ret
   10ffc:	30000c1e 	bne	r6,zero,11030 <__gesf2+0x98>
   11000:	0013883a 	mov	r9,zero
   11004:	180f003a 	cmpeq	r7,r3,zero
   11008:	4800041e 	bne	r9,zero,1101c <__gesf2+0x84>
   1100c:	38000826 	beq	r7,zero,11030 <__gesf2+0x98>
   11010:	203ff51e 	bne	r4,zero,10fe8 <_gp+0xffff4cb8>
   11014:	00800044 	movi	r2,1
   11018:	f800283a 	ret
   1101c:	383ff126 	beq	r7,zero,10fe4 <_gp+0xffff4cb4>
   11020:	0005883a 	mov	r2,zero
   11024:	f800283a 	ret
   11028:	403fe726 	beq	r8,zero,10fc8 <_gp+0xffff4c98>
   1102c:	003ff106 	br	10ff4 <_gp+0xffff4cc4>
   11030:	217ff71e 	bne	r4,r5,11010 <_gp+0xffff4ce0>
   11034:	30bff616 	blt	r6,r2,11010 <_gp+0xffff4ce0>
   11038:	11800216 	blt	r2,r6,11044 <__gesf2+0xac>
   1103c:	1a3ff436 	bltu	r3,r8,11010 <_gp+0xffff4ce0>
   11040:	40fff72e 	bgeu	r8,r3,11020 <_gp+0xffff4cf0>
   11044:	203fe826 	beq	r4,zero,10fe8 <_gp+0xffff4cb8>
   11048:	003ff206 	br	11014 <_gp+0xffff4ce4>

0001104c <__mulsf3>:
   1104c:	defff404 	addi	sp,sp,-48
   11050:	dc800415 	stw	r18,16(sp)
   11054:	2024d5fa 	srli	r18,r4,23
   11058:	dc400315 	stw	r17,12(sp)
   1105c:	2022d7fa 	srli	r17,r4,31
   11060:	dd800815 	stw	r22,32(sp)
   11064:	dd400715 	stw	r21,28(sp)
   11068:	dc000215 	stw	r16,8(sp)
   1106c:	dfc00b15 	stw	ra,44(sp)
   11070:	04002034 	movhi	r16,128
   11074:	843fffc4 	addi	r16,r16,-1
   11078:	df000a15 	stw	fp,40(sp)
   1107c:	ddc00915 	stw	r23,36(sp)
   11080:	dd000615 	stw	r20,24(sp)
   11084:	dcc00515 	stw	r19,20(sp)
   11088:	94803fcc 	andi	r18,r18,255
   1108c:	8120703a 	and	r16,r16,r4
   11090:	882d883a 	mov	r22,r17
   11094:	8d403fcc 	andi	r21,r17,255
   11098:	90005b26 	beq	r18,zero,11208 <__mulsf3+0x1bc>
   1109c:	00803fc4 	movi	r2,255
   110a0:	90802c26 	beq	r18,r2,11154 <__mulsf3+0x108>
   110a4:	84002034 	orhi	r16,r16,128
   110a8:	802090fa 	slli	r16,r16,3
   110ac:	94bfe044 	addi	r18,r18,-127
   110b0:	0039883a 	mov	fp,zero
   110b4:	002f883a 	mov	r23,zero
   110b8:	2804d5fa 	srli	r2,r5,23
   110bc:	2828d7fa 	srli	r20,r5,31
   110c0:	04c02034 	movhi	r19,128
   110c4:	9cffffc4 	addi	r19,r19,-1
   110c8:	10803fcc 	andi	r2,r2,255
   110cc:	9966703a 	and	r19,r19,r5
   110d0:	a1c03fcc 	andi	r7,r20,255
   110d4:	10002a26 	beq	r2,zero,11180 <__mulsf3+0x134>
   110d8:	00c03fc4 	movi	r3,255
   110dc:	10c04e26 	beq	r2,r3,11218 <__mulsf3+0x1cc>
   110e0:	9cc02034 	orhi	r19,r19,128
   110e4:	982690fa 	slli	r19,r19,3
   110e8:	10bfe044 	addi	r2,r2,-127
   110ec:	0009883a 	mov	r4,zero
   110f0:	2706b03a 	or	r3,r4,fp
   110f4:	18c7883a 	add	r3,r3,r3
   110f8:	18c7883a 	add	r3,r3,r3
   110fc:	01400074 	movhi	r5,1
   11100:	29444504 	addi	r5,r5,4372
   11104:	1947883a 	add	r3,r3,r5
   11108:	18c00017 	ldw	r3,0(r3)
   1110c:	a462f03a 	xor	r17,r20,r17
   11110:	1800683a 	jmp	r3
   11114:	000112c4 	movi	zero,1099
   11118:	000112b8 	rdprs	zero,zero,1098
   1111c:	000112b8 	rdprs	zero,zero,1098
   11120:	000112a8 	cmpgeui	zero,zero,1098
   11124:	00011190 	cmplti	zero,zero,1094
   11128:	00011190 	cmplti	zero,zero,1094
   1112c:	00011294 	movui	zero,1098
   11130:	000112a8 	cmpgeui	zero,zero,1098
   11134:	00011190 	cmplti	zero,zero,1094
   11138:	00011294 	movui	zero,1098
   1113c:	00011190 	cmplti	zero,zero,1094
   11140:	000112a8 	cmpgeui	zero,zero,1098
   11144:	0001118c 	andi	zero,zero,1094
   11148:	0001118c 	andi	zero,zero,1094
   1114c:	0001118c 	andi	zero,zero,1094
   11150:	000113d8 	cmpnei	zero,zero,1103
   11154:	8000371e 	bne	r16,zero,11234 <__mulsf3+0x1e8>
   11158:	2804d5fa 	srli	r2,r5,23
   1115c:	2828d7fa 	srli	r20,r5,31
   11160:	04c02034 	movhi	r19,128
   11164:	9cffffc4 	addi	r19,r19,-1
   11168:	10803fcc 	andi	r2,r2,255
   1116c:	07000204 	movi	fp,8
   11170:	05c00084 	movi	r23,2
   11174:	9966703a 	and	r19,r19,r5
   11178:	a1c03fcc 	andi	r7,r20,255
   1117c:	103fd61e 	bne	r2,zero,110d8 <_gp+0xffff4da8>
   11180:	98003a1e 	bne	r19,zero,1126c <__mulsf3+0x220>
   11184:	01000044 	movi	r4,1
   11188:	003fd906 	br	110f0 <_gp+0xffff4dc0>
   1118c:	a823883a 	mov	r17,r21
   11190:	00800084 	movi	r2,2
   11194:	b8802326 	beq	r23,r2,11224 <__mulsf3+0x1d8>
   11198:	008000c4 	movi	r2,3
   1119c:	b880bb26 	beq	r23,r2,1148c <__mulsf3+0x440>
   111a0:	00800044 	movi	r2,1
   111a4:	b880761e 	bne	r23,r2,11380 <__mulsf3+0x334>
   111a8:	882d883a 	mov	r22,r17
   111ac:	0007883a 	mov	r3,zero
   111b0:	0021883a 	mov	r16,zero
   111b4:	18c03fcc 	andi	r3,r3,255
   111b8:	180695fa 	slli	r3,r3,23
   111bc:	b5803fcc 	andi	r22,r22,255
   111c0:	b02c97fa 	slli	r22,r22,31
   111c4:	00802034 	movhi	r2,128
   111c8:	10bfffc4 	addi	r2,r2,-1
   111cc:	80a0703a 	and	r16,r16,r2
   111d0:	80c4b03a 	or	r2,r16,r3
   111d4:	1584b03a 	or	r2,r2,r22
   111d8:	dfc00b17 	ldw	ra,44(sp)
   111dc:	df000a17 	ldw	fp,40(sp)
   111e0:	ddc00917 	ldw	r23,36(sp)
   111e4:	dd800817 	ldw	r22,32(sp)
   111e8:	dd400717 	ldw	r21,28(sp)
   111ec:	dd000617 	ldw	r20,24(sp)
   111f0:	dcc00517 	ldw	r19,20(sp)
   111f4:	dc800417 	ldw	r18,16(sp)
   111f8:	dc400317 	ldw	r17,12(sp)
   111fc:	dc000217 	ldw	r16,8(sp)
   11200:	dec00c04 	addi	sp,sp,48
   11204:	f800283a 	ret
   11208:	80000d1e 	bne	r16,zero,11240 <__mulsf3+0x1f4>
   1120c:	07000104 	movi	fp,4
   11210:	05c00044 	movi	r23,1
   11214:	003fa806 	br	110b8 <_gp+0xffff4d88>
   11218:	9808c03a 	cmpne	r4,r19,zero
   1121c:	21000084 	addi	r4,r4,2
   11220:	003fb306 	br	110f0 <_gp+0xffff4dc0>
   11224:	882d883a 	mov	r22,r17
   11228:	00ffffc4 	movi	r3,-1
   1122c:	0021883a 	mov	r16,zero
   11230:	003fe006 	br	111b4 <_gp+0xffff4e84>
   11234:	07000304 	movi	fp,12
   11238:	05c000c4 	movi	r23,3
   1123c:	003f9e06 	br	110b8 <_gp+0xffff4d88>
   11240:	8009883a 	mov	r4,r16
   11244:	d9400115 	stw	r5,4(sp)
   11248:	00125dc0 	call	125dc <__clzsi2>
   1124c:	10fffec4 	addi	r3,r2,-5
   11250:	04bfe284 	movi	r18,-118
   11254:	80e0983a 	sll	r16,r16,r3
   11258:	90a5c83a 	sub	r18,r18,r2
   1125c:	0039883a 	mov	fp,zero
   11260:	002f883a 	mov	r23,zero
   11264:	d9400117 	ldw	r5,4(sp)
   11268:	003f9306 	br	110b8 <_gp+0xffff4d88>
   1126c:	9809883a 	mov	r4,r19
   11270:	d9c00115 	stw	r7,4(sp)
   11274:	00125dc0 	call	125dc <__clzsi2>
   11278:	10fffec4 	addi	r3,r2,-5
   1127c:	98e6983a 	sll	r19,r19,r3
   11280:	00ffe284 	movi	r3,-118
   11284:	1885c83a 	sub	r2,r3,r2
   11288:	0009883a 	mov	r4,zero
   1128c:	d9c00117 	ldw	r7,4(sp)
   11290:	003f9706 	br	110f0 <_gp+0xffff4dc0>
   11294:	002d883a 	mov	r22,zero
   11298:	04002034 	movhi	r16,128
   1129c:	843fffc4 	addi	r16,r16,-1
   112a0:	00ffffc4 	movi	r3,-1
   112a4:	003fc306 	br	111b4 <_gp+0xffff4e84>
   112a8:	9821883a 	mov	r16,r19
   112ac:	3823883a 	mov	r17,r7
   112b0:	202f883a 	mov	r23,r4
   112b4:	003fb606 	br	11190 <_gp+0xffff4e60>
   112b8:	9821883a 	mov	r16,r19
   112bc:	202f883a 	mov	r23,r4
   112c0:	003fb306 	br	11190 <_gp+0xffff4e60>
   112c4:	982cd43a 	srli	r22,r19,16
   112c8:	8028d43a 	srli	r20,r16,16
   112cc:	9cffffcc 	andi	r19,r19,65535
   112d0:	843fffcc 	andi	r16,r16,65535
   112d4:	9809883a 	mov	r4,r19
   112d8:	800b883a 	mov	r5,r16
   112dc:	9085883a 	add	r2,r18,r2
   112e0:	d8800015 	stw	r2,0(sp)
   112e4:	00126880 	call	12688 <__mulsi3>
   112e8:	800b883a 	mov	r5,r16
   112ec:	b009883a 	mov	r4,r22
   112f0:	1025883a 	mov	r18,r2
   112f4:	00126880 	call	12688 <__mulsi3>
   112f8:	9809883a 	mov	r4,r19
   112fc:	a00b883a 	mov	r5,r20
   11300:	1021883a 	mov	r16,r2
   11304:	00126880 	call	12688 <__mulsi3>
   11308:	b009883a 	mov	r4,r22
   1130c:	a00b883a 	mov	r5,r20
   11310:	1027883a 	mov	r19,r2
   11314:	00126880 	call	12688 <__mulsi3>
   11318:	1009883a 	mov	r4,r2
   1131c:	9004d43a 	srli	r2,r18,16
   11320:	9c07883a 	add	r3,r19,r16
   11324:	1887883a 	add	r3,r3,r2
   11328:	1cc0022e 	bgeu	r3,r19,11334 <__mulsf3+0x2e8>
   1132c:	00800074 	movhi	r2,1
   11330:	2089883a 	add	r4,r4,r2
   11334:	1804943a 	slli	r2,r3,16
   11338:	94bfffcc 	andi	r18,r18,65535
   1133c:	1806d43a 	srli	r3,r3,16
   11340:	14a5883a 	add	r18,r2,r18
   11344:	902091ba 	slli	r16,r18,6
   11348:	20c9883a 	add	r4,r4,r3
   1134c:	9024d6ba 	srli	r18,r18,26
   11350:	200891ba 	slli	r4,r4,6
   11354:	8020c03a 	cmpne	r16,r16,zero
   11358:	84a0b03a 	or	r16,r16,r18
   1135c:	8120b03a 	or	r16,r16,r4
   11360:	8082002c 	andhi	r2,r16,2048
   11364:	10000626 	beq	r2,zero,11380 <__mulsf3+0x334>
   11368:	d8c00017 	ldw	r3,0(sp)
   1136c:	8004d07a 	srli	r2,r16,1
   11370:	8400004c 	andi	r16,r16,1
   11374:	18c00044 	addi	r3,r3,1
   11378:	d8c00015 	stw	r3,0(sp)
   1137c:	80a0b03a 	or	r16,r16,r2
   11380:	d8800017 	ldw	r2,0(sp)
   11384:	10c01fc4 	addi	r3,r2,127
   11388:	00c0240e 	bge	zero,r3,1141c <__mulsf3+0x3d0>
   1138c:	808001cc 	andi	r2,r16,7
   11390:	10000426 	beq	r2,zero,113a4 <__mulsf3+0x358>
   11394:	810003cc 	andi	r4,r16,15
   11398:	00800104 	movi	r2,4
   1139c:	20800126 	beq	r4,r2,113a4 <__mulsf3+0x358>
   113a0:	80a1883a 	add	r16,r16,r2
   113a4:	8082002c 	andhi	r2,r16,2048
   113a8:	10000526 	beq	r2,zero,113c0 <__mulsf3+0x374>
   113ac:	00be0034 	movhi	r2,63488
   113b0:	10bfffc4 	addi	r2,r2,-1
   113b4:	80a0703a 	and	r16,r16,r2
   113b8:	d8800017 	ldw	r2,0(sp)
   113bc:	10c02004 	addi	r3,r2,128
   113c0:	00803f84 	movi	r2,254
   113c4:	10ff9716 	blt	r2,r3,11224 <_gp+0xffff4ef4>
   113c8:	802091ba 	slli	r16,r16,6
   113cc:	882d883a 	mov	r22,r17
   113d0:	8020d27a 	srli	r16,r16,9
   113d4:	003f7706 	br	111b4 <_gp+0xffff4e84>
   113d8:	8080102c 	andhi	r2,r16,64
   113dc:	10000926 	beq	r2,zero,11404 <__mulsf3+0x3b8>
   113e0:	9880102c 	andhi	r2,r19,64
   113e4:	1000071e 	bne	r2,zero,11404 <__mulsf3+0x3b8>
   113e8:	9c001034 	orhi	r16,r19,64
   113ec:	00802034 	movhi	r2,128
   113f0:	10bfffc4 	addi	r2,r2,-1
   113f4:	80a0703a 	and	r16,r16,r2
   113f8:	a02d883a 	mov	r22,r20
   113fc:	00ffffc4 	movi	r3,-1
   11400:	003f6c06 	br	111b4 <_gp+0xffff4e84>
   11404:	84001034 	orhi	r16,r16,64
   11408:	00802034 	movhi	r2,128
   1140c:	10bfffc4 	addi	r2,r2,-1
   11410:	80a0703a 	and	r16,r16,r2
   11414:	00ffffc4 	movi	r3,-1
   11418:	003f6606 	br	111b4 <_gp+0xffff4e84>
   1141c:	d8c00017 	ldw	r3,0(sp)
   11420:	00bfe084 	movi	r2,-126
   11424:	10c5c83a 	sub	r2,r2,r3
   11428:	00c006c4 	movi	r3,27
   1142c:	18bf5e16 	blt	r3,r2,111a8 <_gp+0xffff4e78>
   11430:	d8c00017 	ldw	r3,0(sp)
   11434:	1d402784 	addi	r21,r3,158
   11438:	856a983a 	sll	r21,r16,r21
   1143c:	80a0d83a 	srl	r16,r16,r2
   11440:	a804c03a 	cmpne	r2,r21,zero
   11444:	1404b03a 	or	r2,r2,r16
   11448:	10c001cc 	andi	r3,r2,7
   1144c:	18000426 	beq	r3,zero,11460 <__mulsf3+0x414>
   11450:	110003cc 	andi	r4,r2,15
   11454:	00c00104 	movi	r3,4
   11458:	20c00126 	beq	r4,r3,11460 <__mulsf3+0x414>
   1145c:	10c5883a 	add	r2,r2,r3
   11460:	10c1002c 	andhi	r3,r2,1024
   11464:	18000426 	beq	r3,zero,11478 <__mulsf3+0x42c>
   11468:	882d883a 	mov	r22,r17
   1146c:	00c00044 	movi	r3,1
   11470:	0021883a 	mov	r16,zero
   11474:	003f4f06 	br	111b4 <_gp+0xffff4e84>
   11478:	100491ba 	slli	r2,r2,6
   1147c:	882d883a 	mov	r22,r17
   11480:	0007883a 	mov	r3,zero
   11484:	1020d27a 	srli	r16,r2,9
   11488:	003f4a06 	br	111b4 <_gp+0xffff4e84>
   1148c:	84001034 	orhi	r16,r16,64
   11490:	00802034 	movhi	r2,128
   11494:	10bfffc4 	addi	r2,r2,-1
   11498:	80a0703a 	and	r16,r16,r2
   1149c:	882d883a 	mov	r22,r17
   114a0:	00ffffc4 	movi	r3,-1
   114a4:	003f4306 	br	111b4 <_gp+0xffff4e84>

000114a8 <__subsf3>:
   114a8:	defffc04 	addi	sp,sp,-16
   114ac:	280cd5fa 	srli	r6,r5,23
   114b0:	dc400115 	stw	r17,4(sp)
   114b4:	dc000015 	stw	r16,0(sp)
   114b8:	2022d7fa 	srli	r17,r4,31
   114bc:	2020d5fa 	srli	r16,r4,23
   114c0:	00802034 	movhi	r2,128
   114c4:	10bfffc4 	addi	r2,r2,-1
   114c8:	1106703a 	and	r3,r2,r4
   114cc:	dfc00315 	stw	ra,12(sp)
   114d0:	1144703a 	and	r2,r2,r5
   114d4:	dc800215 	stw	r18,8(sp)
   114d8:	31803fcc 	andi	r6,r6,255
   114dc:	01003fc4 	movi	r4,255
   114e0:	880f883a 	mov	r7,r17
   114e4:	84003fcc 	andi	r16,r16,255
   114e8:	8c403fcc 	andi	r17,r17,255
   114ec:	180690fa 	slli	r3,r3,3
   114f0:	280ad7fa 	srli	r5,r5,31
   114f4:	100490fa 	slli	r2,r2,3
   114f8:	31002326 	beq	r6,r4,11588 <__subsf3+0xe0>
   114fc:	2940005c 	xori	r5,r5,1
   11500:	8189c83a 	sub	r4,r16,r6
   11504:	89402426 	beq	r17,r5,11598 <__subsf3+0xf0>
   11508:	0100750e 	bge	zero,r4,116e0 <__subsf3+0x238>
   1150c:	30003c1e 	bne	r6,zero,11600 <__subsf3+0x158>
   11510:	1000681e 	bne	r2,zero,116b4 <__subsf3+0x20c>
   11514:	188001cc 	andi	r2,r3,7
   11518:	10000426 	beq	r2,zero,1152c <__subsf3+0x84>
   1151c:	190003cc 	andi	r4,r3,15
   11520:	00800104 	movi	r2,4
   11524:	20800126 	beq	r4,r2,1152c <__subsf3+0x84>
   11528:	18c00104 	addi	r3,r3,4
   1152c:	1881002c 	andhi	r2,r3,1024
   11530:	89c0004c 	andi	r7,r17,1
   11534:	10005626 	beq	r2,zero,11690 <__subsf3+0x1e8>
   11538:	84000044 	addi	r16,r16,1
   1153c:	00803fc4 	movi	r2,255
   11540:	80807226 	beq	r16,r2,1170c <__subsf3+0x264>
   11544:	180691ba 	slli	r3,r3,6
   11548:	1806d27a 	srli	r3,r3,9
   1154c:	84003fcc 	andi	r16,r16,255
   11550:	802095fa 	slli	r16,r16,23
   11554:	39c03fcc 	andi	r7,r7,255
   11558:	380e97fa 	slli	r7,r7,31
   1155c:	00802034 	movhi	r2,128
   11560:	10bfffc4 	addi	r2,r2,-1
   11564:	1884703a 	and	r2,r3,r2
   11568:	1404b03a 	or	r2,r2,r16
   1156c:	11c4b03a 	or	r2,r2,r7
   11570:	dfc00317 	ldw	ra,12(sp)
   11574:	dc800217 	ldw	r18,8(sp)
   11578:	dc400117 	ldw	r17,4(sp)
   1157c:	dc000017 	ldw	r16,0(sp)
   11580:	dec00404 	addi	sp,sp,16
   11584:	f800283a 	ret
   11588:	103fdc26 	beq	r2,zero,114fc <_gp+0xffff51cc>
   1158c:	29403fcc 	andi	r5,r5,255
   11590:	8189c83a 	sub	r4,r16,r6
   11594:	897fdc1e 	bne	r17,r5,11508 <_gp+0xffff51d8>
   11598:	0100630e 	bge	zero,r4,11728 <__subsf3+0x280>
   1159c:	30004a26 	beq	r6,zero,116c8 <__subsf3+0x220>
   115a0:	01403fc4 	movi	r5,255
   115a4:	817fdb26 	beq	r16,r5,11514 <_gp+0xffff51e4>
   115a8:	10810034 	orhi	r2,r2,1024
   115ac:	014006c4 	movi	r5,27
   115b0:	2900ed16 	blt	r5,r4,11968 <__subsf3+0x4c0>
   115b4:	01400804 	movi	r5,32
   115b8:	290bc83a 	sub	r5,r5,r4
   115bc:	114a983a 	sll	r5,r2,r5
   115c0:	1108d83a 	srl	r4,r2,r4
   115c4:	2804c03a 	cmpne	r2,r5,zero
   115c8:	1104b03a 	or	r2,r2,r4
   115cc:	1887883a 	add	r3,r3,r2
   115d0:	1881002c 	andhi	r2,r3,1024
   115d4:	103fcf26 	beq	r2,zero,11514 <_gp+0xffff51e4>
   115d8:	84000044 	addi	r16,r16,1
   115dc:	00803fc4 	movi	r2,255
   115e0:	80807726 	beq	r16,r2,117c0 <__subsf3+0x318>
   115e4:	00bf0034 	movhi	r2,64512
   115e8:	10bfffc4 	addi	r2,r2,-1
   115ec:	1884703a 	and	r2,r3,r2
   115f0:	1004d07a 	srli	r2,r2,1
   115f4:	18c0004c 	andi	r3,r3,1
   115f8:	10c6b03a 	or	r3,r2,r3
   115fc:	003fc506 	br	11514 <_gp+0xffff51e4>
   11600:	01403fc4 	movi	r5,255
   11604:	817fc326 	beq	r16,r5,11514 <_gp+0xffff51e4>
   11608:	10810034 	orhi	r2,r2,1024
   1160c:	014006c4 	movi	r5,27
   11610:	2900d316 	blt	r5,r4,11960 <__subsf3+0x4b8>
   11614:	01400804 	movi	r5,32
   11618:	290bc83a 	sub	r5,r5,r4
   1161c:	114a983a 	sll	r5,r2,r5
   11620:	1108d83a 	srl	r4,r2,r4
   11624:	2804c03a 	cmpne	r2,r5,zero
   11628:	1104b03a 	or	r2,r2,r4
   1162c:	1887c83a 	sub	r3,r3,r2
   11630:	1881002c 	andhi	r2,r3,1024
   11634:	103fb726 	beq	r2,zero,11514 <_gp+0xffff51e4>
   11638:	04810034 	movhi	r18,1024
   1163c:	94bfffc4 	addi	r18,r18,-1
   11640:	1ca4703a 	and	r18,r3,r18
   11644:	9009883a 	mov	r4,r18
   11648:	00125dc0 	call	125dc <__clzsi2>
   1164c:	10bffec4 	addi	r2,r2,-5
   11650:	90a4983a 	sll	r18,r18,r2
   11654:	14002f16 	blt	r2,r16,11714 <__subsf3+0x26c>
   11658:	1421c83a 	sub	r16,r2,r16
   1165c:	00c007c4 	movi	r3,31
   11660:	1c07c83a 	sub	r3,r3,r16
   11664:	90c6983a 	sll	r3,r18,r3
   11668:	84000044 	addi	r16,r16,1
   1166c:	9424d83a 	srl	r18,r18,r16
   11670:	1806c03a 	cmpne	r3,r3,zero
   11674:	0021883a 	mov	r16,zero
   11678:	1c86b03a 	or	r3,r3,r18
   1167c:	003fa506 	br	11514 <_gp+0xffff51e4>
   11680:	000f883a 	mov	r7,zero
   11684:	00c10034 	movhi	r3,1024
   11688:	18fffe04 	addi	r3,r3,-8
   1168c:	04003fc4 	movi	r16,255
   11690:	00803fc4 	movi	r2,255
   11694:	1806d0fa 	srli	r3,r3,3
   11698:	8080021e 	bne	r16,r2,116a4 <__subsf3+0x1fc>
   1169c:	18001b26 	beq	r3,zero,1170c <__subsf3+0x264>
   116a0:	18c01034 	orhi	r3,r3,64
   116a4:	00802034 	movhi	r2,128
   116a8:	10bfffc4 	addi	r2,r2,-1
   116ac:	1886703a 	and	r3,r3,r2
   116b0:	003fa606 	br	1154c <_gp+0xffff521c>
   116b4:	213fffc4 	addi	r4,r4,-1
   116b8:	203fdc26 	beq	r4,zero,1162c <_gp+0xffff52fc>
   116bc:	01403fc4 	movi	r5,255
   116c0:	817fd21e 	bne	r16,r5,1160c <_gp+0xffff52dc>
   116c4:	003f9306 	br	11514 <_gp+0xffff51e4>
   116c8:	103f9226 	beq	r2,zero,11514 <_gp+0xffff51e4>
   116cc:	213fffc4 	addi	r4,r4,-1
   116d0:	203fbe26 	beq	r4,zero,115cc <_gp+0xffff529c>
   116d4:	01403fc4 	movi	r5,255
   116d8:	817fb41e 	bne	r16,r5,115ac <_gp+0xffff527c>
   116dc:	003f8d06 	br	11514 <_gp+0xffff51e4>
   116e0:	20001c1e 	bne	r4,zero,11754 <__subsf3+0x2ac>
   116e4:	81000044 	addi	r4,r16,1
   116e8:	21003fcc 	andi	r4,r4,255
   116ec:	01800044 	movi	r6,1
   116f0:	3100400e 	bge	r6,r4,117f4 <__subsf3+0x34c>
   116f4:	18a5c83a 	sub	r18,r3,r2
   116f8:	9101002c 	andhi	r4,r18,1024
   116fc:	20002126 	beq	r4,zero,11784 <__subsf3+0x2dc>
   11700:	10e5c83a 	sub	r18,r2,r3
   11704:	2823883a 	mov	r17,r5
   11708:	003fce06 	br	11644 <_gp+0xffff5314>
   1170c:	0007883a 	mov	r3,zero
   11710:	003f8e06 	br	1154c <_gp+0xffff521c>
   11714:	00ff0034 	movhi	r3,64512
   11718:	18ffffc4 	addi	r3,r3,-1
   1171c:	80a1c83a 	sub	r16,r16,r2
   11720:	90c6703a 	and	r3,r18,r3
   11724:	003f7b06 	br	11514 <_gp+0xffff51e4>
   11728:	2000381e 	bne	r4,zero,1180c <__subsf3+0x364>
   1172c:	81000044 	addi	r4,r16,1
   11730:	21803fcc 	andi	r6,r4,255
   11734:	01400044 	movi	r5,1
   11738:	2980230e 	bge	r5,r6,117c8 <__subsf3+0x320>
   1173c:	01403fc4 	movi	r5,255
   11740:	21401e26 	beq	r4,r5,117bc <__subsf3+0x314>
   11744:	10c7883a 	add	r3,r2,r3
   11748:	1806d07a 	srli	r3,r3,1
   1174c:	2021883a 	mov	r16,r4
   11750:	003f7006 	br	11514 <_gp+0xffff51e4>
   11754:	80001026 	beq	r16,zero,11798 <__subsf3+0x2f0>
   11758:	01c03fc4 	movi	r7,255
   1175c:	31c01326 	beq	r6,r7,117ac <__subsf3+0x304>
   11760:	0109c83a 	sub	r4,zero,r4
   11764:	18c10034 	orhi	r3,r3,1024
   11768:	01c006c4 	movi	r7,27
   1176c:	3900390e 	bge	r7,r4,11854 <__subsf3+0x3ac>
   11770:	00c00044 	movi	r3,1
   11774:	10c7c83a 	sub	r3,r2,r3
   11778:	3021883a 	mov	r16,r6
   1177c:	2823883a 	mov	r17,r5
   11780:	003fab06 	br	11630 <_gp+0xffff5300>
   11784:	903faf1e 	bne	r18,zero,11644 <_gp+0xffff5314>
   11788:	0007883a 	mov	r3,zero
   1178c:	000f883a 	mov	r7,zero
   11790:	0021883a 	mov	r16,zero
   11794:	003fbe06 	br	11690 <_gp+0xffff5360>
   11798:	18000426 	beq	r3,zero,117ac <__subsf3+0x304>
   1179c:	0108303a 	nor	r4,zero,r4
   117a0:	203ff426 	beq	r4,zero,11774 <_gp+0xffff5444>
   117a4:	01c03fc4 	movi	r7,255
   117a8:	31ffef1e 	bne	r6,r7,11768 <_gp+0xffff5438>
   117ac:	1007883a 	mov	r3,r2
   117b0:	3021883a 	mov	r16,r6
   117b4:	2823883a 	mov	r17,r5
   117b8:	003f5606 	br	11514 <_gp+0xffff51e4>
   117bc:	2021883a 	mov	r16,r4
   117c0:	0007883a 	mov	r3,zero
   117c4:	003fb206 	br	11690 <_gp+0xffff5360>
   117c8:	8000441e 	bne	r16,zero,118dc <__subsf3+0x434>
   117cc:	18005926 	beq	r3,zero,11934 <__subsf3+0x48c>
   117d0:	103f5026 	beq	r2,zero,11514 <_gp+0xffff51e4>
   117d4:	1887883a 	add	r3,r3,r2
   117d8:	1881002c 	andhi	r2,r3,1024
   117dc:	103f4d26 	beq	r2,zero,11514 <_gp+0xffff51e4>
   117e0:	00bf0034 	movhi	r2,64512
   117e4:	10bfffc4 	addi	r2,r2,-1
   117e8:	1886703a 	and	r3,r3,r2
   117ec:	2821883a 	mov	r16,r5
   117f0:	003f4806 	br	11514 <_gp+0xffff51e4>
   117f4:	8000111e 	bne	r16,zero,1183c <__subsf3+0x394>
   117f8:	1800221e 	bne	r3,zero,11884 <__subsf3+0x3dc>
   117fc:	10004326 	beq	r2,zero,1190c <__subsf3+0x464>
   11800:	1007883a 	mov	r3,r2
   11804:	2823883a 	mov	r17,r5
   11808:	003f4206 	br	11514 <_gp+0xffff51e4>
   1180c:	8000181e 	bne	r16,zero,11870 <__subsf3+0x3c8>
   11810:	18002f26 	beq	r3,zero,118d0 <__subsf3+0x428>
   11814:	0108303a 	nor	r4,zero,r4
   11818:	20000526 	beq	r4,zero,11830 <__subsf3+0x388>
   1181c:	01403fc4 	movi	r5,255
   11820:	31402b26 	beq	r6,r5,118d0 <__subsf3+0x428>
   11824:	014006c4 	movi	r5,27
   11828:	29003b0e 	bge	r5,r4,11918 <__subsf3+0x470>
   1182c:	00c00044 	movi	r3,1
   11830:	1887883a 	add	r3,r3,r2
   11834:	3021883a 	mov	r16,r6
   11838:	003f6506 	br	115d0 <_gp+0xffff52a0>
   1183c:	1800181e 	bne	r3,zero,118a0 <__subsf3+0x3f8>
   11840:	103f8f26 	beq	r2,zero,11680 <_gp+0xffff5350>
   11844:	1007883a 	mov	r3,r2
   11848:	2823883a 	mov	r17,r5
   1184c:	04003fc4 	movi	r16,255
   11850:	003f3006 	br	11514 <_gp+0xffff51e4>
   11854:	01c00804 	movi	r7,32
   11858:	390fc83a 	sub	r7,r7,r4
   1185c:	19ce983a 	sll	r7,r3,r7
   11860:	1906d83a 	srl	r3,r3,r4
   11864:	3808c03a 	cmpne	r4,r7,zero
   11868:	20c6b03a 	or	r3,r4,r3
   1186c:	003fc106 	br	11774 <_gp+0xffff5444>
   11870:	01403fc4 	movi	r5,255
   11874:	31401626 	beq	r6,r5,118d0 <__subsf3+0x428>
   11878:	0109c83a 	sub	r4,zero,r4
   1187c:	18c10034 	orhi	r3,r3,1024
   11880:	003fe806 	br	11824 <_gp+0xffff54f4>
   11884:	103f2326 	beq	r2,zero,11514 <_gp+0xffff51e4>
   11888:	1889c83a 	sub	r4,r3,r2
   1188c:	2181002c 	andhi	r6,r4,1024
   11890:	30002d26 	beq	r6,zero,11948 <__subsf3+0x4a0>
   11894:	10c7c83a 	sub	r3,r2,r3
   11898:	2823883a 	mov	r17,r5
   1189c:	003f1d06 	br	11514 <_gp+0xffff51e4>
   118a0:	10001826 	beq	r2,zero,11904 <__subsf3+0x45c>
   118a4:	1806d0fa 	srli	r3,r3,3
   118a8:	1900102c 	andhi	r4,r3,64
   118ac:	20000526 	beq	r4,zero,118c4 <__subsf3+0x41c>
   118b0:	1004d0fa 	srli	r2,r2,3
   118b4:	1100102c 	andhi	r4,r2,64
   118b8:	2000021e 	bne	r4,zero,118c4 <__subsf3+0x41c>
   118bc:	1007883a 	mov	r3,r2
   118c0:	2823883a 	mov	r17,r5
   118c4:	180690fa 	slli	r3,r3,3
   118c8:	04003fc4 	movi	r16,255
   118cc:	003f1106 	br	11514 <_gp+0xffff51e4>
   118d0:	1007883a 	mov	r3,r2
   118d4:	3021883a 	mov	r16,r6
   118d8:	003f0e06 	br	11514 <_gp+0xffff51e4>
   118dc:	18001726 	beq	r3,zero,1193c <__subsf3+0x494>
   118e0:	10000826 	beq	r2,zero,11904 <__subsf3+0x45c>
   118e4:	1806d0fa 	srli	r3,r3,3
   118e8:	1900102c 	andhi	r4,r3,64
   118ec:	203ff526 	beq	r4,zero,118c4 <_gp+0xffff5594>
   118f0:	1004d0fa 	srli	r2,r2,3
   118f4:	1100102c 	andhi	r4,r2,64
   118f8:	203ff21e 	bne	r4,zero,118c4 <_gp+0xffff5594>
   118fc:	1007883a 	mov	r3,r2
   11900:	003ff006 	br	118c4 <_gp+0xffff5594>
   11904:	04003fc4 	movi	r16,255
   11908:	003f0206 	br	11514 <_gp+0xffff51e4>
   1190c:	8007883a 	mov	r3,r16
   11910:	000f883a 	mov	r7,zero
   11914:	003f5e06 	br	11690 <_gp+0xffff5360>
   11918:	01400804 	movi	r5,32
   1191c:	290bc83a 	sub	r5,r5,r4
   11920:	194a983a 	sll	r5,r3,r5
   11924:	1906d83a 	srl	r3,r3,r4
   11928:	2808c03a 	cmpne	r4,r5,zero
   1192c:	20c6b03a 	or	r3,r4,r3
   11930:	003fbf06 	br	11830 <_gp+0xffff5500>
   11934:	1007883a 	mov	r3,r2
   11938:	003ef606 	br	11514 <_gp+0xffff51e4>
   1193c:	1007883a 	mov	r3,r2
   11940:	04003fc4 	movi	r16,255
   11944:	003ef306 	br	11514 <_gp+0xffff51e4>
   11948:	20000226 	beq	r4,zero,11954 <__subsf3+0x4ac>
   1194c:	2007883a 	mov	r3,r4
   11950:	003ef006 	br	11514 <_gp+0xffff51e4>
   11954:	0007883a 	mov	r3,zero
   11958:	000f883a 	mov	r7,zero
   1195c:	003f4c06 	br	11690 <_gp+0xffff5360>
   11960:	00800044 	movi	r2,1
   11964:	003f3106 	br	1162c <_gp+0xffff52fc>
   11968:	00800044 	movi	r2,1
   1196c:	003f1706 	br	115cc <_gp+0xffff529c>

00011970 <__fixsfsi>:
   11970:	2006d5fa 	srli	r3,r4,23
   11974:	00802034 	movhi	r2,128
   11978:	10bfffc4 	addi	r2,r2,-1
   1197c:	01401f84 	movi	r5,126
   11980:	18c03fcc 	andi	r3,r3,255
   11984:	1104703a 	and	r2,r2,r4
   11988:	2008d7fa 	srli	r4,r4,31
   1198c:	28c00e0e 	bge	r5,r3,119c8 <__fixsfsi+0x58>
   11990:	01402744 	movi	r5,157
   11994:	28c00816 	blt	r5,r3,119b8 <__fixsfsi+0x48>
   11998:	01402544 	movi	r5,149
   1199c:	10802034 	orhi	r2,r2,128
   119a0:	28c00b0e 	bge	r5,r3,119d0 <__fixsfsi+0x60>
   119a4:	18ffda84 	addi	r3,r3,-150
   119a8:	10c4983a 	sll	r2,r2,r3
   119ac:	20000726 	beq	r4,zero,119cc <__fixsfsi+0x5c>
   119b0:	0085c83a 	sub	r2,zero,r2
   119b4:	f800283a 	ret
   119b8:	00a00034 	movhi	r2,32768
   119bc:	10bfffc4 	addi	r2,r2,-1
   119c0:	2085883a 	add	r2,r4,r2
   119c4:	f800283a 	ret
   119c8:	0005883a 	mov	r2,zero
   119cc:	f800283a 	ret
   119d0:	01402584 	movi	r5,150
   119d4:	28c7c83a 	sub	r3,r5,r3
   119d8:	10c4d83a 	srl	r2,r2,r3
   119dc:	003ff306 	br	119ac <_gp+0xffff567c>

000119e0 <__floatsisf>:
   119e0:	defffd04 	addi	sp,sp,-12
   119e4:	dc000015 	stw	r16,0(sp)
   119e8:	dfc00215 	stw	ra,8(sp)
   119ec:	dc400115 	stw	r17,4(sp)
   119f0:	2021883a 	mov	r16,r4
   119f4:	20003e26 	beq	r4,zero,11af0 <__floatsisf+0x110>
   119f8:	2022d7fa 	srli	r17,r4,31
   119fc:	88000126 	beq	r17,zero,11a04 <__floatsisf+0x24>
   11a00:	0121c83a 	sub	r16,zero,r4
   11a04:	8009883a 	mov	r4,r16
   11a08:	00125dc0 	call	125dc <__clzsi2>
   11a0c:	01002784 	movi	r4,158
   11a10:	2089c83a 	sub	r4,r4,r2
   11a14:	01402584 	movi	r5,150
   11a18:	8007883a 	mov	r3,r16
   11a1c:	29001416 	blt	r5,r4,11a70 <__floatsisf+0x90>
   11a20:	10bffe04 	addi	r2,r2,-8
   11a24:	80a0983a 	sll	r16,r16,r2
   11a28:	00802034 	movhi	r2,128
   11a2c:	10bfffc4 	addi	r2,r2,-1
   11a30:	8807883a 	mov	r3,r17
   11a34:	80a0703a 	and	r16,r16,r2
   11a38:	21003fcc 	andi	r4,r4,255
   11a3c:	200895fa 	slli	r4,r4,23
   11a40:	18c03fcc 	andi	r3,r3,255
   11a44:	180697fa 	slli	r3,r3,31
   11a48:	00802034 	movhi	r2,128
   11a4c:	10bfffc4 	addi	r2,r2,-1
   11a50:	80a0703a 	and	r16,r16,r2
   11a54:	8104b03a 	or	r2,r16,r4
   11a58:	10c4b03a 	or	r2,r2,r3
   11a5c:	dfc00217 	ldw	ra,8(sp)
   11a60:	dc400117 	ldw	r17,4(sp)
   11a64:	dc000017 	ldw	r16,0(sp)
   11a68:	dec00304 	addi	sp,sp,12
   11a6c:	f800283a 	ret
   11a70:	01402644 	movi	r5,153
   11a74:	2900070e 	bge	r5,r4,11a94 <__floatsisf+0xb4>
   11a78:	114006c4 	addi	r5,r2,27
   11a7c:	01800144 	movi	r6,5
   11a80:	814a983a 	sll	r5,r16,r5
   11a84:	308dc83a 	sub	r6,r6,r2
   11a88:	8186d83a 	srl	r3,r16,r6
   11a8c:	280ac03a 	cmpne	r5,r5,zero
   11a90:	28c6b03a 	or	r3,r5,r3
   11a94:	01400144 	movi	r5,5
   11a98:	2880020e 	bge	r5,r2,11aa4 <__floatsisf+0xc4>
   11a9c:	117ffec4 	addi	r5,r2,-5
   11aa0:	1946983a 	sll	r3,r3,r5
   11aa4:	043f0034 	movhi	r16,64512
   11aa8:	843fffc4 	addi	r16,r16,-1
   11aac:	194001cc 	andi	r5,r3,7
   11ab0:	1c20703a 	and	r16,r3,r16
   11ab4:	28000426 	beq	r5,zero,11ac8 <__floatsisf+0xe8>
   11ab8:	18c003cc 	andi	r3,r3,15
   11abc:	01400104 	movi	r5,4
   11ac0:	19400126 	beq	r3,r5,11ac8 <__floatsisf+0xe8>
   11ac4:	8161883a 	add	r16,r16,r5
   11ac8:	80c1002c 	andhi	r3,r16,1024
   11acc:	18000c26 	beq	r3,zero,11b00 <__floatsisf+0x120>
   11ad0:	010027c4 	movi	r4,159
   11ad4:	2089c83a 	sub	r4,r4,r2
   11ad8:	00803fc4 	movi	r2,255
   11adc:	20801826 	beq	r4,r2,11b40 <__floatsisf+0x160>
   11ae0:	802091ba 	slli	r16,r16,6
   11ae4:	8807883a 	mov	r3,r17
   11ae8:	8020d27a 	srli	r16,r16,9
   11aec:	003fd206 	br	11a38 <_gp+0xffff5708>
   11af0:	0007883a 	mov	r3,zero
   11af4:	0009883a 	mov	r4,zero
   11af8:	0021883a 	mov	r16,zero
   11afc:	003fce06 	br	11a38 <_gp+0xffff5708>
   11b00:	00803fc4 	movi	r2,255
   11b04:	8020d0fa 	srli	r16,r16,3
   11b08:	20800526 	beq	r4,r2,11b20 <__floatsisf+0x140>
   11b0c:	00802034 	movhi	r2,128
   11b10:	10bfffc4 	addi	r2,r2,-1
   11b14:	80a0703a 	and	r16,r16,r2
   11b18:	8807883a 	mov	r3,r17
   11b1c:	003fc606 	br	11a38 <_gp+0xffff5708>
   11b20:	80000426 	beq	r16,zero,11b34 <__floatsisf+0x154>
   11b24:	84001034 	orhi	r16,r16,64
   11b28:	00802034 	movhi	r2,128
   11b2c:	10bfffc4 	addi	r2,r2,-1
   11b30:	80a0703a 	and	r16,r16,r2
   11b34:	8807883a 	mov	r3,r17
   11b38:	013fffc4 	movi	r4,-1
   11b3c:	003fbe06 	br	11a38 <_gp+0xffff5708>
   11b40:	8807883a 	mov	r3,r17
   11b44:	013fffc4 	movi	r4,-1
   11b48:	0021883a 	mov	r16,zero
   11b4c:	003fba06 	br	11a38 <_gp+0xffff5708>

00011b50 <__muldf3>:
   11b50:	deffee04 	addi	sp,sp,-72
   11b54:	dc400915 	stw	r17,36(sp)
   11b58:	2822d53a 	srli	r17,r5,20
   11b5c:	dc000815 	stw	r16,32(sp)
   11b60:	2820d7fa 	srli	r16,r5,31
   11b64:	df001015 	stw	fp,64(sp)
   11b68:	dd000c15 	stw	r20,48(sp)
   11b6c:	dcc00b15 	stw	r19,44(sp)
   11b70:	dfc01115 	stw	ra,68(sp)
   11b74:	04c00434 	movhi	r19,16
   11b78:	9cffffc4 	addi	r19,r19,-1
   11b7c:	ddc00f15 	stw	r23,60(sp)
   11b80:	dd800e15 	stw	r22,56(sp)
   11b84:	dd400d15 	stw	r21,52(sp)
   11b88:	dc800a15 	stw	r18,40(sp)
   11b8c:	8c41ffcc 	andi	r17,r17,2047
   11b90:	2029883a 	mov	r20,r4
   11b94:	2ce6703a 	and	r19,r5,r19
   11b98:	8039883a 	mov	fp,r16
   11b9c:	82003fcc 	andi	r8,r16,255
   11ba0:	88005d26 	beq	r17,zero,11d18 <__muldf3+0x1c8>
   11ba4:	0081ffc4 	movi	r2,2047
   11ba8:	202f883a 	mov	r23,r4
   11bac:	88803326 	beq	r17,r2,11c7c <__muldf3+0x12c>
   11bb0:	98800434 	orhi	r2,r19,16
   11bb4:	100490fa 	slli	r2,r2,3
   11bb8:	2026d77a 	srli	r19,r4,29
   11bbc:	202e90fa 	slli	r23,r4,3
   11bc0:	8c7f0044 	addi	r17,r17,-1023
   11bc4:	14e6b03a 	or	r19,r2,r19
   11bc8:	002d883a 	mov	r22,zero
   11bcc:	000b883a 	mov	r5,zero
   11bd0:	3804d53a 	srli	r2,r7,20
   11bd4:	3828d7fa 	srli	r20,r7,31
   11bd8:	04800434 	movhi	r18,16
   11bdc:	94bfffc4 	addi	r18,r18,-1
   11be0:	1081ffcc 	andi	r2,r2,2047
   11be4:	302b883a 	mov	r21,r6
   11be8:	3ca4703a 	and	r18,r7,r18
   11bec:	a2403fcc 	andi	r9,r20,255
   11bf0:	10006826 	beq	r2,zero,11d94 <__muldf3+0x244>
   11bf4:	00c1ffc4 	movi	r3,2047
   11bf8:	10c06026 	beq	r2,r3,11d7c <__muldf3+0x22c>
   11bfc:	90c00434 	orhi	r3,r18,16
   11c00:	180690fa 	slli	r3,r3,3
   11c04:	3024d77a 	srli	r18,r6,29
   11c08:	302a90fa 	slli	r21,r6,3
   11c0c:	10bf0044 	addi	r2,r2,-1023
   11c10:	1ca4b03a 	or	r18,r3,r18
   11c14:	0007883a 	mov	r3,zero
   11c18:	1d88b03a 	or	r4,r3,r22
   11c1c:	2109883a 	add	r4,r4,r4
   11c20:	2109883a 	add	r4,r4,r4
   11c24:	01800074 	movhi	r6,1
   11c28:	31870f04 	addi	r6,r6,7228
   11c2c:	2189883a 	add	r4,r4,r6
   11c30:	21000017 	ldw	r4,0(r4)
   11c34:	852cf03a 	xor	r22,r16,r20
   11c38:	2000683a 	jmp	r4
   11c3c:	00011e84 	movi	zero,1146
   11c40:	00011e74 	movhi	zero,1145
   11c44:	00011e74 	movhi	zero,1145
   11c48:	00011e60 	cmpeqi	zero,zero,1145
   11c4c:	00011c9c 	xori	zero,zero,1138
   11c50:	00011c9c 	xori	zero,zero,1138
   11c54:	00011e48 	cmpgei	zero,zero,1145
   11c58:	00011e60 	cmpeqi	zero,zero,1145
   11c5c:	00011c9c 	xori	zero,zero,1138
   11c60:	00011e48 	cmpgei	zero,zero,1145
   11c64:	00011c9c 	xori	zero,zero,1138
   11c68:	00011e60 	cmpeqi	zero,zero,1145
   11c6c:	00011c98 	cmpnei	zero,zero,1138
   11c70:	00011c98 	cmpnei	zero,zero,1138
   11c74:	00011c98 	cmpnei	zero,zero,1138
   11c78:	0001219c 	xori	zero,zero,1158
   11c7c:	9904b03a 	or	r2,r19,r4
   11c80:	10006e1e 	bne	r2,zero,11e3c <__muldf3+0x2ec>
   11c84:	05800204 	movi	r22,8
   11c88:	0027883a 	mov	r19,zero
   11c8c:	002f883a 	mov	r23,zero
   11c90:	01400084 	movi	r5,2
   11c94:	003fce06 	br	11bd0 <_gp+0xffff58a0>
   11c98:	402d883a 	mov	r22,r8
   11c9c:	00800084 	movi	r2,2
   11ca0:	28805626 	beq	r5,r2,11dfc <__muldf3+0x2ac>
   11ca4:	008000c4 	movi	r2,3
   11ca8:	2881a226 	beq	r5,r2,12334 <__muldf3+0x7e4>
   11cac:	00800044 	movi	r2,1
   11cb0:	28811d1e 	bne	r5,r2,12128 <__muldf3+0x5d8>
   11cb4:	b039883a 	mov	fp,r22
   11cb8:	0005883a 	mov	r2,zero
   11cbc:	0027883a 	mov	r19,zero
   11cc0:	002f883a 	mov	r23,zero
   11cc4:	1004953a 	slli	r2,r2,20
   11cc8:	e7003fcc 	andi	fp,fp,255
   11ccc:	e03897fa 	slli	fp,fp,31
   11cd0:	00c00434 	movhi	r3,16
   11cd4:	18ffffc4 	addi	r3,r3,-1
   11cd8:	98e6703a 	and	r19,r19,r3
   11cdc:	9886b03a 	or	r3,r19,r2
   11ce0:	1f06b03a 	or	r3,r3,fp
   11ce4:	b805883a 	mov	r2,r23
   11ce8:	dfc01117 	ldw	ra,68(sp)
   11cec:	df001017 	ldw	fp,64(sp)
   11cf0:	ddc00f17 	ldw	r23,60(sp)
   11cf4:	dd800e17 	ldw	r22,56(sp)
   11cf8:	dd400d17 	ldw	r21,52(sp)
   11cfc:	dd000c17 	ldw	r20,48(sp)
   11d00:	dcc00b17 	ldw	r19,44(sp)
   11d04:	dc800a17 	ldw	r18,40(sp)
   11d08:	dc400917 	ldw	r17,36(sp)
   11d0c:	dc000817 	ldw	r16,32(sp)
   11d10:	dec01204 	addi	sp,sp,72
   11d14:	f800283a 	ret
   11d18:	9904b03a 	or	r2,r19,r4
   11d1c:	10004226 	beq	r2,zero,11e28 <__muldf3+0x2d8>
   11d20:	98013426 	beq	r19,zero,121f4 <__muldf3+0x6a4>
   11d24:	9809883a 	mov	r4,r19
   11d28:	d9800515 	stw	r6,20(sp)
   11d2c:	d9c00415 	stw	r7,16(sp)
   11d30:	da000615 	stw	r8,24(sp)
   11d34:	00125dc0 	call	125dc <__clzsi2>
   11d38:	d9800517 	ldw	r6,20(sp)
   11d3c:	d9c00417 	ldw	r7,16(sp)
   11d40:	da000617 	ldw	r8,24(sp)
   11d44:	00c009c4 	movi	r3,39
   11d48:	18812616 	blt	r3,r2,121e4 <__muldf3+0x694>
   11d4c:	00c00a04 	movi	r3,40
   11d50:	15fffe04 	addi	r23,r2,-8
   11d54:	1887c83a 	sub	r3,r3,r2
   11d58:	9de6983a 	sll	r19,r19,r23
   11d5c:	a0c6d83a 	srl	r3,r20,r3
   11d60:	a5ee983a 	sll	r23,r20,r23
   11d64:	1ce6b03a 	or	r19,r3,r19
   11d68:	047f0344 	movi	r17,-1011
   11d6c:	88a3c83a 	sub	r17,r17,r2
   11d70:	002d883a 	mov	r22,zero
   11d74:	000b883a 	mov	r5,zero
   11d78:	003f9506 	br	11bd0 <_gp+0xffff58a0>
   11d7c:	9186b03a 	or	r3,r18,r6
   11d80:	1800271e 	bne	r3,zero,11e20 <__muldf3+0x2d0>
   11d84:	0025883a 	mov	r18,zero
   11d88:	002b883a 	mov	r21,zero
   11d8c:	00c00084 	movi	r3,2
   11d90:	003fa106 	br	11c18 <_gp+0xffff58e8>
   11d94:	9186b03a 	or	r3,r18,r6
   11d98:	18001d26 	beq	r3,zero,11e10 <__muldf3+0x2c0>
   11d9c:	90012226 	beq	r18,zero,12228 <__muldf3+0x6d8>
   11da0:	9009883a 	mov	r4,r18
   11da4:	d9400415 	stw	r5,16(sp)
   11da8:	d9800515 	stw	r6,20(sp)
   11dac:	da000615 	stw	r8,24(sp)
   11db0:	da400715 	stw	r9,28(sp)
   11db4:	00125dc0 	call	125dc <__clzsi2>
   11db8:	d9400417 	ldw	r5,16(sp)
   11dbc:	d9800517 	ldw	r6,20(sp)
   11dc0:	da000617 	ldw	r8,24(sp)
   11dc4:	da400717 	ldw	r9,28(sp)
   11dc8:	00c009c4 	movi	r3,39
   11dcc:	18811216 	blt	r3,r2,12218 <__muldf3+0x6c8>
   11dd0:	01c00a04 	movi	r7,40
   11dd4:	157ffe04 	addi	r21,r2,-8
   11dd8:	388fc83a 	sub	r7,r7,r2
   11ddc:	9564983a 	sll	r18,r18,r21
   11de0:	31ced83a 	srl	r7,r6,r7
   11de4:	356a983a 	sll	r21,r6,r21
   11de8:	3ca4b03a 	or	r18,r7,r18
   11dec:	00ff0344 	movi	r3,-1011
   11df0:	1885c83a 	sub	r2,r3,r2
   11df4:	0007883a 	mov	r3,zero
   11df8:	003f8706 	br	11c18 <_gp+0xffff58e8>
   11dfc:	b039883a 	mov	fp,r22
   11e00:	0081ffc4 	movi	r2,2047
   11e04:	0027883a 	mov	r19,zero
   11e08:	002f883a 	mov	r23,zero
   11e0c:	003fad06 	br	11cc4 <_gp+0xffff5994>
   11e10:	0025883a 	mov	r18,zero
   11e14:	002b883a 	mov	r21,zero
   11e18:	00c00044 	movi	r3,1
   11e1c:	003f7e06 	br	11c18 <_gp+0xffff58e8>
   11e20:	00c000c4 	movi	r3,3
   11e24:	003f7c06 	br	11c18 <_gp+0xffff58e8>
   11e28:	05800104 	movi	r22,4
   11e2c:	0027883a 	mov	r19,zero
   11e30:	002f883a 	mov	r23,zero
   11e34:	01400044 	movi	r5,1
   11e38:	003f6506 	br	11bd0 <_gp+0xffff58a0>
   11e3c:	05800304 	movi	r22,12
   11e40:	014000c4 	movi	r5,3
   11e44:	003f6206 	br	11bd0 <_gp+0xffff58a0>
   11e48:	0039883a 	mov	fp,zero
   11e4c:	04c00434 	movhi	r19,16
   11e50:	9cffffc4 	addi	r19,r19,-1
   11e54:	05ffffc4 	movi	r23,-1
   11e58:	0081ffc4 	movi	r2,2047
   11e5c:	003f9906 	br	11cc4 <_gp+0xffff5994>
   11e60:	9027883a 	mov	r19,r18
   11e64:	a82f883a 	mov	r23,r21
   11e68:	482d883a 	mov	r22,r9
   11e6c:	180b883a 	mov	r5,r3
   11e70:	003f8a06 	br	11c9c <_gp+0xffff596c>
   11e74:	9027883a 	mov	r19,r18
   11e78:	a82f883a 	mov	r23,r21
   11e7c:	180b883a 	mov	r5,r3
   11e80:	003f8606 	br	11c9c <_gp+0xffff596c>
   11e84:	a828d43a 	srli	r20,r21,16
   11e88:	b820d43a 	srli	r16,r23,16
   11e8c:	ad7fffcc 	andi	r21,r21,65535
   11e90:	bdffffcc 	andi	r23,r23,65535
   11e94:	8885883a 	add	r2,r17,r2
   11e98:	a809883a 	mov	r4,r21
   11e9c:	b80b883a 	mov	r5,r23
   11ea0:	d8800015 	stw	r2,0(sp)
   11ea4:	00126880 	call	12688 <__mulsi3>
   11ea8:	a009883a 	mov	r4,r20
   11eac:	b80b883a 	mov	r5,r23
   11eb0:	d8800415 	stw	r2,16(sp)
   11eb4:	00126880 	call	12688 <__mulsi3>
   11eb8:	a809883a 	mov	r4,r21
   11ebc:	800b883a 	mov	r5,r16
   11ec0:	d8800615 	stw	r2,24(sp)
   11ec4:	00126880 	call	12688 <__mulsi3>
   11ec8:	a009883a 	mov	r4,r20
   11ecc:	800b883a 	mov	r5,r16
   11ed0:	1023883a 	mov	r17,r2
   11ed4:	00126880 	call	12688 <__mulsi3>
   11ed8:	d9c00417 	ldw	r7,16(sp)
   11edc:	da000617 	ldw	r8,24(sp)
   11ee0:	1039883a 	mov	fp,r2
   11ee4:	3804d43a 	srli	r2,r7,16
   11ee8:	8a07883a 	add	r3,r17,r8
   11eec:	1887883a 	add	r3,r3,r2
   11ef0:	1c40022e 	bgeu	r3,r17,11efc <__muldf3+0x3ac>
   11ef4:	00800074 	movhi	r2,1
   11ef8:	e0b9883a 	add	fp,fp,r2
   11efc:	1804943a 	slli	r2,r3,16
   11f00:	1806d43a 	srli	r3,r3,16
   11f04:	9022d43a 	srli	r17,r18,16
   11f08:	39ffffcc 	andi	r7,r7,65535
   11f0c:	94bfffcc 	andi	r18,r18,65535
   11f10:	11cf883a 	add	r7,r2,r7
   11f14:	b80b883a 	mov	r5,r23
   11f18:	9009883a 	mov	r4,r18
   11f1c:	d8c00215 	stw	r3,8(sp)
   11f20:	d9c00315 	stw	r7,12(sp)
   11f24:	00126880 	call	12688 <__mulsi3>
   11f28:	b80b883a 	mov	r5,r23
   11f2c:	8809883a 	mov	r4,r17
   11f30:	d8800415 	stw	r2,16(sp)
   11f34:	00126880 	call	12688 <__mulsi3>
   11f38:	9009883a 	mov	r4,r18
   11f3c:	800b883a 	mov	r5,r16
   11f40:	d8800715 	stw	r2,28(sp)
   11f44:	00126880 	call	12688 <__mulsi3>
   11f48:	8809883a 	mov	r4,r17
   11f4c:	800b883a 	mov	r5,r16
   11f50:	102f883a 	mov	r23,r2
   11f54:	00126880 	call	12688 <__mulsi3>
   11f58:	d9c00417 	ldw	r7,16(sp)
   11f5c:	da400717 	ldw	r9,28(sp)
   11f60:	1011883a 	mov	r8,r2
   11f64:	3804d43a 	srli	r2,r7,16
   11f68:	ba47883a 	add	r3,r23,r9
   11f6c:	1887883a 	add	r3,r3,r2
   11f70:	1dc0022e 	bgeu	r3,r23,11f7c <__muldf3+0x42c>
   11f74:	00800074 	movhi	r2,1
   11f78:	4091883a 	add	r8,r8,r2
   11f7c:	1804d43a 	srli	r2,r3,16
   11f80:	182e943a 	slli	r23,r3,16
   11f84:	9820d43a 	srli	r16,r19,16
   11f88:	9cffffcc 	andi	r19,r19,65535
   11f8c:	39ffffcc 	andi	r7,r7,65535
   11f90:	4085883a 	add	r2,r8,r2
   11f94:	a809883a 	mov	r4,r21
   11f98:	980b883a 	mov	r5,r19
   11f9c:	b9ef883a 	add	r23,r23,r7
   11fa0:	d8800115 	stw	r2,4(sp)
   11fa4:	00126880 	call	12688 <__mulsi3>
   11fa8:	a009883a 	mov	r4,r20
   11fac:	980b883a 	mov	r5,r19
   11fb0:	d8800415 	stw	r2,16(sp)
   11fb4:	00126880 	call	12688 <__mulsi3>
   11fb8:	a809883a 	mov	r4,r21
   11fbc:	800b883a 	mov	r5,r16
   11fc0:	d8800715 	stw	r2,28(sp)
   11fc4:	00126880 	call	12688 <__mulsi3>
   11fc8:	a009883a 	mov	r4,r20
   11fcc:	800b883a 	mov	r5,r16
   11fd0:	102b883a 	mov	r21,r2
   11fd4:	00126880 	call	12688 <__mulsi3>
   11fd8:	d9c00417 	ldw	r7,16(sp)
   11fdc:	da400717 	ldw	r9,28(sp)
   11fe0:	1011883a 	mov	r8,r2
   11fe4:	3804d43a 	srli	r2,r7,16
   11fe8:	aa47883a 	add	r3,r21,r9
   11fec:	1887883a 	add	r3,r3,r2
   11ff0:	1d40022e 	bgeu	r3,r21,11ffc <__muldf3+0x4ac>
   11ff4:	00800074 	movhi	r2,1
   11ff8:	4091883a 	add	r8,r8,r2
   11ffc:	1828d43a 	srli	r20,r3,16
   12000:	1806943a 	slli	r3,r3,16
   12004:	39ffffcc 	andi	r7,r7,65535
   12008:	9009883a 	mov	r4,r18
   1200c:	980b883a 	mov	r5,r19
   12010:	19eb883a 	add	r21,r3,r7
   12014:	4529883a 	add	r20,r8,r20
   12018:	00126880 	call	12688 <__mulsi3>
   1201c:	980b883a 	mov	r5,r19
   12020:	8809883a 	mov	r4,r17
   12024:	d8800415 	stw	r2,16(sp)
   12028:	00126880 	call	12688 <__mulsi3>
   1202c:	9009883a 	mov	r4,r18
   12030:	800b883a 	mov	r5,r16
   12034:	1027883a 	mov	r19,r2
   12038:	00126880 	call	12688 <__mulsi3>
   1203c:	8809883a 	mov	r4,r17
   12040:	800b883a 	mov	r5,r16
   12044:	1025883a 	mov	r18,r2
   12048:	00126880 	call	12688 <__mulsi3>
   1204c:	d9c00417 	ldw	r7,16(sp)
   12050:	1011883a 	mov	r8,r2
   12054:	94c7883a 	add	r3,r18,r19
   12058:	3804d43a 	srli	r2,r7,16
   1205c:	1887883a 	add	r3,r3,r2
   12060:	1c80022e 	bgeu	r3,r18,1206c <__muldf3+0x51c>
   12064:	00800074 	movhi	r2,1
   12068:	4091883a 	add	r8,r8,r2
   1206c:	1804943a 	slli	r2,r3,16
   12070:	d9400217 	ldw	r5,8(sp)
   12074:	39ffffcc 	andi	r7,r7,65535
   12078:	11cf883a 	add	r7,r2,r7
   1207c:	d8800117 	ldw	r2,4(sp)
   12080:	b949883a 	add	r4,r23,r5
   12084:	2739883a 	add	fp,r4,fp
   12088:	e5ef803a 	cmpltu	r23,fp,r23
   1208c:	388f883a 	add	r7,r7,r2
   12090:	3dcb883a 	add	r5,r7,r23
   12094:	a149883a 	add	r4,r20,r5
   12098:	2def803a 	cmpltu	r23,r5,r23
   1209c:	d9400117 	ldw	r5,4(sp)
   120a0:	e579883a 	add	fp,fp,r21
   120a4:	e56b803a 	cmpltu	r21,fp,r21
   120a8:	1804d43a 	srli	r2,r3,16
   120ac:	394f803a 	cmpltu	r7,r7,r5
   120b0:	2547883a 	add	r3,r4,r21
   120b4:	b9e6b03a 	or	r19,r23,r7
   120b8:	1d6b803a 	cmpltu	r21,r3,r21
   120bc:	2529803a 	cmpltu	r20,r4,r20
   120c0:	98a7883a 	add	r19,r19,r2
   120c4:	ad2ab03a 	or	r21,r21,r20
   120c8:	9d67883a 	add	r19,r19,r21
   120cc:	e02e927a 	slli	r23,fp,9
   120d0:	9a27883a 	add	r19,r19,r8
   120d4:	d9000317 	ldw	r4,12(sp)
   120d8:	1804d5fa 	srli	r2,r3,23
   120dc:	9826927a 	slli	r19,r19,9
   120e0:	e038d5fa 	srli	fp,fp,23
   120e4:	b92eb03a 	or	r23,r23,r4
   120e8:	1806927a 	slli	r3,r3,9
   120ec:	98a6b03a 	or	r19,r19,r2
   120f0:	b82ec03a 	cmpne	r23,r23,zero
   120f4:	bf2eb03a 	or	r23,r23,fp
   120f8:	9880402c 	andhi	r2,r19,256
   120fc:	b8eeb03a 	or	r23,r23,r3
   12100:	10000926 	beq	r2,zero,12128 <__muldf3+0x5d8>
   12104:	b806d07a 	srli	r3,r23,1
   12108:	bdc0004c 	andi	r23,r23,1
   1210c:	980497fa 	slli	r2,r19,31
   12110:	b8eeb03a 	or	r23,r23,r3
   12114:	d8c00017 	ldw	r3,0(sp)
   12118:	9826d07a 	srli	r19,r19,1
   1211c:	b8aeb03a 	or	r23,r23,r2
   12120:	18c00044 	addi	r3,r3,1
   12124:	d8c00015 	stw	r3,0(sp)
   12128:	d8c00017 	ldw	r3,0(sp)
   1212c:	1880ffc4 	addi	r2,r3,1023
   12130:	0080490e 	bge	zero,r2,12258 <__muldf3+0x708>
   12134:	b8c001cc 	andi	r3,r23,7
   12138:	18000726 	beq	r3,zero,12158 <__muldf3+0x608>
   1213c:	b90003cc 	andi	r4,r23,15
   12140:	00c00104 	movi	r3,4
   12144:	20c00426 	beq	r4,r3,12158 <__muldf3+0x608>
   12148:	b8c7883a 	add	r3,r23,r3
   1214c:	1def803a 	cmpltu	r23,r3,r23
   12150:	9de7883a 	add	r19,r19,r23
   12154:	182f883a 	mov	r23,r3
   12158:	98c0402c 	andhi	r3,r19,256
   1215c:	18000526 	beq	r3,zero,12174 <__muldf3+0x624>
   12160:	d8c00017 	ldw	r3,0(sp)
   12164:	00bfc034 	movhi	r2,65280
   12168:	10bfffc4 	addi	r2,r2,-1
   1216c:	98a6703a 	and	r19,r19,r2
   12170:	18810004 	addi	r2,r3,1024
   12174:	00c1ff84 	movi	r3,2046
   12178:	18bf2016 	blt	r3,r2,11dfc <_gp+0xffff5acc>
   1217c:	9806977a 	slli	r3,r19,29
   12180:	b82ed0fa 	srli	r23,r23,3
   12184:	9826927a 	slli	r19,r19,9
   12188:	1081ffcc 	andi	r2,r2,2047
   1218c:	1deeb03a 	or	r23,r3,r23
   12190:	9826d33a 	srli	r19,r19,12
   12194:	b039883a 	mov	fp,r22
   12198:	003eca06 	br	11cc4 <_gp+0xffff5994>
   1219c:	9880022c 	andhi	r2,r19,8
   121a0:	10000a26 	beq	r2,zero,121cc <__muldf3+0x67c>
   121a4:	9080022c 	andhi	r2,r18,8
   121a8:	1000081e 	bne	r2,zero,121cc <__muldf3+0x67c>
   121ac:	00800434 	movhi	r2,16
   121b0:	10bfffc4 	addi	r2,r2,-1
   121b4:	94c00234 	orhi	r19,r18,8
   121b8:	98a6703a 	and	r19,r19,r2
   121bc:	a039883a 	mov	fp,r20
   121c0:	a82f883a 	mov	r23,r21
   121c4:	0081ffc4 	movi	r2,2047
   121c8:	003ebe06 	br	11cc4 <_gp+0xffff5994>
   121cc:	00800434 	movhi	r2,16
   121d0:	10bfffc4 	addi	r2,r2,-1
   121d4:	9cc00234 	orhi	r19,r19,8
   121d8:	98a6703a 	and	r19,r19,r2
   121dc:	0081ffc4 	movi	r2,2047
   121e0:	003eb806 	br	11cc4 <_gp+0xffff5994>
   121e4:	14fff604 	addi	r19,r2,-40
   121e8:	a4e6983a 	sll	r19,r20,r19
   121ec:	002f883a 	mov	r23,zero
   121f0:	003edd06 	br	11d68 <_gp+0xffff5a38>
   121f4:	d9800515 	stw	r6,20(sp)
   121f8:	d9c00415 	stw	r7,16(sp)
   121fc:	da000615 	stw	r8,24(sp)
   12200:	00125dc0 	call	125dc <__clzsi2>
   12204:	10800804 	addi	r2,r2,32
   12208:	da000617 	ldw	r8,24(sp)
   1220c:	d9c00417 	ldw	r7,16(sp)
   12210:	d9800517 	ldw	r6,20(sp)
   12214:	003ecb06 	br	11d44 <_gp+0xffff5a14>
   12218:	14bff604 	addi	r18,r2,-40
   1221c:	34a4983a 	sll	r18,r6,r18
   12220:	002b883a 	mov	r21,zero
   12224:	003ef106 	br	11dec <_gp+0xffff5abc>
   12228:	3009883a 	mov	r4,r6
   1222c:	d9400415 	stw	r5,16(sp)
   12230:	d9800515 	stw	r6,20(sp)
   12234:	da000615 	stw	r8,24(sp)
   12238:	da400715 	stw	r9,28(sp)
   1223c:	00125dc0 	call	125dc <__clzsi2>
   12240:	10800804 	addi	r2,r2,32
   12244:	da400717 	ldw	r9,28(sp)
   12248:	da000617 	ldw	r8,24(sp)
   1224c:	d9800517 	ldw	r6,20(sp)
   12250:	d9400417 	ldw	r5,16(sp)
   12254:	003edc06 	br	11dc8 <_gp+0xffff5a98>
   12258:	d8c00017 	ldw	r3,0(sp)
   1225c:	00bf0084 	movi	r2,-1022
   12260:	10c5c83a 	sub	r2,r2,r3
   12264:	00c00e04 	movi	r3,56
   12268:	18be9216 	blt	r3,r2,11cb4 <_gp+0xffff5984>
   1226c:	00c007c4 	movi	r3,31
   12270:	18801916 	blt	r3,r2,122d8 <__muldf3+0x788>
   12274:	d9000017 	ldw	r4,0(sp)
   12278:	b88ad83a 	srl	r5,r23,r2
   1227c:	9884d83a 	srl	r2,r19,r2
   12280:	20c10784 	addi	r3,r4,1054
   12284:	98c8983a 	sll	r4,r19,r3
   12288:	b8c6983a 	sll	r3,r23,r3
   1228c:	2908b03a 	or	r4,r5,r4
   12290:	1806c03a 	cmpne	r3,r3,zero
   12294:	20c6b03a 	or	r3,r4,r3
   12298:	190001cc 	andi	r4,r3,7
   1229c:	20000726 	beq	r4,zero,122bc <__muldf3+0x76c>
   122a0:	194003cc 	andi	r5,r3,15
   122a4:	01000104 	movi	r4,4
   122a8:	29000426 	beq	r5,r4,122bc <__muldf3+0x76c>
   122ac:	1909883a 	add	r4,r3,r4
   122b0:	20c7803a 	cmpltu	r3,r4,r3
   122b4:	10c5883a 	add	r2,r2,r3
   122b8:	2007883a 	mov	r3,r4
   122bc:	1100202c 	andhi	r4,r2,128
   122c0:	20001226 	beq	r4,zero,1230c <__muldf3+0x7bc>
   122c4:	b039883a 	mov	fp,r22
   122c8:	00800044 	movi	r2,1
   122cc:	0027883a 	mov	r19,zero
   122d0:	002f883a 	mov	r23,zero
   122d4:	003e7b06 	br	11cc4 <_gp+0xffff5994>
   122d8:	d9400017 	ldw	r5,0(sp)
   122dc:	00fef884 	movi	r3,-1054
   122e0:	01000804 	movi	r4,32
   122e4:	1947c83a 	sub	r3,r3,r5
   122e8:	98c6d83a 	srl	r3,r19,r3
   122ec:	11000f26 	beq	r2,r4,1232c <__muldf3+0x7dc>
   122f0:	28810f84 	addi	r2,r5,1086
   122f4:	9884983a 	sll	r2,r19,r2
   122f8:	15c4b03a 	or	r2,r2,r23
   122fc:	1004c03a 	cmpne	r2,r2,zero
   12300:	10c6b03a 	or	r3,r2,r3
   12304:	0005883a 	mov	r2,zero
   12308:	003fe306 	br	12298 <_gp+0xffff5f68>
   1230c:	102e977a 	slli	r23,r2,29
   12310:	1806d0fa 	srli	r3,r3,3
   12314:	1004927a 	slli	r2,r2,9
   12318:	b039883a 	mov	fp,r22
   1231c:	b8eeb03a 	or	r23,r23,r3
   12320:	1026d33a 	srli	r19,r2,12
   12324:	0005883a 	mov	r2,zero
   12328:	003e6606 	br	11cc4 <_gp+0xffff5994>
   1232c:	0005883a 	mov	r2,zero
   12330:	003ff106 	br	122f8 <_gp+0xffff5fc8>
   12334:	00800434 	movhi	r2,16
   12338:	10bfffc4 	addi	r2,r2,-1
   1233c:	9cc00234 	orhi	r19,r19,8
   12340:	98a6703a 	and	r19,r19,r2
   12344:	b039883a 	mov	fp,r22
   12348:	0081ffc4 	movi	r2,2047
   1234c:	003e5d06 	br	11cc4 <_gp+0xffff5994>

00012350 <__floatsidf>:
   12350:	defffd04 	addi	sp,sp,-12
   12354:	dc000015 	stw	r16,0(sp)
   12358:	dfc00215 	stw	ra,8(sp)
   1235c:	dc400115 	stw	r17,4(sp)
   12360:	2021883a 	mov	r16,r4
   12364:	20002926 	beq	r4,zero,1240c <__floatsidf+0xbc>
   12368:	2022d7fa 	srli	r17,r4,31
   1236c:	88000126 	beq	r17,zero,12374 <__floatsidf+0x24>
   12370:	0121c83a 	sub	r16,zero,r4
   12374:	8009883a 	mov	r4,r16
   12378:	00125dc0 	call	125dc <__clzsi2>
   1237c:	01810784 	movi	r6,1054
   12380:	00c00284 	movi	r3,10
   12384:	308dc83a 	sub	r6,r6,r2
   12388:	1880150e 	bge	r3,r2,123e0 <__floatsidf+0x90>
   1238c:	113ffd44 	addi	r4,r2,-11
   12390:	8108983a 	sll	r4,r16,r4
   12394:	00800434 	movhi	r2,16
   12398:	10bfffc4 	addi	r2,r2,-1
   1239c:	3181ffcc 	andi	r6,r6,2047
   123a0:	2088703a 	and	r4,r4,r2
   123a4:	880b883a 	mov	r5,r17
   123a8:	0005883a 	mov	r2,zero
   123ac:	300c953a 	slli	r6,r6,20
   123b0:	29403fcc 	andi	r5,r5,255
   123b4:	280a97fa 	slli	r5,r5,31
   123b8:	00c00434 	movhi	r3,16
   123bc:	18ffffc4 	addi	r3,r3,-1
   123c0:	20c8703a 	and	r4,r4,r3
   123c4:	2186b03a 	or	r3,r4,r6
   123c8:	1946b03a 	or	r3,r3,r5
   123cc:	dfc00217 	ldw	ra,8(sp)
   123d0:	dc400117 	ldw	r17,4(sp)
   123d4:	dc000017 	ldw	r16,0(sp)
   123d8:	dec00304 	addi	sp,sp,12
   123dc:	f800283a 	ret
   123e0:	010002c4 	movi	r4,11
   123e4:	2089c83a 	sub	r4,r4,r2
   123e8:	8108d83a 	srl	r4,r16,r4
   123ec:	10800544 	addi	r2,r2,21
   123f0:	00c00434 	movhi	r3,16
   123f4:	18ffffc4 	addi	r3,r3,-1
   123f8:	8084983a 	sll	r2,r16,r2
   123fc:	20c8703a 	and	r4,r4,r3
   12400:	3181ffcc 	andi	r6,r6,2047
   12404:	880b883a 	mov	r5,r17
   12408:	003fe806 	br	123ac <_gp+0xffff607c>
   1240c:	000b883a 	mov	r5,zero
   12410:	000d883a 	mov	r6,zero
   12414:	0009883a 	mov	r4,zero
   12418:	0005883a 	mov	r2,zero
   1241c:	003fe306 	br	123ac <_gp+0xffff607c>

00012420 <__truncdfsf2>:
   12420:	2806d53a 	srli	r3,r5,20
   12424:	01c00434 	movhi	r7,16
   12428:	39ffffc4 	addi	r7,r7,-1
   1242c:	29ce703a 	and	r7,r5,r7
   12430:	200cd77a 	srli	r6,r4,29
   12434:	380e90fa 	slli	r7,r7,3
   12438:	18c1ffcc 	andi	r3,r3,2047
   1243c:	18800044 	addi	r2,r3,1
   12440:	398eb03a 	or	r7,r7,r6
   12444:	1081ffcc 	andi	r2,r2,2047
   12448:	01800044 	movi	r6,1
   1244c:	280ad7fa 	srli	r5,r5,31
   12450:	201090fa 	slli	r8,r4,3
   12454:	3080290e 	bge	r6,r2,124fc <__truncdfsf2+0xdc>
   12458:	19bf2004 	addi	r6,r3,-896
   1245c:	00803f84 	movi	r2,254
   12460:	11801516 	blt	r2,r6,124b8 <__truncdfsf2+0x98>
   12464:	0180360e 	bge	zero,r6,12540 <__truncdfsf2+0x120>
   12468:	200891ba 	slli	r4,r4,6
   1246c:	380e90fa 	slli	r7,r7,3
   12470:	4010d77a 	srli	r8,r8,29
   12474:	2008c03a 	cmpne	r4,r4,zero
   12478:	3906b03a 	or	r3,r7,r4
   1247c:	1a06b03a 	or	r3,r3,r8
   12480:	188001cc 	andi	r2,r3,7
   12484:	10000426 	beq	r2,zero,12498 <__truncdfsf2+0x78>
   12488:	190003cc 	andi	r4,r3,15
   1248c:	00800104 	movi	r2,4
   12490:	20800126 	beq	r4,r2,12498 <__truncdfsf2+0x78>
   12494:	18c00104 	addi	r3,r3,4
   12498:	1881002c 	andhi	r2,r3,1024
   1249c:	10002c26 	beq	r2,zero,12550 <__truncdfsf2+0x130>
   124a0:	31000044 	addi	r4,r6,1
   124a4:	00803fc4 	movi	r2,255
   124a8:	20802226 	beq	r4,r2,12534 <__truncdfsf2+0x114>
   124ac:	180691ba 	slli	r3,r3,6
   124b0:	1806d27a 	srli	r3,r3,9
   124b4:	00000806 	br	124d8 <__truncdfsf2+0xb8>
   124b8:	013fffc4 	movi	r4,-1
   124bc:	00c03fc4 	movi	r3,255
   124c0:	00803fc4 	movi	r2,255
   124c4:	18801326 	beq	r3,r2,12514 <__truncdfsf2+0xf4>
   124c8:	0007883a 	mov	r3,zero
   124cc:	00802034 	movhi	r2,128
   124d0:	10bfffc4 	addi	r2,r2,-1
   124d4:	1886703a 	and	r3,r3,r2
   124d8:	21003fcc 	andi	r4,r4,255
   124dc:	200895fa 	slli	r4,r4,23
   124e0:	280a97fa 	slli	r5,r5,31
   124e4:	00802034 	movhi	r2,128
   124e8:	10bfffc4 	addi	r2,r2,-1
   124ec:	1884703a 	and	r2,r3,r2
   124f0:	1104b03a 	or	r2,r2,r4
   124f4:	1144b03a 	or	r2,r2,r5
   124f8:	f800283a 	ret
   124fc:	1800071e 	bne	r3,zero,1251c <__truncdfsf2+0xfc>
   12500:	3a0eb03a 	or	r7,r7,r8
   12504:	3800101e 	bne	r7,zero,12548 <__truncdfsf2+0x128>
   12508:	0009883a 	mov	r4,zero
   1250c:	0007883a 	mov	r3,zero
   12510:	003feb06 	br	124c0 <_gp+0xffff6190>
   12514:	0007883a 	mov	r3,zero
   12518:	003fef06 	br	124d8 <_gp+0xffff61a8>
   1251c:	3a10b03a 	or	r8,r7,r8
   12520:	403fe526 	beq	r8,zero,124b8 <_gp+0xffff6188>
   12524:	380e90fa 	slli	r7,r7,3
   12528:	01803fc4 	movi	r6,255
   1252c:	38c08034 	orhi	r3,r7,512
   12530:	003fd306 	br	12480 <_gp+0xffff6150>
   12534:	013fffc4 	movi	r4,-1
   12538:	0007883a 	mov	r3,zero
   1253c:	003fe606 	br	124d8 <_gp+0xffff61a8>
   12540:	00bffa44 	movi	r2,-23
   12544:	3080090e 	bge	r6,r2,1256c <__truncdfsf2+0x14c>
   12548:	00c00144 	movi	r3,5
   1254c:	000d883a 	mov	r6,zero
   12550:	00803fc4 	movi	r2,255
   12554:	1806d0fa 	srli	r3,r3,3
   12558:	3009883a 	mov	r4,r6
   1255c:	30bfdb1e 	bne	r6,r2,124cc <_gp+0xffff619c>
   12560:	183fec26 	beq	r3,zero,12514 <_gp+0xffff61e4>
   12564:	18c01034 	orhi	r3,r3,64
   12568:	003fd806 	br	124cc <_gp+0xffff619c>
   1256c:	0080e784 	movi	r2,926
   12570:	10c5c83a 	sub	r2,r2,r3
   12574:	010007c4 	movi	r4,31
   12578:	39c02034 	orhi	r7,r7,128
   1257c:	20800916 	blt	r4,r2,125a4 <__truncdfsf2+0x184>
   12580:	18ff2084 	addi	r3,r3,-894
   12584:	40c8983a 	sll	r4,r8,r3
   12588:	38c6983a 	sll	r3,r7,r3
   1258c:	4084d83a 	srl	r2,r8,r2
   12590:	2008c03a 	cmpne	r4,r4,zero
   12594:	1906b03a 	or	r3,r3,r4
   12598:	1886b03a 	or	r3,r3,r2
   1259c:	000d883a 	mov	r6,zero
   125a0:	003fb706 	br	12480 <_gp+0xffff6150>
   125a4:	0100df84 	movi	r4,894
   125a8:	20c9c83a 	sub	r4,r4,r3
   125ac:	01800804 	movi	r6,32
   125b0:	3908d83a 	srl	r4,r7,r4
   125b4:	11800726 	beq	r2,r6,125d4 <__truncdfsf2+0x1b4>
   125b8:	18ff2884 	addi	r3,r3,-862
   125bc:	38c6983a 	sll	r3,r7,r3
   125c0:	1a06b03a 	or	r3,r3,r8
   125c4:	1806c03a 	cmpne	r3,r3,zero
   125c8:	1906b03a 	or	r3,r3,r4
   125cc:	000d883a 	mov	r6,zero
   125d0:	003fab06 	br	12480 <_gp+0xffff6150>
   125d4:	0007883a 	mov	r3,zero
   125d8:	003ff906 	br	125c0 <_gp+0xffff6290>

000125dc <__clzsi2>:
   125dc:	00bfffd4 	movui	r2,65535
   125e0:	11000b36 	bltu	r2,r4,12610 <__clzsi2+0x34>
   125e4:	00803fc4 	movi	r2,255
   125e8:	11001e2e 	bgeu	r2,r4,12664 <__clzsi2+0x88>
   125ec:	00c00204 	movi	r3,8
   125f0:	20c8d83a 	srl	r4,r4,r3
   125f4:	00c00074 	movhi	r3,1
   125f8:	18cf0004 	addi	r3,r3,15360
   125fc:	00800604 	movi	r2,24
   12600:	1909883a 	add	r4,r3,r4
   12604:	20c00003 	ldbu	r3,0(r4)
   12608:	10c5c83a 	sub	r2,r2,r3
   1260c:	f800283a 	ret
   12610:	00804034 	movhi	r2,256
   12614:	10bfffc4 	addi	r2,r2,-1
   12618:	11000936 	bltu	r2,r4,12640 <__clzsi2+0x64>
   1261c:	00800404 	movi	r2,16
   12620:	1007883a 	mov	r3,r2
   12624:	20c8d83a 	srl	r4,r4,r3
   12628:	00c00074 	movhi	r3,1
   1262c:	18cf0004 	addi	r3,r3,15360
   12630:	1909883a 	add	r4,r3,r4
   12634:	20c00003 	ldbu	r3,0(r4)
   12638:	10c5c83a 	sub	r2,r2,r3
   1263c:	f800283a 	ret
   12640:	00c00604 	movi	r3,24
   12644:	20c8d83a 	srl	r4,r4,r3
   12648:	00c00074 	movhi	r3,1
   1264c:	18cf0004 	addi	r3,r3,15360
   12650:	00800204 	movi	r2,8
   12654:	1909883a 	add	r4,r3,r4
   12658:	20c00003 	ldbu	r3,0(r4)
   1265c:	10c5c83a 	sub	r2,r2,r3
   12660:	f800283a 	ret
   12664:	0007883a 	mov	r3,zero
   12668:	20c8d83a 	srl	r4,r4,r3
   1266c:	00c00074 	movhi	r3,1
   12670:	18cf0004 	addi	r3,r3,15360
   12674:	00800804 	movi	r2,32
   12678:	1909883a 	add	r4,r3,r4
   1267c:	20c00003 	ldbu	r3,0(r4)
   12680:	10c5c83a 	sub	r2,r2,r3
   12684:	f800283a 	ret

00012688 <__mulsi3>:
   12688:	0005883a 	mov	r2,zero
   1268c:	20000726 	beq	r4,zero,126ac <__mulsi3+0x24>
   12690:	20c0004c 	andi	r3,r4,1
   12694:	2008d07a 	srli	r4,r4,1
   12698:	18000126 	beq	r3,zero,126a0 <__mulsi3+0x18>
   1269c:	1145883a 	add	r2,r2,r5
   126a0:	294b883a 	add	r5,r5,r5
   126a4:	203ffa1e 	bne	r4,zero,12690 <_gp+0xffff6360>
   126a8:	f800283a 	ret
   126ac:	f800283a 	ret

000126b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   126b0:	defffc04 	addi	sp,sp,-16
   126b4:	df000315 	stw	fp,12(sp)
   126b8:	df000304 	addi	fp,sp,12
   126bc:	e13ffd15 	stw	r4,-12(fp)
   126c0:	e17ffe15 	stw	r5,-8(fp)
   126c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   126c8:	e0fffe17 	ldw	r3,-8(fp)
   126cc:	e0bffd17 	ldw	r2,-12(fp)
   126d0:	18800c26 	beq	r3,r2,12704 <alt_load_section+0x54>
  {
    while( to != end )
   126d4:	00000806 	br	126f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   126d8:	e0bffe17 	ldw	r2,-8(fp)
   126dc:	10c00104 	addi	r3,r2,4
   126e0:	e0fffe15 	stw	r3,-8(fp)
   126e4:	e0fffd17 	ldw	r3,-12(fp)
   126e8:	19000104 	addi	r4,r3,4
   126ec:	e13ffd15 	stw	r4,-12(fp)
   126f0:	18c00017 	ldw	r3,0(r3)
   126f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   126f8:	e0fffe17 	ldw	r3,-8(fp)
   126fc:	e0bfff17 	ldw	r2,-4(fp)
   12700:	18bff51e 	bne	r3,r2,126d8 <_gp+0xffff63a8>
    {
      *to++ = *from++;
    }
  }
}
   12704:	e037883a 	mov	sp,fp
   12708:	df000017 	ldw	fp,0(sp)
   1270c:	dec00104 	addi	sp,sp,4
   12710:	f800283a 	ret

00012714 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12714:	defffe04 	addi	sp,sp,-8
   12718:	dfc00115 	stw	ra,4(sp)
   1271c:	df000015 	stw	fp,0(sp)
   12720:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12724:	01000074 	movhi	r4,1
   12728:	2110dc04 	addi	r4,r4,17264
   1272c:	01400074 	movhi	r5,1
   12730:	294f4e04 	addi	r5,r5,15672
   12734:	01800074 	movhi	r6,1
   12738:	3190dc04 	addi	r6,r6,17264
   1273c:	00126b00 	call	126b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12740:	01000074 	movhi	r4,1
   12744:	21000804 	addi	r4,r4,32
   12748:	01400074 	movhi	r5,1
   1274c:	29400804 	addi	r5,r5,32
   12750:	01800074 	movhi	r6,1
   12754:	31800804 	addi	r6,r6,32
   12758:	00126b00 	call	126b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1275c:	01000074 	movhi	r4,1
   12760:	210f0004 	addi	r4,r4,15360
   12764:	01400074 	movhi	r5,1
   12768:	294f0004 	addi	r5,r5,15360
   1276c:	01800074 	movhi	r6,1
   12770:	318f4e04 	addi	r6,r6,15672
   12774:	00126b00 	call	126b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12778:	0012d880 	call	12d88 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1277c:	0012f780 	call	12f78 <alt_icache_flush_all>
}
   12780:	e037883a 	mov	sp,fp
   12784:	dfc00117 	ldw	ra,4(sp)
   12788:	df000017 	ldw	fp,0(sp)
   1278c:	dec00204 	addi	sp,sp,8
   12790:	f800283a 	ret

00012794 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12794:	defffd04 	addi	sp,sp,-12
   12798:	dfc00215 	stw	ra,8(sp)
   1279c:	df000115 	stw	fp,4(sp)
   127a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   127a4:	0009883a 	mov	r4,zero
   127a8:	00128740 	call	12874 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   127ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   127b0:	00128a80 	call	128a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   127b4:	01000074 	movhi	r4,1
   127b8:	210f4004 	addi	r4,r4,15616
   127bc:	01400074 	movhi	r5,1
   127c0:	294f4004 	addi	r5,r5,15616
   127c4:	01800074 	movhi	r6,1
   127c8:	318f4004 	addi	r6,r6,15616
   127cc:	00130740 	call	13074 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   127d0:	0012ec00 	call	12ec0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   127d4:	01000074 	movhi	r4,1
   127d8:	210bc704 	addi	r4,r4,12060
   127dc:	00136a40 	call	136a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   127e0:	d1219e17 	ldw	r4,-31112(gp)
   127e4:	d0e19f17 	ldw	r3,-31108(gp)
   127e8:	d0a1a017 	ldw	r2,-31104(gp)
   127ec:	180b883a 	mov	r5,r3
   127f0:	100d883a 	mov	r6,r2
   127f4:	00108280 	call	10828 <main>
   127f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   127fc:	01000044 	movi	r4,1
   12800:	0012cb80 	call	12cb8 <close>
  exit (result);
   12804:	e13fff17 	ldw	r4,-4(fp)
   12808:	00136b80 	call	136b8 <exit>

0001280c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1280c:	defffd04 	addi	sp,sp,-12
   12810:	dfc00215 	stw	ra,8(sp)
   12814:	df000115 	stw	fp,4(sp)
   12818:	df000104 	addi	fp,sp,4
   1281c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   12820:	e13fff17 	ldw	r4,-4(fp)
   12824:	0012b140 	call	12b14 <alt_busy_sleep>
}
   12828:	e037883a 	mov	sp,fp
   1282c:	dfc00117 	ldw	ra,4(sp)
   12830:	df000017 	ldw	fp,0(sp)
   12834:	dec00204 	addi	sp,sp,8
   12838:	f800283a 	ret

0001283c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1283c:	defffd04 	addi	sp,sp,-12
   12840:	dfc00215 	stw	ra,8(sp)
   12844:	df000115 	stw	fp,4(sp)
   12848:	df000104 	addi	fp,sp,4
   1284c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12850:	e13fff17 	ldw	r4,-4(fp)
   12854:	01400074 	movhi	r5,1
   12858:	2950d604 	addi	r5,r5,17240
   1285c:	0012e200 	call	12e20 <alt_dev_llist_insert>
}
   12860:	e037883a 	mov	sp,fp
   12864:	dfc00117 	ldw	ra,4(sp)
   12868:	df000017 	ldw	fp,0(sp)
   1286c:	dec00204 	addi	sp,sp,8
   12870:	f800283a 	ret

00012874 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12874:	defffd04 	addi	sp,sp,-12
   12878:	dfc00215 	stw	ra,8(sp)
   1287c:	df000115 	stw	fp,4(sp)
   12880:	df000104 	addi	fp,sp,4
   12884:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   12888:	001340c0 	call	1340c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1288c:	00800044 	movi	r2,1
   12890:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12894:	e037883a 	mov	sp,fp
   12898:	dfc00117 	ldw	ra,4(sp)
   1289c:	df000017 	ldw	fp,0(sp)
   128a0:	dec00204 	addi	sp,sp,8
   128a4:	f800283a 	ret

000128a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   128a8:	defffe04 	addi	sp,sp,-8
   128ac:	dfc00115 	stw	ra,4(sp)
   128b0:	df000015 	stw	fp,0(sp)
   128b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   128b8:	01000074 	movhi	r4,1
   128bc:	210f4e04 	addi	r4,r4,15672
   128c0:	001283c0 	call	1283c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   128c4:	0001883a 	nop
}
   128c8:	e037883a 	mov	sp,fp
   128cc:	dfc00117 	ldw	ra,4(sp)
   128d0:	df000017 	ldw	fp,0(sp)
   128d4:	dec00204 	addi	sp,sp,8
   128d8:	f800283a 	ret

000128dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   128dc:	defffa04 	addi	sp,sp,-24
   128e0:	dfc00515 	stw	ra,20(sp)
   128e4:	df000415 	stw	fp,16(sp)
   128e8:	df000404 	addi	fp,sp,16
   128ec:	e13ffd15 	stw	r4,-12(fp)
   128f0:	e17ffe15 	stw	r5,-8(fp)
   128f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   128f8:	e0bffd17 	ldw	r2,-12(fp)
   128fc:	10800017 	ldw	r2,0(r2)
   12900:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12904:	e0bffc17 	ldw	r2,-16(fp)
   12908:	10c00a04 	addi	r3,r2,40
   1290c:	e0bffd17 	ldw	r2,-12(fp)
   12910:	10800217 	ldw	r2,8(r2)
   12914:	1809883a 	mov	r4,r3
   12918:	e17ffe17 	ldw	r5,-8(fp)
   1291c:	e1bfff17 	ldw	r6,-4(fp)
   12920:	100f883a 	mov	r7,r2
   12924:	001299c0 	call	1299c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12928:	e037883a 	mov	sp,fp
   1292c:	dfc00117 	ldw	ra,4(sp)
   12930:	df000017 	ldw	fp,0(sp)
   12934:	dec00204 	addi	sp,sp,8
   12938:	f800283a 	ret

0001293c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1293c:	defffa04 	addi	sp,sp,-24
   12940:	dfc00515 	stw	ra,20(sp)
   12944:	df000415 	stw	fp,16(sp)
   12948:	df000404 	addi	fp,sp,16
   1294c:	e13ffd15 	stw	r4,-12(fp)
   12950:	e17ffe15 	stw	r5,-8(fp)
   12954:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12958:	e0bffd17 	ldw	r2,-12(fp)
   1295c:	10800017 	ldw	r2,0(r2)
   12960:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12964:	e0bffc17 	ldw	r2,-16(fp)
   12968:	10c00a04 	addi	r3,r2,40
   1296c:	e0bffd17 	ldw	r2,-12(fp)
   12970:	10800217 	ldw	r2,8(r2)
   12974:	1809883a 	mov	r4,r3
   12978:	e17ffe17 	ldw	r5,-8(fp)
   1297c:	e1bfff17 	ldw	r6,-4(fp)
   12980:	100f883a 	mov	r7,r2
   12984:	0012a800 	call	12a80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12988:	e037883a 	mov	sp,fp
   1298c:	dfc00117 	ldw	ra,4(sp)
   12990:	df000017 	ldw	fp,0(sp)
   12994:	dec00204 	addi	sp,sp,8
   12998:	f800283a 	ret

0001299c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   1299c:	defff704 	addi	sp,sp,-36
   129a0:	df000815 	stw	fp,32(sp)
   129a4:	df000804 	addi	fp,sp,32
   129a8:	e13ffc15 	stw	r4,-16(fp)
   129ac:	e17ffd15 	stw	r5,-12(fp)
   129b0:	e1bffe15 	stw	r6,-8(fp)
   129b4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   129b8:	e0bffc17 	ldw	r2,-16(fp)
   129bc:	10800017 	ldw	r2,0(r2)
   129c0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   129c4:	e0bffd17 	ldw	r2,-12(fp)
   129c8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   129cc:	e0bffe17 	ldw	r2,-8(fp)
   129d0:	e0fffd17 	ldw	r3,-12(fp)
   129d4:	1885883a 	add	r2,r3,r2
   129d8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   129dc:	00001406 	br	12a30 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   129e0:	e0bff917 	ldw	r2,-28(fp)
   129e4:	10800037 	ldwio	r2,0(r2)
   129e8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   129ec:	e0bffb17 	ldw	r2,-20(fp)
   129f0:	10a0000c 	andi	r2,r2,32768
   129f4:	10000626 	beq	r2,zero,12a10 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   129f8:	e0bff817 	ldw	r2,-32(fp)
   129fc:	10c00044 	addi	r3,r2,1
   12a00:	e0fff815 	stw	r3,-32(fp)
   12a04:	e0fffb17 	ldw	r3,-20(fp)
   12a08:	10c00005 	stb	r3,0(r2)
   12a0c:	00000806 	br	12a30 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   12a10:	e0fff817 	ldw	r3,-32(fp)
   12a14:	e0bffd17 	ldw	r2,-12(fp)
   12a18:	18800126 	beq	r3,r2,12a20 <altera_avalon_jtag_uart_read+0x84>
      break;
   12a1c:	00000706 	br	12a3c <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   12a20:	e0bfff17 	ldw	r2,-4(fp)
   12a24:	1090000c 	andi	r2,r2,16384
   12a28:	10000126 	beq	r2,zero,12a30 <altera_avalon_jtag_uart_read+0x94>
      break;   
   12a2c:	00000306 	br	12a3c <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   12a30:	e0fff817 	ldw	r3,-32(fp)
   12a34:	e0bffa17 	ldw	r2,-24(fp)
   12a38:	18bfe936 	bltu	r3,r2,129e0 <_gp+0xffff66b0>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   12a3c:	e0fff817 	ldw	r3,-32(fp)
   12a40:	e0bffd17 	ldw	r2,-12(fp)
   12a44:	18800426 	beq	r3,r2,12a58 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   12a48:	e0fff817 	ldw	r3,-32(fp)
   12a4c:	e0bffd17 	ldw	r2,-12(fp)
   12a50:	1885c83a 	sub	r2,r3,r2
   12a54:	00000606 	br	12a70 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   12a58:	e0bfff17 	ldw	r2,-4(fp)
   12a5c:	1090000c 	andi	r2,r2,16384
   12a60:	10000226 	beq	r2,zero,12a6c <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   12a64:	00bffd44 	movi	r2,-11
   12a68:	00000106 	br	12a70 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   12a6c:	00bffec4 	movi	r2,-5
}
   12a70:	e037883a 	mov	sp,fp
   12a74:	df000017 	ldw	fp,0(sp)
   12a78:	dec00104 	addi	sp,sp,4
   12a7c:	f800283a 	ret

00012a80 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12a80:	defff904 	addi	sp,sp,-28
   12a84:	df000615 	stw	fp,24(sp)
   12a88:	df000604 	addi	fp,sp,24
   12a8c:	e13ffc15 	stw	r4,-16(fp)
   12a90:	e17ffd15 	stw	r5,-12(fp)
   12a94:	e1bffe15 	stw	r6,-8(fp)
   12a98:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   12a9c:	e0bffc17 	ldw	r2,-16(fp)
   12aa0:	10800017 	ldw	r2,0(r2)
   12aa4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   12aa8:	e0bffe17 	ldw	r2,-8(fp)
   12aac:	e0fffd17 	ldw	r3,-12(fp)
   12ab0:	1885883a 	add	r2,r3,r2
   12ab4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   12ab8:	00000e06 	br	12af4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   12abc:	e0bffa17 	ldw	r2,-24(fp)
   12ac0:	10800104 	addi	r2,r2,4
   12ac4:	10800037 	ldwio	r2,0(r2)
   12ac8:	10bfffec 	andhi	r2,r2,65535
   12acc:	10000926 	beq	r2,zero,12af4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   12ad0:	e0fffa17 	ldw	r3,-24(fp)
   12ad4:	e0bffd17 	ldw	r2,-12(fp)
   12ad8:	11000044 	addi	r4,r2,1
   12adc:	e13ffd15 	stw	r4,-12(fp)
   12ae0:	10800003 	ldbu	r2,0(r2)
   12ae4:	10803fcc 	andi	r2,r2,255
   12ae8:	1080201c 	xori	r2,r2,128
   12aec:	10bfe004 	addi	r2,r2,-128
   12af0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   12af4:	e0fffd17 	ldw	r3,-12(fp)
   12af8:	e0bffb17 	ldw	r2,-20(fp)
   12afc:	18bfef36 	bltu	r3,r2,12abc <_gp+0xffff678c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   12b00:	e0bffe17 	ldw	r2,-8(fp)
}
   12b04:	e037883a 	mov	sp,fp
   12b08:	df000017 	ldw	fp,0(sp)
   12b0c:	dec00104 	addi	sp,sp,4
   12b10:	f800283a 	ret

00012b14 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   12b14:	defffa04 	addi	sp,sp,-24
   12b18:	dfc00515 	stw	ra,20(sp)
   12b1c:	df000415 	stw	fp,16(sp)
   12b20:	df000404 	addi	fp,sp,16
   12b24:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   12b28:	00800244 	movi	r2,9
   12b2c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   12b30:	e13ffd17 	ldw	r4,-12(fp)
   12b34:	014003f4 	movhi	r5,15
   12b38:	29509004 	addi	r5,r5,16960
   12b3c:	00126880 	call	12688 <__mulsi3>
   12b40:	0101bab4 	movhi	r4,1770
   12b44:	21014004 	addi	r4,r4,1280
   12b48:	100b883a 	mov	r5,r2
   12b4c:	0013bbc0 	call	13bbc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   12b50:	01200034 	movhi	r4,32768
   12b54:	213fffc4 	addi	r4,r4,-1
   12b58:	100b883a 	mov	r5,r2
   12b5c:	0013bbc0 	call	13bbc <__udivsi3>
   12b60:	e13fff17 	ldw	r4,-4(fp)
   12b64:	100b883a 	mov	r5,r2
   12b68:	0013bbc0 	call	13bbc <__udivsi3>
   12b6c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   12b70:	e0bffe17 	ldw	r2,-8(fp)
   12b74:	10002926 	beq	r2,zero,12c1c <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   12b78:	e03ffc15 	stw	zero,-16(fp)
   12b7c:	00001606 	br	12bd8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12b80:	00a00034 	movhi	r2,32768
   12b84:	10bfffc4 	addi	r2,r2,-1
   12b88:	10bfffc4 	addi	r2,r2,-1
   12b8c:	103ffe1e 	bne	r2,zero,12b88 <_gp+0xffff6858>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   12b90:	e13ffd17 	ldw	r4,-12(fp)
   12b94:	014003f4 	movhi	r5,15
   12b98:	29509004 	addi	r5,r5,16960
   12b9c:	00126880 	call	12688 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12ba0:	0101bab4 	movhi	r4,1770
   12ba4:	21014004 	addi	r4,r4,1280
   12ba8:	100b883a 	mov	r5,r2
   12bac:	0013bbc0 	call	13bbc <__udivsi3>
   12bb0:	01200034 	movhi	r4,32768
   12bb4:	213fffc4 	addi	r4,r4,-1
   12bb8:	100b883a 	mov	r5,r2
   12bbc:	0013bbc0 	call	13bbc <__udivsi3>
   12bc0:	e0ffff17 	ldw	r3,-4(fp)
   12bc4:	1885c83a 	sub	r2,r3,r2
   12bc8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12bcc:	e0bffc17 	ldw	r2,-16(fp)
   12bd0:	10800044 	addi	r2,r2,1
   12bd4:	e0bffc15 	stw	r2,-16(fp)
   12bd8:	e0fffc17 	ldw	r3,-16(fp)
   12bdc:	e0bffe17 	ldw	r2,-8(fp)
   12be0:	18bfe716 	blt	r3,r2,12b80 <_gp+0xffff6850>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   12be4:	e13ffd17 	ldw	r4,-12(fp)
   12be8:	014003f4 	movhi	r5,15
   12bec:	29509004 	addi	r5,r5,16960
   12bf0:	00126880 	call	12688 <__mulsi3>
   12bf4:	0101bab4 	movhi	r4,1770
   12bf8:	21014004 	addi	r4,r4,1280
   12bfc:	100b883a 	mov	r5,r2
   12c00:	0013bbc0 	call	13bbc <__udivsi3>
   12c04:	1009883a 	mov	r4,r2
   12c08:	e17fff17 	ldw	r5,-4(fp)
   12c0c:	00126880 	call	12688 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12c10:	10bfffc4 	addi	r2,r2,-1
   12c14:	103ffe1e 	bne	r2,zero,12c10 <_gp+0xffff68e0>
   12c18:	00000d06 	br	12c50 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   12c1c:	e13ffd17 	ldw	r4,-12(fp)
   12c20:	014003f4 	movhi	r5,15
   12c24:	29509004 	addi	r5,r5,16960
   12c28:	00126880 	call	12688 <__mulsi3>
   12c2c:	0101bab4 	movhi	r4,1770
   12c30:	21014004 	addi	r4,r4,1280
   12c34:	100b883a 	mov	r5,r2
   12c38:	0013bbc0 	call	13bbc <__udivsi3>
   12c3c:	1009883a 	mov	r4,r2
   12c40:	e17fff17 	ldw	r5,-4(fp)
   12c44:	00126880 	call	12688 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12c48:	10bfffc4 	addi	r2,r2,-1
   12c4c:	00bffe16 	blt	zero,r2,12c48 <_gp+0xffff6918>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   12c50:	0005883a 	mov	r2,zero
}
   12c54:	e037883a 	mov	sp,fp
   12c58:	dfc00117 	ldw	ra,4(sp)
   12c5c:	df000017 	ldw	fp,0(sp)
   12c60:	dec00204 	addi	sp,sp,8
   12c64:	f800283a 	ret

00012c68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12c68:	defffe04 	addi	sp,sp,-8
   12c6c:	dfc00115 	stw	ra,4(sp)
   12c70:	df000015 	stw	fp,0(sp)
   12c74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12c78:	00800074 	movhi	r2,1
   12c7c:	1090d904 	addi	r2,r2,17252
   12c80:	10800017 	ldw	r2,0(r2)
   12c84:	10000526 	beq	r2,zero,12c9c <alt_get_errno+0x34>
   12c88:	00800074 	movhi	r2,1
   12c8c:	1090d904 	addi	r2,r2,17252
   12c90:	10800017 	ldw	r2,0(r2)
   12c94:	103ee83a 	callr	r2
   12c98:	00000206 	br	12ca4 <alt_get_errno+0x3c>
   12c9c:	00800074 	movhi	r2,1
   12ca0:	10926d04 	addi	r2,r2,18868
}
   12ca4:	e037883a 	mov	sp,fp
   12ca8:	dfc00117 	ldw	ra,4(sp)
   12cac:	df000017 	ldw	fp,0(sp)
   12cb0:	dec00204 	addi	sp,sp,8
   12cb4:	f800283a 	ret

00012cb8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12cb8:	defffb04 	addi	sp,sp,-20
   12cbc:	dfc00415 	stw	ra,16(sp)
   12cc0:	df000315 	stw	fp,12(sp)
   12cc4:	df000304 	addi	fp,sp,12
   12cc8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12ccc:	e0bfff17 	ldw	r2,-4(fp)
   12cd0:	10000816 	blt	r2,zero,12cf4 <close+0x3c>
   12cd4:	e13fff17 	ldw	r4,-4(fp)
   12cd8:	01400304 	movi	r5,12
   12cdc:	00126880 	call	12688 <__mulsi3>
   12ce0:	1007883a 	mov	r3,r2
   12ce4:	00800074 	movhi	r2,1
   12ce8:	108f6304 	addi	r2,r2,15756
   12cec:	1885883a 	add	r2,r3,r2
   12cf0:	00000106 	br	12cf8 <close+0x40>
   12cf4:	0005883a 	mov	r2,zero
   12cf8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12cfc:	e0bffd17 	ldw	r2,-12(fp)
   12d00:	10001826 	beq	r2,zero,12d64 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12d04:	e0bffd17 	ldw	r2,-12(fp)
   12d08:	10800017 	ldw	r2,0(r2)
   12d0c:	10800417 	ldw	r2,16(r2)
   12d10:	10000626 	beq	r2,zero,12d2c <close+0x74>
   12d14:	e0bffd17 	ldw	r2,-12(fp)
   12d18:	10800017 	ldw	r2,0(r2)
   12d1c:	10800417 	ldw	r2,16(r2)
   12d20:	e13ffd17 	ldw	r4,-12(fp)
   12d24:	103ee83a 	callr	r2
   12d28:	00000106 	br	12d30 <close+0x78>
   12d2c:	0005883a 	mov	r2,zero
   12d30:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12d34:	e13fff17 	ldw	r4,-4(fp)
   12d38:	001338c0 	call	1338c <alt_release_fd>
    if (rval < 0)
   12d3c:	e0bffe17 	ldw	r2,-8(fp)
   12d40:	1000060e 	bge	r2,zero,12d5c <close+0xa4>
    {
      ALT_ERRNO = -rval;
   12d44:	0012c680 	call	12c68 <alt_get_errno>
   12d48:	e0fffe17 	ldw	r3,-8(fp)
   12d4c:	00c7c83a 	sub	r3,zero,r3
   12d50:	10c00015 	stw	r3,0(r2)
      return -1;
   12d54:	00bfffc4 	movi	r2,-1
   12d58:	00000606 	br	12d74 <close+0xbc>
    }
    return 0;
   12d5c:	0005883a 	mov	r2,zero
   12d60:	00000406 	br	12d74 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12d64:	0012c680 	call	12c68 <alt_get_errno>
   12d68:	00c01444 	movi	r3,81
   12d6c:	10c00015 	stw	r3,0(r2)
    return -1;
   12d70:	00bfffc4 	movi	r2,-1
  }
}
   12d74:	e037883a 	mov	sp,fp
   12d78:	dfc00117 	ldw	ra,4(sp)
   12d7c:	df000017 	ldw	fp,0(sp)
   12d80:	dec00204 	addi	sp,sp,8
   12d84:	f800283a 	ret

00012d88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12d88:	deffff04 	addi	sp,sp,-4
   12d8c:	df000015 	stw	fp,0(sp)
   12d90:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12d94:	e037883a 	mov	sp,fp
   12d98:	df000017 	ldw	fp,0(sp)
   12d9c:	dec00104 	addi	sp,sp,4
   12da0:	f800283a 	ret

00012da4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12da4:	defffc04 	addi	sp,sp,-16
   12da8:	df000315 	stw	fp,12(sp)
   12dac:	df000304 	addi	fp,sp,12
   12db0:	e13ffd15 	stw	r4,-12(fp)
   12db4:	e17ffe15 	stw	r5,-8(fp)
   12db8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12dbc:	e0bfff17 	ldw	r2,-4(fp)
}
   12dc0:	e037883a 	mov	sp,fp
   12dc4:	df000017 	ldw	fp,0(sp)
   12dc8:	dec00104 	addi	sp,sp,4
   12dcc:	f800283a 	ret

00012dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12dd0:	defffe04 	addi	sp,sp,-8
   12dd4:	dfc00115 	stw	ra,4(sp)
   12dd8:	df000015 	stw	fp,0(sp)
   12ddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12de0:	00800074 	movhi	r2,1
   12de4:	1090d904 	addi	r2,r2,17252
   12de8:	10800017 	ldw	r2,0(r2)
   12dec:	10000526 	beq	r2,zero,12e04 <alt_get_errno+0x34>
   12df0:	00800074 	movhi	r2,1
   12df4:	1090d904 	addi	r2,r2,17252
   12df8:	10800017 	ldw	r2,0(r2)
   12dfc:	103ee83a 	callr	r2
   12e00:	00000206 	br	12e0c <alt_get_errno+0x3c>
   12e04:	00800074 	movhi	r2,1
   12e08:	10926d04 	addi	r2,r2,18868
}
   12e0c:	e037883a 	mov	sp,fp
   12e10:	dfc00117 	ldw	ra,4(sp)
   12e14:	df000017 	ldw	fp,0(sp)
   12e18:	dec00204 	addi	sp,sp,8
   12e1c:	f800283a 	ret

00012e20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12e20:	defffa04 	addi	sp,sp,-24
   12e24:	dfc00515 	stw	ra,20(sp)
   12e28:	df000415 	stw	fp,16(sp)
   12e2c:	df000404 	addi	fp,sp,16
   12e30:	e13ffe15 	stw	r4,-8(fp)
   12e34:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12e38:	e0bffe17 	ldw	r2,-8(fp)
   12e3c:	10000326 	beq	r2,zero,12e4c <alt_dev_llist_insert+0x2c>
   12e40:	e0bffe17 	ldw	r2,-8(fp)
   12e44:	10800217 	ldw	r2,8(r2)
   12e48:	1000051e 	bne	r2,zero,12e60 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   12e4c:	0012dd00 	call	12dd0 <alt_get_errno>
   12e50:	00c00584 	movi	r3,22
   12e54:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12e58:	00bffa84 	movi	r2,-22
   12e5c:	00001306 	br	12eac <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12e60:	e0bffe17 	ldw	r2,-8(fp)
   12e64:	e0ffff17 	ldw	r3,-4(fp)
   12e68:	e0fffc15 	stw	r3,-16(fp)
   12e6c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12e70:	e0bffd17 	ldw	r2,-12(fp)
   12e74:	e0fffc17 	ldw	r3,-16(fp)
   12e78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12e7c:	e0bffc17 	ldw	r2,-16(fp)
   12e80:	10c00017 	ldw	r3,0(r2)
   12e84:	e0bffd17 	ldw	r2,-12(fp)
   12e88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12e8c:	e0bffc17 	ldw	r2,-16(fp)
   12e90:	10800017 	ldw	r2,0(r2)
   12e94:	e0fffd17 	ldw	r3,-12(fp)
   12e98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12e9c:	e0bffc17 	ldw	r2,-16(fp)
   12ea0:	e0fffd17 	ldw	r3,-12(fp)
   12ea4:	10c00015 	stw	r3,0(r2)

  return 0;  
   12ea8:	0005883a 	mov	r2,zero
}
   12eac:	e037883a 	mov	sp,fp
   12eb0:	dfc00117 	ldw	ra,4(sp)
   12eb4:	df000017 	ldw	fp,0(sp)
   12eb8:	dec00204 	addi	sp,sp,8
   12ebc:	f800283a 	ret

00012ec0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12ec0:	defffd04 	addi	sp,sp,-12
   12ec4:	dfc00215 	stw	ra,8(sp)
   12ec8:	df000115 	stw	fp,4(sp)
   12ecc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12ed0:	00800074 	movhi	r2,1
   12ed4:	108eff04 	addi	r2,r2,15356
   12ed8:	e0bfff15 	stw	r2,-4(fp)
   12edc:	00000606 	br	12ef8 <_do_ctors+0x38>
        (*ctor) (); 
   12ee0:	e0bfff17 	ldw	r2,-4(fp)
   12ee4:	10800017 	ldw	r2,0(r2)
   12ee8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12eec:	e0bfff17 	ldw	r2,-4(fp)
   12ef0:	10bfff04 	addi	r2,r2,-4
   12ef4:	e0bfff15 	stw	r2,-4(fp)
   12ef8:	e0ffff17 	ldw	r3,-4(fp)
   12efc:	00800074 	movhi	r2,1
   12f00:	108f0004 	addi	r2,r2,15360
   12f04:	18bff62e 	bgeu	r3,r2,12ee0 <_gp+0xffff6bb0>
        (*ctor) (); 
}
   12f08:	e037883a 	mov	sp,fp
   12f0c:	dfc00117 	ldw	ra,4(sp)
   12f10:	df000017 	ldw	fp,0(sp)
   12f14:	dec00204 	addi	sp,sp,8
   12f18:	f800283a 	ret

00012f1c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   12f1c:	defffd04 	addi	sp,sp,-12
   12f20:	dfc00215 	stw	ra,8(sp)
   12f24:	df000115 	stw	fp,4(sp)
   12f28:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12f2c:	00800074 	movhi	r2,1
   12f30:	108eff04 	addi	r2,r2,15356
   12f34:	e0bfff15 	stw	r2,-4(fp)
   12f38:	00000606 	br	12f54 <_do_dtors+0x38>
        (*dtor) (); 
   12f3c:	e0bfff17 	ldw	r2,-4(fp)
   12f40:	10800017 	ldw	r2,0(r2)
   12f44:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12f48:	e0bfff17 	ldw	r2,-4(fp)
   12f4c:	10bfff04 	addi	r2,r2,-4
   12f50:	e0bfff15 	stw	r2,-4(fp)
   12f54:	e0ffff17 	ldw	r3,-4(fp)
   12f58:	00800074 	movhi	r2,1
   12f5c:	108f0004 	addi	r2,r2,15360
   12f60:	18bff62e 	bgeu	r3,r2,12f3c <_gp+0xffff6c0c>
        (*dtor) (); 
}
   12f64:	e037883a 	mov	sp,fp
   12f68:	dfc00117 	ldw	ra,4(sp)
   12f6c:	df000017 	ldw	fp,0(sp)
   12f70:	dec00204 	addi	sp,sp,8
   12f74:	f800283a 	ret

00012f78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12f78:	deffff04 	addi	sp,sp,-4
   12f7c:	df000015 	stw	fp,0(sp)
   12f80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   12f84:	e037883a 	mov	sp,fp
   12f88:	df000017 	ldw	fp,0(sp)
   12f8c:	dec00104 	addi	sp,sp,4
   12f90:	f800283a 	ret

00012f94 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12f94:	defff804 	addi	sp,sp,-32
   12f98:	dfc00715 	stw	ra,28(sp)
   12f9c:	df000615 	stw	fp,24(sp)
   12fa0:	dc000515 	stw	r16,20(sp)
   12fa4:	df000604 	addi	fp,sp,24
   12fa8:	e13ffb15 	stw	r4,-20(fp)
   12fac:	e17ffc15 	stw	r5,-16(fp)
   12fb0:	e1bffd15 	stw	r6,-12(fp)
   12fb4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   12fb8:	e13ffc17 	ldw	r4,-16(fp)
   12fbc:	e17ffd17 	ldw	r5,-12(fp)
   12fc0:	e1bffe17 	ldw	r6,-8(fp)
   12fc4:	00132300 	call	13230 <open>
   12fc8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   12fcc:	e0bffa17 	ldw	r2,-24(fp)
   12fd0:	10002216 	blt	r2,zero,1305c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   12fd4:	04000074 	movhi	r16,1
   12fd8:	840f6304 	addi	r16,r16,15756
   12fdc:	e0bffa17 	ldw	r2,-24(fp)
   12fe0:	1009883a 	mov	r4,r2
   12fe4:	01400304 	movi	r5,12
   12fe8:	00126880 	call	12688 <__mulsi3>
   12fec:	8085883a 	add	r2,r16,r2
   12ff0:	10c00017 	ldw	r3,0(r2)
   12ff4:	e0bffb17 	ldw	r2,-20(fp)
   12ff8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12ffc:	04000074 	movhi	r16,1
   13000:	840f6304 	addi	r16,r16,15756
   13004:	e0bffa17 	ldw	r2,-24(fp)
   13008:	1009883a 	mov	r4,r2
   1300c:	01400304 	movi	r5,12
   13010:	00126880 	call	12688 <__mulsi3>
   13014:	8085883a 	add	r2,r16,r2
   13018:	10800104 	addi	r2,r2,4
   1301c:	10c00017 	ldw	r3,0(r2)
   13020:	e0bffb17 	ldw	r2,-20(fp)
   13024:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13028:	04000074 	movhi	r16,1
   1302c:	840f6304 	addi	r16,r16,15756
   13030:	e0bffa17 	ldw	r2,-24(fp)
   13034:	1009883a 	mov	r4,r2
   13038:	01400304 	movi	r5,12
   1303c:	00126880 	call	12688 <__mulsi3>
   13040:	8085883a 	add	r2,r16,r2
   13044:	10800204 	addi	r2,r2,8
   13048:	10c00017 	ldw	r3,0(r2)
   1304c:	e0bffb17 	ldw	r2,-20(fp)
   13050:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13054:	e13ffa17 	ldw	r4,-24(fp)
   13058:	001338c0 	call	1338c <alt_release_fd>
  }
} 
   1305c:	e6ffff04 	addi	sp,fp,-4
   13060:	dfc00217 	ldw	ra,8(sp)
   13064:	df000117 	ldw	fp,4(sp)
   13068:	dc000017 	ldw	r16,0(sp)
   1306c:	dec00304 	addi	sp,sp,12
   13070:	f800283a 	ret

00013074 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13074:	defffb04 	addi	sp,sp,-20
   13078:	dfc00415 	stw	ra,16(sp)
   1307c:	df000315 	stw	fp,12(sp)
   13080:	df000304 	addi	fp,sp,12
   13084:	e13ffd15 	stw	r4,-12(fp)
   13088:	e17ffe15 	stw	r5,-8(fp)
   1308c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13090:	01000074 	movhi	r4,1
   13094:	210f6604 	addi	r4,r4,15768
   13098:	e17ffd17 	ldw	r5,-12(fp)
   1309c:	01800044 	movi	r6,1
   130a0:	01c07fc4 	movi	r7,511
   130a4:	0012f940 	call	12f94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   130a8:	01000074 	movhi	r4,1
   130ac:	210f6304 	addi	r4,r4,15756
   130b0:	e17ffe17 	ldw	r5,-8(fp)
   130b4:	000d883a 	mov	r6,zero
   130b8:	01c07fc4 	movi	r7,511
   130bc:	0012f940 	call	12f94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   130c0:	01000074 	movhi	r4,1
   130c4:	210f6904 	addi	r4,r4,15780
   130c8:	e17fff17 	ldw	r5,-4(fp)
   130cc:	01800044 	movi	r6,1
   130d0:	01c07fc4 	movi	r7,511
   130d4:	0012f940 	call	12f94 <alt_open_fd>
}  
   130d8:	e037883a 	mov	sp,fp
   130dc:	dfc00117 	ldw	ra,4(sp)
   130e0:	df000017 	ldw	fp,0(sp)
   130e4:	dec00204 	addi	sp,sp,8
   130e8:	f800283a 	ret

000130ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   130ec:	defffe04 	addi	sp,sp,-8
   130f0:	dfc00115 	stw	ra,4(sp)
   130f4:	df000015 	stw	fp,0(sp)
   130f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   130fc:	00800074 	movhi	r2,1
   13100:	1090d904 	addi	r2,r2,17252
   13104:	10800017 	ldw	r2,0(r2)
   13108:	10000526 	beq	r2,zero,13120 <alt_get_errno+0x34>
   1310c:	00800074 	movhi	r2,1
   13110:	1090d904 	addi	r2,r2,17252
   13114:	10800017 	ldw	r2,0(r2)
   13118:	103ee83a 	callr	r2
   1311c:	00000206 	br	13128 <alt_get_errno+0x3c>
   13120:	00800074 	movhi	r2,1
   13124:	10926d04 	addi	r2,r2,18868
}
   13128:	e037883a 	mov	sp,fp
   1312c:	dfc00117 	ldw	ra,4(sp)
   13130:	df000017 	ldw	fp,0(sp)
   13134:	dec00204 	addi	sp,sp,8
   13138:	f800283a 	ret

0001313c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1313c:	defffb04 	addi	sp,sp,-20
   13140:	dfc00415 	stw	ra,16(sp)
   13144:	df000315 	stw	fp,12(sp)
   13148:	dc000215 	stw	r16,8(sp)
   1314c:	df000304 	addi	fp,sp,12
   13150:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13154:	e0bffe17 	ldw	r2,-8(fp)
   13158:	10800217 	ldw	r2,8(r2)
   1315c:	10d00034 	orhi	r3,r2,16384
   13160:	e0bffe17 	ldw	r2,-8(fp)
   13164:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13168:	e03ffd15 	stw	zero,-12(fp)
   1316c:	00002306 	br	131fc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13170:	04000074 	movhi	r16,1
   13174:	840f6304 	addi	r16,r16,15756
   13178:	e0bffd17 	ldw	r2,-12(fp)
   1317c:	1009883a 	mov	r4,r2
   13180:	01400304 	movi	r5,12
   13184:	00126880 	call	12688 <__mulsi3>
   13188:	8085883a 	add	r2,r16,r2
   1318c:	10c00017 	ldw	r3,0(r2)
   13190:	e0bffe17 	ldw	r2,-8(fp)
   13194:	10800017 	ldw	r2,0(r2)
   13198:	1880151e 	bne	r3,r2,131f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1319c:	04000074 	movhi	r16,1
   131a0:	840f6304 	addi	r16,r16,15756
   131a4:	e0bffd17 	ldw	r2,-12(fp)
   131a8:	1009883a 	mov	r4,r2
   131ac:	01400304 	movi	r5,12
   131b0:	00126880 	call	12688 <__mulsi3>
   131b4:	8085883a 	add	r2,r16,r2
   131b8:	10800204 	addi	r2,r2,8
   131bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   131c0:	10000b0e 	bge	r2,zero,131f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   131c4:	e13ffd17 	ldw	r4,-12(fp)
   131c8:	01400304 	movi	r5,12
   131cc:	00126880 	call	12688 <__mulsi3>
   131d0:	1007883a 	mov	r3,r2
   131d4:	00800074 	movhi	r2,1
   131d8:	108f6304 	addi	r2,r2,15756
   131dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   131e0:	e0bffe17 	ldw	r2,-8(fp)
   131e4:	18800226 	beq	r3,r2,131f0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   131e8:	00bffcc4 	movi	r2,-13
   131ec:	00000a06 	br	13218 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   131f0:	e0bffd17 	ldw	r2,-12(fp)
   131f4:	10800044 	addi	r2,r2,1
   131f8:	e0bffd15 	stw	r2,-12(fp)
   131fc:	00800074 	movhi	r2,1
   13200:	1090d804 	addi	r2,r2,17248
   13204:	10800017 	ldw	r2,0(r2)
   13208:	1007883a 	mov	r3,r2
   1320c:	e0bffd17 	ldw	r2,-12(fp)
   13210:	18bfd72e 	bgeu	r3,r2,13170 <_gp+0xffff6e40>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13214:	0005883a 	mov	r2,zero
}
   13218:	e6ffff04 	addi	sp,fp,-4
   1321c:	dfc00217 	ldw	ra,8(sp)
   13220:	df000117 	ldw	fp,4(sp)
   13224:	dc000017 	ldw	r16,0(sp)
   13228:	dec00304 	addi	sp,sp,12
   1322c:	f800283a 	ret

00013230 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13230:	defff604 	addi	sp,sp,-40
   13234:	dfc00915 	stw	ra,36(sp)
   13238:	df000815 	stw	fp,32(sp)
   1323c:	df000804 	addi	fp,sp,32
   13240:	e13ffd15 	stw	r4,-12(fp)
   13244:	e17ffe15 	stw	r5,-8(fp)
   13248:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1324c:	00bfffc4 	movi	r2,-1
   13250:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   13254:	00bffb44 	movi	r2,-19
   13258:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1325c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13260:	e13ffd17 	ldw	r4,-12(fp)
   13264:	01400074 	movhi	r5,1
   13268:	2950d604 	addi	r5,r5,17240
   1326c:	001342c0 	call	1342c <alt_find_dev>
   13270:	e0bff815 	stw	r2,-32(fp)
   13274:	e0bff817 	ldw	r2,-32(fp)
   13278:	1000051e 	bne	r2,zero,13290 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1327c:	e13ffd17 	ldw	r4,-12(fp)
   13280:	00134bc0 	call	134bc <alt_find_file>
   13284:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13288:	00800044 	movi	r2,1
   1328c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13290:	e0bff817 	ldw	r2,-32(fp)
   13294:	10002b26 	beq	r2,zero,13344 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13298:	e13ff817 	ldw	r4,-32(fp)
   1329c:	00135d00 	call	135d0 <alt_get_fd>
   132a0:	e0bff915 	stw	r2,-28(fp)
   132a4:	e0bff917 	ldw	r2,-28(fp)
   132a8:	1000030e 	bge	r2,zero,132b8 <open+0x88>
    {
      status = index;
   132ac:	e0bff917 	ldw	r2,-28(fp)
   132b0:	e0bffa15 	stw	r2,-24(fp)
   132b4:	00002506 	br	1334c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   132b8:	e13ff917 	ldw	r4,-28(fp)
   132bc:	01400304 	movi	r5,12
   132c0:	00126880 	call	12688 <__mulsi3>
   132c4:	1007883a 	mov	r3,r2
   132c8:	00800074 	movhi	r2,1
   132cc:	108f6304 	addi	r2,r2,15756
   132d0:	1885883a 	add	r2,r3,r2
   132d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   132d8:	e0fffe17 	ldw	r3,-8(fp)
   132dc:	00900034 	movhi	r2,16384
   132e0:	10bfffc4 	addi	r2,r2,-1
   132e4:	1886703a 	and	r3,r3,r2
   132e8:	e0bffc17 	ldw	r2,-16(fp)
   132ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   132f0:	e0bffb17 	ldw	r2,-20(fp)
   132f4:	1000051e 	bne	r2,zero,1330c <open+0xdc>
   132f8:	e13ffc17 	ldw	r4,-16(fp)
   132fc:	001313c0 	call	1313c <alt_file_locked>
   13300:	e0bffa15 	stw	r2,-24(fp)
   13304:	e0bffa17 	ldw	r2,-24(fp)
   13308:	10001016 	blt	r2,zero,1334c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1330c:	e0bff817 	ldw	r2,-32(fp)
   13310:	10800317 	ldw	r2,12(r2)
   13314:	10000826 	beq	r2,zero,13338 <open+0x108>
   13318:	e0bff817 	ldw	r2,-32(fp)
   1331c:	10800317 	ldw	r2,12(r2)
   13320:	e13ffc17 	ldw	r4,-16(fp)
   13324:	e17ffd17 	ldw	r5,-12(fp)
   13328:	e1bffe17 	ldw	r6,-8(fp)
   1332c:	e1ffff17 	ldw	r7,-4(fp)
   13330:	103ee83a 	callr	r2
   13334:	00000106 	br	1333c <open+0x10c>
   13338:	0005883a 	mov	r2,zero
   1333c:	e0bffa15 	stw	r2,-24(fp)
   13340:	00000206 	br	1334c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13344:	00bffb44 	movi	r2,-19
   13348:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1334c:	e0bffa17 	ldw	r2,-24(fp)
   13350:	1000080e 	bge	r2,zero,13374 <open+0x144>
  {
    alt_release_fd (index);  
   13354:	e13ff917 	ldw	r4,-28(fp)
   13358:	001338c0 	call	1338c <alt_release_fd>
    ALT_ERRNO = -status;
   1335c:	00130ec0 	call	130ec <alt_get_errno>
   13360:	e0fffa17 	ldw	r3,-24(fp)
   13364:	00c7c83a 	sub	r3,zero,r3
   13368:	10c00015 	stw	r3,0(r2)
    return -1;
   1336c:	00bfffc4 	movi	r2,-1
   13370:	00000106 	br	13378 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   13374:	e0bff917 	ldw	r2,-28(fp)
}
   13378:	e037883a 	mov	sp,fp
   1337c:	dfc00117 	ldw	ra,4(sp)
   13380:	df000017 	ldw	fp,0(sp)
   13384:	dec00204 	addi	sp,sp,8
   13388:	f800283a 	ret

0001338c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1338c:	defffc04 	addi	sp,sp,-16
   13390:	dfc00315 	stw	ra,12(sp)
   13394:	df000215 	stw	fp,8(sp)
   13398:	dc000115 	stw	r16,4(sp)
   1339c:	df000204 	addi	fp,sp,8
   133a0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   133a4:	e0bffe17 	ldw	r2,-8(fp)
   133a8:	108000d0 	cmplti	r2,r2,3
   133ac:	1000111e 	bne	r2,zero,133f4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   133b0:	04000074 	movhi	r16,1
   133b4:	840f6304 	addi	r16,r16,15756
   133b8:	e0bffe17 	ldw	r2,-8(fp)
   133bc:	1009883a 	mov	r4,r2
   133c0:	01400304 	movi	r5,12
   133c4:	00126880 	call	12688 <__mulsi3>
   133c8:	8085883a 	add	r2,r16,r2
   133cc:	10800204 	addi	r2,r2,8
   133d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   133d4:	04000074 	movhi	r16,1
   133d8:	840f6304 	addi	r16,r16,15756
   133dc:	e0bffe17 	ldw	r2,-8(fp)
   133e0:	1009883a 	mov	r4,r2
   133e4:	01400304 	movi	r5,12
   133e8:	00126880 	call	12688 <__mulsi3>
   133ec:	8085883a 	add	r2,r16,r2
   133f0:	10000015 	stw	zero,0(r2)
  }
}
   133f4:	e6ffff04 	addi	sp,fp,-4
   133f8:	dfc00217 	ldw	ra,8(sp)
   133fc:	df000117 	ldw	fp,4(sp)
   13400:	dc000017 	ldw	r16,0(sp)
   13404:	dec00304 	addi	sp,sp,12
   13408:	f800283a 	ret

0001340c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1340c:	deffff04 	addi	sp,sp,-4
   13410:	df000015 	stw	fp,0(sp)
   13414:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13418:	000170fa 	wrctl	ienable,zero
}
   1341c:	e037883a 	mov	sp,fp
   13420:	df000017 	ldw	fp,0(sp)
   13424:	dec00104 	addi	sp,sp,4
   13428:	f800283a 	ret

0001342c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1342c:	defffa04 	addi	sp,sp,-24
   13430:	dfc00515 	stw	ra,20(sp)
   13434:	df000415 	stw	fp,16(sp)
   13438:	df000404 	addi	fp,sp,16
   1343c:	e13ffe15 	stw	r4,-8(fp)
   13440:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13444:	e0bfff17 	ldw	r2,-4(fp)
   13448:	10800017 	ldw	r2,0(r2)
   1344c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13450:	e13ffe17 	ldw	r4,-8(fp)
   13454:	001376c0 	call	1376c <strlen>
   13458:	10800044 	addi	r2,r2,1
   1345c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13460:	00000d06 	br	13498 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13464:	e0bffc17 	ldw	r2,-16(fp)
   13468:	10c00217 	ldw	r3,8(r2)
   1346c:	e0bffd17 	ldw	r2,-12(fp)
   13470:	1809883a 	mov	r4,r3
   13474:	e17ffe17 	ldw	r5,-8(fp)
   13478:	100d883a 	mov	r6,r2
   1347c:	00136f00 	call	136f0 <memcmp>
   13480:	1000021e 	bne	r2,zero,1348c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13484:	e0bffc17 	ldw	r2,-16(fp)
   13488:	00000706 	br	134a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1348c:	e0bffc17 	ldw	r2,-16(fp)
   13490:	10800017 	ldw	r2,0(r2)
   13494:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13498:	e0fffc17 	ldw	r3,-16(fp)
   1349c:	e0bfff17 	ldw	r2,-4(fp)
   134a0:	18bff01e 	bne	r3,r2,13464 <_gp+0xffff7134>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   134a4:	0005883a 	mov	r2,zero
}
   134a8:	e037883a 	mov	sp,fp
   134ac:	dfc00117 	ldw	ra,4(sp)
   134b0:	df000017 	ldw	fp,0(sp)
   134b4:	dec00204 	addi	sp,sp,8
   134b8:	f800283a 	ret

000134bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   134bc:	defffb04 	addi	sp,sp,-20
   134c0:	dfc00415 	stw	ra,16(sp)
   134c4:	df000315 	stw	fp,12(sp)
   134c8:	df000304 	addi	fp,sp,12
   134cc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   134d0:	00800074 	movhi	r2,1
   134d4:	1090d404 	addi	r2,r2,17232
   134d8:	10800017 	ldw	r2,0(r2)
   134dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   134e0:	00003106 	br	135a8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   134e4:	e0bffd17 	ldw	r2,-12(fp)
   134e8:	10800217 	ldw	r2,8(r2)
   134ec:	1009883a 	mov	r4,r2
   134f0:	001376c0 	call	1376c <strlen>
   134f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   134f8:	e0bffd17 	ldw	r2,-12(fp)
   134fc:	10c00217 	ldw	r3,8(r2)
   13500:	e0bffe17 	ldw	r2,-8(fp)
   13504:	10bfffc4 	addi	r2,r2,-1
   13508:	1885883a 	add	r2,r3,r2
   1350c:	10800003 	ldbu	r2,0(r2)
   13510:	10803fcc 	andi	r2,r2,255
   13514:	1080201c 	xori	r2,r2,128
   13518:	10bfe004 	addi	r2,r2,-128
   1351c:	10800bd8 	cmpnei	r2,r2,47
   13520:	1000031e 	bne	r2,zero,13530 <alt_find_file+0x74>
    {
      len -= 1;
   13524:	e0bffe17 	ldw	r2,-8(fp)
   13528:	10bfffc4 	addi	r2,r2,-1
   1352c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13530:	e0bffe17 	ldw	r2,-8(fp)
   13534:	e0ffff17 	ldw	r3,-4(fp)
   13538:	1885883a 	add	r2,r3,r2
   1353c:	10800003 	ldbu	r2,0(r2)
   13540:	10803fcc 	andi	r2,r2,255
   13544:	1080201c 	xori	r2,r2,128
   13548:	10bfe004 	addi	r2,r2,-128
   1354c:	10800be0 	cmpeqi	r2,r2,47
   13550:	1000081e 	bne	r2,zero,13574 <alt_find_file+0xb8>
   13554:	e0bffe17 	ldw	r2,-8(fp)
   13558:	e0ffff17 	ldw	r3,-4(fp)
   1355c:	1885883a 	add	r2,r3,r2
   13560:	10800003 	ldbu	r2,0(r2)
   13564:	10803fcc 	andi	r2,r2,255
   13568:	1080201c 	xori	r2,r2,128
   1356c:	10bfe004 	addi	r2,r2,-128
   13570:	10000a1e 	bne	r2,zero,1359c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   13574:	e0bffd17 	ldw	r2,-12(fp)
   13578:	10c00217 	ldw	r3,8(r2)
   1357c:	e0bffe17 	ldw	r2,-8(fp)
   13580:	1809883a 	mov	r4,r3
   13584:	e17fff17 	ldw	r5,-4(fp)
   13588:	100d883a 	mov	r6,r2
   1358c:	00136f00 	call	136f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13590:	1000021e 	bne	r2,zero,1359c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   13594:	e0bffd17 	ldw	r2,-12(fp)
   13598:	00000806 	br	135bc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1359c:	e0bffd17 	ldw	r2,-12(fp)
   135a0:	10800017 	ldw	r2,0(r2)
   135a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   135a8:	e0fffd17 	ldw	r3,-12(fp)
   135ac:	00800074 	movhi	r2,1
   135b0:	1090d404 	addi	r2,r2,17232
   135b4:	18bfcb1e 	bne	r3,r2,134e4 <_gp+0xffff71b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   135b8:	0005883a 	mov	r2,zero
}
   135bc:	e037883a 	mov	sp,fp
   135c0:	dfc00117 	ldw	ra,4(sp)
   135c4:	df000017 	ldw	fp,0(sp)
   135c8:	dec00204 	addi	sp,sp,8
   135cc:	f800283a 	ret

000135d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   135d0:	defffa04 	addi	sp,sp,-24
   135d4:	dfc00515 	stw	ra,20(sp)
   135d8:	df000415 	stw	fp,16(sp)
   135dc:	dc000315 	stw	r16,12(sp)
   135e0:	df000404 	addi	fp,sp,16
   135e4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   135e8:	00bffa04 	movi	r2,-24
   135ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   135f0:	e03ffc15 	stw	zero,-16(fp)
   135f4:	00002106 	br	1367c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   135f8:	04000074 	movhi	r16,1
   135fc:	840f6304 	addi	r16,r16,15756
   13600:	e0bffc17 	ldw	r2,-16(fp)
   13604:	1009883a 	mov	r4,r2
   13608:	01400304 	movi	r5,12
   1360c:	00126880 	call	12688 <__mulsi3>
   13610:	8085883a 	add	r2,r16,r2
   13614:	10800017 	ldw	r2,0(r2)
   13618:	1000151e 	bne	r2,zero,13670 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1361c:	04000074 	movhi	r16,1
   13620:	840f6304 	addi	r16,r16,15756
   13624:	e0bffc17 	ldw	r2,-16(fp)
   13628:	1009883a 	mov	r4,r2
   1362c:	01400304 	movi	r5,12
   13630:	00126880 	call	12688 <__mulsi3>
   13634:	8085883a 	add	r2,r16,r2
   13638:	e0fffe17 	ldw	r3,-8(fp)
   1363c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   13640:	00800074 	movhi	r2,1
   13644:	1090d804 	addi	r2,r2,17248
   13648:	10c00017 	ldw	r3,0(r2)
   1364c:	e0bffc17 	ldw	r2,-16(fp)
   13650:	1880040e 	bge	r3,r2,13664 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   13654:	00800074 	movhi	r2,1
   13658:	1090d804 	addi	r2,r2,17248
   1365c:	e0fffc17 	ldw	r3,-16(fp)
   13660:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   13664:	e0bffc17 	ldw	r2,-16(fp)
   13668:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1366c:	00000606 	br	13688 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13670:	e0bffc17 	ldw	r2,-16(fp)
   13674:	10800044 	addi	r2,r2,1
   13678:	e0bffc15 	stw	r2,-16(fp)
   1367c:	e0bffc17 	ldw	r2,-16(fp)
   13680:	10800810 	cmplti	r2,r2,32
   13684:	103fdc1e 	bne	r2,zero,135f8 <_gp+0xffff72c8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   13688:	e0bffd17 	ldw	r2,-12(fp)
}
   1368c:	e6ffff04 	addi	sp,fp,-4
   13690:	dfc00217 	ldw	ra,8(sp)
   13694:	df000117 	ldw	fp,4(sp)
   13698:	dc000017 	ldw	r16,0(sp)
   1369c:	dec00304 	addi	sp,sp,12
   136a0:	f800283a 	ret

000136a4 <atexit>:
   136a4:	200b883a 	mov	r5,r4
   136a8:	000d883a 	mov	r6,zero
   136ac:	0009883a 	mov	r4,zero
   136b0:	000f883a 	mov	r7,zero
   136b4:	00137f81 	jmpi	137f8 <__register_exitproc>

000136b8 <exit>:
   136b8:	defffe04 	addi	sp,sp,-8
   136bc:	000b883a 	mov	r5,zero
   136c0:	dc000015 	stw	r16,0(sp)
   136c4:	dfc00115 	stw	ra,4(sp)
   136c8:	2021883a 	mov	r16,r4
   136cc:	00139140 	call	13914 <__call_exitprocs>
   136d0:	00800074 	movhi	r2,1
   136d4:	1090da04 	addi	r2,r2,17256
   136d8:	11000017 	ldw	r4,0(r2)
   136dc:	20800f17 	ldw	r2,60(r4)
   136e0:	10000126 	beq	r2,zero,136e8 <exit+0x30>
   136e4:	103ee83a 	callr	r2
   136e8:	8009883a 	mov	r4,r16
   136ec:	0013bcc0 	call	13bcc <_exit>

000136f0 <memcmp>:
   136f0:	01c000c4 	movi	r7,3
   136f4:	3980192e 	bgeu	r7,r6,1375c <memcmp+0x6c>
   136f8:	2144b03a 	or	r2,r4,r5
   136fc:	11c4703a 	and	r2,r2,r7
   13700:	10000f26 	beq	r2,zero,13740 <memcmp+0x50>
   13704:	21c00003 	ldbu	r7,0(r4)
   13708:	28800003 	ldbu	r2,0(r5)
   1370c:	3880151e 	bne	r7,r2,13764 <memcmp+0x74>
   13710:	30ffff84 	addi	r3,r6,-2
   13714:	01bfffc4 	movi	r6,-1
   13718:	00000406 	br	1372c <memcmp+0x3c>
   1371c:	21c00003 	ldbu	r7,0(r4)
   13720:	28800003 	ldbu	r2,0(r5)
   13724:	18ffffc4 	addi	r3,r3,-1
   13728:	38800e1e 	bne	r7,r2,13764 <memcmp+0x74>
   1372c:	21000044 	addi	r4,r4,1
   13730:	29400044 	addi	r5,r5,1
   13734:	19bff91e 	bne	r3,r6,1371c <_gp+0xffff73ec>
   13738:	0005883a 	mov	r2,zero
   1373c:	f800283a 	ret
   13740:	20c00017 	ldw	r3,0(r4)
   13744:	28800017 	ldw	r2,0(r5)
   13748:	1880041e 	bne	r3,r2,1375c <memcmp+0x6c>
   1374c:	31bfff04 	addi	r6,r6,-4
   13750:	21000104 	addi	r4,r4,4
   13754:	29400104 	addi	r5,r5,4
   13758:	39bff936 	bltu	r7,r6,13740 <_gp+0xffff7410>
   1375c:	303fe91e 	bne	r6,zero,13704 <_gp+0xffff73d4>
   13760:	003ff506 	br	13738 <_gp+0xffff7408>
   13764:	3885c83a 	sub	r2,r7,r2
   13768:	f800283a 	ret

0001376c <strlen>:
   1376c:	208000cc 	andi	r2,r4,3
   13770:	10001d26 	beq	r2,zero,137e8 <strlen+0x7c>
   13774:	20800007 	ldb	r2,0(r4)
   13778:	10001d26 	beq	r2,zero,137f0 <strlen+0x84>
   1377c:	2005883a 	mov	r2,r4
   13780:	00000206 	br	1378c <strlen+0x20>
   13784:	10c00007 	ldb	r3,0(r2)
   13788:	18001526 	beq	r3,zero,137e0 <strlen+0x74>
   1378c:	10800044 	addi	r2,r2,1
   13790:	10c000cc 	andi	r3,r2,3
   13794:	183ffb1e 	bne	r3,zero,13784 <_gp+0xffff7454>
   13798:	10c00017 	ldw	r3,0(r2)
   1379c:	01ffbff4 	movhi	r7,65279
   137a0:	39ffbfc4 	addi	r7,r7,-257
   137a4:	01a02074 	movhi	r6,32897
   137a8:	31a02004 	addi	r6,r6,-32640
   137ac:	00000206 	br	137b8 <strlen+0x4c>
   137b0:	10800104 	addi	r2,r2,4
   137b4:	10c00017 	ldw	r3,0(r2)
   137b8:	19cb883a 	add	r5,r3,r7
   137bc:	00c6303a 	nor	r3,zero,r3
   137c0:	28c6703a 	and	r3,r5,r3
   137c4:	1986703a 	and	r3,r3,r6
   137c8:	183ff926 	beq	r3,zero,137b0 <_gp+0xffff7480>
   137cc:	10c00007 	ldb	r3,0(r2)
   137d0:	18000326 	beq	r3,zero,137e0 <strlen+0x74>
   137d4:	10800044 	addi	r2,r2,1
   137d8:	10c00007 	ldb	r3,0(r2)
   137dc:	183ffd1e 	bne	r3,zero,137d4 <_gp+0xffff74a4>
   137e0:	1105c83a 	sub	r2,r2,r4
   137e4:	f800283a 	ret
   137e8:	2005883a 	mov	r2,r4
   137ec:	003fea06 	br	13798 <_gp+0xffff7468>
   137f0:	0005883a 	mov	r2,zero
   137f4:	f800283a 	ret

000137f8 <__register_exitproc>:
   137f8:	defffa04 	addi	sp,sp,-24
   137fc:	00800074 	movhi	r2,1
   13800:	1090da04 	addi	r2,r2,17256
   13804:	dc000315 	stw	r16,12(sp)
   13808:	14000017 	ldw	r16,0(r2)
   1380c:	dc400415 	stw	r17,16(sp)
   13810:	dfc00515 	stw	ra,20(sp)
   13814:	80805217 	ldw	r2,328(r16)
   13818:	2023883a 	mov	r17,r4
   1381c:	10003a26 	beq	r2,zero,13908 <__register_exitproc+0x110>
   13820:	10c00117 	ldw	r3,4(r2)
   13824:	020007c4 	movi	r8,31
   13828:	40c0190e 	bge	r8,r3,13890 <__register_exitproc+0x98>
   1382c:	00800034 	movhi	r2,0
   13830:	10800004 	addi	r2,r2,0
   13834:	1000061e 	bne	r2,zero,13850 <__register_exitproc+0x58>
   13838:	00bfffc4 	movi	r2,-1
   1383c:	dfc00517 	ldw	ra,20(sp)
   13840:	dc400417 	ldw	r17,16(sp)
   13844:	dc000317 	ldw	r16,12(sp)
   13848:	dec00604 	addi	sp,sp,24
   1384c:	f800283a 	ret
   13850:	01006404 	movi	r4,400
   13854:	d9400015 	stw	r5,0(sp)
   13858:	d9800115 	stw	r6,4(sp)
   1385c:	d9c00215 	stw	r7,8(sp)
   13860:	00000000 	call	0 <__reset-0x10000>
   13864:	d9400017 	ldw	r5,0(sp)
   13868:	d9800117 	ldw	r6,4(sp)
   1386c:	d9c00217 	ldw	r7,8(sp)
   13870:	103ff126 	beq	r2,zero,13838 <_gp+0xffff7508>
   13874:	81005217 	ldw	r4,328(r16)
   13878:	10000115 	stw	zero,4(r2)
   1387c:	0007883a 	mov	r3,zero
   13880:	11000015 	stw	r4,0(r2)
   13884:	80805215 	stw	r2,328(r16)
   13888:	10006215 	stw	zero,392(r2)
   1388c:	10006315 	stw	zero,396(r2)
   13890:	88000d1e 	bne	r17,zero,138c8 <__register_exitproc+0xd0>
   13894:	19000084 	addi	r4,r3,2
   13898:	2109883a 	add	r4,r4,r4
   1389c:	18c00044 	addi	r3,r3,1
   138a0:	2109883a 	add	r4,r4,r4
   138a4:	10c00115 	stw	r3,4(r2)
   138a8:	1105883a 	add	r2,r2,r4
   138ac:	11400015 	stw	r5,0(r2)
   138b0:	0005883a 	mov	r2,zero
   138b4:	dfc00517 	ldw	ra,20(sp)
   138b8:	dc400417 	ldw	r17,16(sp)
   138bc:	dc000317 	ldw	r16,12(sp)
   138c0:	dec00604 	addi	sp,sp,24
   138c4:	f800283a 	ret
   138c8:	18c9883a 	add	r4,r3,r3
   138cc:	2109883a 	add	r4,r4,r4
   138d0:	1109883a 	add	r4,r2,r4
   138d4:	21802215 	stw	r6,136(r4)
   138d8:	01800044 	movi	r6,1
   138dc:	12006217 	ldw	r8,392(r2)
   138e0:	30cc983a 	sll	r6,r6,r3
   138e4:	4190b03a 	or	r8,r8,r6
   138e8:	12006215 	stw	r8,392(r2)
   138ec:	21c04215 	stw	r7,264(r4)
   138f0:	01000084 	movi	r4,2
   138f4:	893fe71e 	bne	r17,r4,13894 <_gp+0xffff7564>
   138f8:	11006317 	ldw	r4,396(r2)
   138fc:	218cb03a 	or	r6,r4,r6
   13900:	11806315 	stw	r6,396(r2)
   13904:	003fe306 	br	13894 <_gp+0xffff7564>
   13908:	80805304 	addi	r2,r16,332
   1390c:	80805215 	stw	r2,328(r16)
   13910:	003fc306 	br	13820 <_gp+0xffff74f0>

00013914 <__call_exitprocs>:
   13914:	00800074 	movhi	r2,1
   13918:	1090da04 	addi	r2,r2,17256
   1391c:	10800017 	ldw	r2,0(r2)
   13920:	defff304 	addi	sp,sp,-52
   13924:	df000b15 	stw	fp,44(sp)
   13928:	d8800015 	stw	r2,0(sp)
   1392c:	10805204 	addi	r2,r2,328
   13930:	dd400815 	stw	r21,32(sp)
   13934:	dfc00c15 	stw	ra,48(sp)
   13938:	ddc00a15 	stw	r23,40(sp)
   1393c:	dd800915 	stw	r22,36(sp)
   13940:	dd000715 	stw	r20,28(sp)
   13944:	dcc00615 	stw	r19,24(sp)
   13948:	dc800515 	stw	r18,20(sp)
   1394c:	dc400415 	stw	r17,16(sp)
   13950:	dc000315 	stw	r16,12(sp)
   13954:	d9000115 	stw	r4,4(sp)
   13958:	2839883a 	mov	fp,r5
   1395c:	d8800215 	stw	r2,8(sp)
   13960:	057fffc4 	movi	r21,-1
   13964:	d8800017 	ldw	r2,0(sp)
   13968:	14805217 	ldw	r18,328(r2)
   1396c:	90001826 	beq	r18,zero,139d0 <__call_exitprocs+0xbc>
   13970:	ddc00217 	ldw	r23,8(sp)
   13974:	90c00117 	ldw	r3,4(r18)
   13978:	1c3fffc4 	addi	r16,r3,-1
   1397c:	80001116 	blt	r16,zero,139c4 <__call_exitprocs+0xb0>
   13980:	18c00044 	addi	r3,r3,1
   13984:	8427883a 	add	r19,r16,r16
   13988:	18c7883a 	add	r3,r3,r3
   1398c:	95802204 	addi	r22,r18,136
   13990:	9ce7883a 	add	r19,r19,r19
   13994:	18c7883a 	add	r3,r3,r3
   13998:	b4e7883a 	add	r19,r22,r19
   1399c:	90e3883a 	add	r17,r18,r3
   139a0:	e0001726 	beq	fp,zero,13a00 <__call_exitprocs+0xec>
   139a4:	8c87c83a 	sub	r3,r17,r18
   139a8:	b0c7883a 	add	r3,r22,r3
   139ac:	18c01e17 	ldw	r3,120(r3)
   139b0:	1f001326 	beq	r3,fp,13a00 <__call_exitprocs+0xec>
   139b4:	843fffc4 	addi	r16,r16,-1
   139b8:	9cffff04 	addi	r19,r19,-4
   139bc:	8c7fff04 	addi	r17,r17,-4
   139c0:	857ff71e 	bne	r16,r21,139a0 <_gp+0xffff7670>
   139c4:	00800034 	movhi	r2,0
   139c8:	10800004 	addi	r2,r2,0
   139cc:	10002a1e 	bne	r2,zero,13a78 <__call_exitprocs+0x164>
   139d0:	dfc00c17 	ldw	ra,48(sp)
   139d4:	df000b17 	ldw	fp,44(sp)
   139d8:	ddc00a17 	ldw	r23,40(sp)
   139dc:	dd800917 	ldw	r22,36(sp)
   139e0:	dd400817 	ldw	r21,32(sp)
   139e4:	dd000717 	ldw	r20,28(sp)
   139e8:	dcc00617 	ldw	r19,24(sp)
   139ec:	dc800517 	ldw	r18,20(sp)
   139f0:	dc400417 	ldw	r17,16(sp)
   139f4:	dc000317 	ldw	r16,12(sp)
   139f8:	dec00d04 	addi	sp,sp,52
   139fc:	f800283a 	ret
   13a00:	91000117 	ldw	r4,4(r18)
   13a04:	88c00017 	ldw	r3,0(r17)
   13a08:	213fffc4 	addi	r4,r4,-1
   13a0c:	24001526 	beq	r4,r16,13a64 <__call_exitprocs+0x150>
   13a10:	88000015 	stw	zero,0(r17)
   13a14:	183fe726 	beq	r3,zero,139b4 <_gp+0xffff7684>
   13a18:	00800044 	movi	r2,1
   13a1c:	1408983a 	sll	r4,r2,r16
   13a20:	91406217 	ldw	r5,392(r18)
   13a24:	95000117 	ldw	r20,4(r18)
   13a28:	214a703a 	and	r5,r4,r5
   13a2c:	28000b26 	beq	r5,zero,13a5c <__call_exitprocs+0x148>
   13a30:	91406317 	ldw	r5,396(r18)
   13a34:	2148703a 	and	r4,r4,r5
   13a38:	20000c1e 	bne	r4,zero,13a6c <__call_exitprocs+0x158>
   13a3c:	99400017 	ldw	r5,0(r19)
   13a40:	d9000117 	ldw	r4,4(sp)
   13a44:	183ee83a 	callr	r3
   13a48:	90c00117 	ldw	r3,4(r18)
   13a4c:	1d3fc51e 	bne	r3,r20,13964 <_gp+0xffff7634>
   13a50:	b8c00017 	ldw	r3,0(r23)
   13a54:	1cbfd726 	beq	r3,r18,139b4 <_gp+0xffff7684>
   13a58:	003fc206 	br	13964 <_gp+0xffff7634>
   13a5c:	183ee83a 	callr	r3
   13a60:	003ff906 	br	13a48 <_gp+0xffff7718>
   13a64:	94000115 	stw	r16,4(r18)
   13a68:	003fea06 	br	13a14 <_gp+0xffff76e4>
   13a6c:	99000017 	ldw	r4,0(r19)
   13a70:	183ee83a 	callr	r3
   13a74:	003ff406 	br	13a48 <_gp+0xffff7718>
   13a78:	90c00117 	ldw	r3,4(r18)
   13a7c:	1800081e 	bne	r3,zero,13aa0 <__call_exitprocs+0x18c>
   13a80:	90c00017 	ldw	r3,0(r18)
   13a84:	18000a26 	beq	r3,zero,13ab0 <__call_exitprocs+0x19c>
   13a88:	9009883a 	mov	r4,r18
   13a8c:	b8c00015 	stw	r3,0(r23)
   13a90:	00000000 	call	0 <__reset-0x10000>
   13a94:	bc800017 	ldw	r18,0(r23)
   13a98:	903fb61e 	bne	r18,zero,13974 <_gp+0xffff7644>
   13a9c:	003fcc06 	br	139d0 <_gp+0xffff76a0>
   13aa0:	90c00017 	ldw	r3,0(r18)
   13aa4:	902f883a 	mov	r23,r18
   13aa8:	1825883a 	mov	r18,r3
   13aac:	003ffa06 	br	13a98 <_gp+0xffff7768>
   13ab0:	0007883a 	mov	r3,zero
   13ab4:	003ffb06 	br	13aa4 <_gp+0xffff7774>

00013ab8 <udivmodsi4>:
   13ab8:	2900182e 	bgeu	r5,r4,13b1c <udivmodsi4+0x64>
   13abc:	28001716 	blt	r5,zero,13b1c <udivmodsi4+0x64>
   13ac0:	00800804 	movi	r2,32
   13ac4:	00c00044 	movi	r3,1
   13ac8:	00000206 	br	13ad4 <udivmodsi4+0x1c>
   13acc:	10001126 	beq	r2,zero,13b14 <udivmodsi4+0x5c>
   13ad0:	28000516 	blt	r5,zero,13ae8 <udivmodsi4+0x30>
   13ad4:	294b883a 	add	r5,r5,r5
   13ad8:	10bfffc4 	addi	r2,r2,-1
   13adc:	18c7883a 	add	r3,r3,r3
   13ae0:	293ffa36 	bltu	r5,r4,13acc <_gp+0xffff779c>
   13ae4:	18000b26 	beq	r3,zero,13b14 <udivmodsi4+0x5c>
   13ae8:	0005883a 	mov	r2,zero
   13aec:	21400236 	bltu	r4,r5,13af8 <udivmodsi4+0x40>
   13af0:	2149c83a 	sub	r4,r4,r5
   13af4:	10c4b03a 	or	r2,r2,r3
   13af8:	1806d07a 	srli	r3,r3,1
   13afc:	280ad07a 	srli	r5,r5,1
   13b00:	183ffa1e 	bne	r3,zero,13aec <_gp+0xffff77bc>
   13b04:	3000011e 	bne	r6,zero,13b0c <udivmodsi4+0x54>
   13b08:	f800283a 	ret
   13b0c:	2005883a 	mov	r2,r4
   13b10:	f800283a 	ret
   13b14:	0005883a 	mov	r2,zero
   13b18:	003ffa06 	br	13b04 <_gp+0xffff77d4>
   13b1c:	00c00044 	movi	r3,1
   13b20:	0005883a 	mov	r2,zero
   13b24:	003ff106 	br	13aec <_gp+0xffff77bc>

00013b28 <__divsi3>:
   13b28:	deffff04 	addi	sp,sp,-4
   13b2c:	dfc00015 	stw	ra,0(sp)
   13b30:	20000916 	blt	r4,zero,13b58 <__divsi3+0x30>
   13b34:	000f883a 	mov	r7,zero
   13b38:	28000a16 	blt	r5,zero,13b64 <__divsi3+0x3c>
   13b3c:	000d883a 	mov	r6,zero
   13b40:	0013ab80 	call	13ab8 <udivmodsi4>
   13b44:	38000126 	beq	r7,zero,13b4c <__divsi3+0x24>
   13b48:	0085c83a 	sub	r2,zero,r2
   13b4c:	dfc00017 	ldw	ra,0(sp)
   13b50:	dec00104 	addi	sp,sp,4
   13b54:	f800283a 	ret
   13b58:	0109c83a 	sub	r4,zero,r4
   13b5c:	01c00044 	movi	r7,1
   13b60:	283ff60e 	bge	r5,zero,13b3c <_gp+0xffff780c>
   13b64:	014bc83a 	sub	r5,zero,r5
   13b68:	39c0005c 	xori	r7,r7,1
   13b6c:	003ff306 	br	13b3c <_gp+0xffff780c>

00013b70 <__modsi3>:
   13b70:	20000316 	blt	r4,zero,13b80 <__modsi3+0x10>
   13b74:	28000c16 	blt	r5,zero,13ba8 <__modsi3+0x38>
   13b78:	01800044 	movi	r6,1
   13b7c:	0013ab81 	jmpi	13ab8 <udivmodsi4>
   13b80:	deffff04 	addi	sp,sp,-4
   13b84:	dfc00015 	stw	ra,0(sp)
   13b88:	0109c83a 	sub	r4,zero,r4
   13b8c:	28000916 	blt	r5,zero,13bb4 <__modsi3+0x44>
   13b90:	01800044 	movi	r6,1
   13b94:	0013ab80 	call	13ab8 <udivmodsi4>
   13b98:	0085c83a 	sub	r2,zero,r2
   13b9c:	dfc00017 	ldw	ra,0(sp)
   13ba0:	dec00104 	addi	sp,sp,4
   13ba4:	f800283a 	ret
   13ba8:	014bc83a 	sub	r5,zero,r5
   13bac:	01800044 	movi	r6,1
   13bb0:	0013ab81 	jmpi	13ab8 <udivmodsi4>
   13bb4:	014bc83a 	sub	r5,zero,r5
   13bb8:	003ff506 	br	13b90 <_gp+0xffff7860>

00013bbc <__udivsi3>:
   13bbc:	000d883a 	mov	r6,zero
   13bc0:	0013ab81 	jmpi	13ab8 <udivmodsi4>

00013bc4 <__umodsi3>:
   13bc4:	01800044 	movi	r6,1
   13bc8:	0013ab81 	jmpi	13ab8 <udivmodsi4>

00013bcc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13bcc:	defffd04 	addi	sp,sp,-12
   13bd0:	df000215 	stw	fp,8(sp)
   13bd4:	df000204 	addi	fp,sp,8
   13bd8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13bdc:	0001883a 	nop
   13be0:	e0bfff17 	ldw	r2,-4(fp)
   13be4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13be8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13bec:	10000226 	beq	r2,zero,13bf8 <_exit+0x2c>
    ALT_SIM_FAIL();
   13bf0:	002af070 	cmpltui	zero,zero,43969
   13bf4:	00000106 	br	13bfc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   13bf8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13bfc:	003fff06 	br	13bfc <_gp+0xffff78cc>
